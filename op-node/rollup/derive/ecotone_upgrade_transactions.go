package derive

import (
	"bytes"
	"fmt"
	"math/big"

	"github.com/zircuit-labs/l2-geth-public/common"
	"github.com/zircuit-labs/l2-geth-public/common/hexutil"
	"github.com/zircuit-labs/l2-geth-public/core/types"
	"github.com/zircuit-labs/l2-geth-public/crypto"

	"github.com/zircuit-labs/zkr-monorepo-public/op-bindings/predeploys"
	"github.com/zircuit-labs/zkr-monorepo-public/op-service/solabi"
)

const UpgradeToFuncSignature = "upgradeTo(address)"

var (
	// known address w/ zero txns
	L1BlockDeployerAddress        = common.HexToAddress("0x4210000000000000000000000000000000000000")
	GasPriceOracleDeployerAddress = common.HexToAddress("0x4210000000000000000000000000000000000001")

	newL1BlockAddress        = crypto.CreateAddress(L1BlockDeployerAddress, 0)
	newGasPriceOracleAddress = crypto.CreateAddress(GasPriceOracleDeployerAddress, 0)

	deployL1BlockSource        = UpgradeDepositSource{Intent: "Ecotone: L1 Block Deployment"}
	deployGasPriceOracleSource = UpgradeDepositSource{Intent: "Ecotone: Gas Price Oracle Deployment"}
	updateL1BlockProxySource   = UpgradeDepositSource{Intent: "Ecotone: L1 Block Proxy Update"}
	updateGasPriceOracleSource = UpgradeDepositSource{Intent: "Ecotone: Gas Price Oracle Proxy Update"}
	enableEcotoneSource        = UpgradeDepositSource{Intent: "Ecotone: Gas Price Oracle Set Ecotone"}
	beaconRootsSource          = UpgradeDepositSource{Intent: "Ecotone: beacon block roots contract deployment"}

	enableEcotoneInput = crypto.Keccak256([]byte("setEcotone()"))[:4]

	EIP4788From         = common.HexToAddress("0x0B799C86a49DEeb90402691F1041aa3AF2d3C875")
	eip4788CreationData = common.FromHex("0x60618060095f395ff33373fffffffffffffffffffffffffffffffffffffffe14604d57602036146024575f5ffd5b5f35801560495762001fff810690815414603c575f5ffd5b62001fff01545f5260205ff35b5f5ffd5b62001fff42064281555f359062001fff015500")
	UpgradeToFuncBytes4 = crypto.Keccak256([]byte(UpgradeToFuncSignature))[:4]

	l1BlockDeploymentBytecode        = common.FromHex("0x608060405234801561001057600080fd5b50610b6e806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638381f58a116100a2578063c598591811610071578063c598591814610232578063cb2d343f14610249578063e591b28214610251578063e81b2c6d14610279578063f82061401461028257600080fd5b80638381f58a146101f15780638b239f73146102055780639e8c49661461020e578063b80777ea1461021757600080fd5b806354fd4d50116100e957806354fd4d501461016c5780635cf249691461019057806364ca23ef1461019957806368d5dca6146101ba5780637f122dcf146101de57600080fd5b8063015d8eb91461011b57806309bd5a6014610130578063440a5e201461014f5780634d08bc8714610157575b600080fd5b61012e6101293660046105d2565b61028b565b005b61013960025481565b604051610146919061068d565b60405180910390f35b61012e61034a565b61015f6103a4565b60405161014691906106f9565b61015f604051806040016040528060058152602001640312e322e360dc1b81525081565b61013960015481565b6003546101ad9067ffffffffffffffff1681565b6040516101469190610721565b6003546101d190600160401b900463ffffffff1681565b604051610146919061073b565b61012e6101ec36600461084c565b610432565b6000546101ad9067ffffffffffffffff1681565b61013960055481565b61013960065481565b6000546101ad90600160401b900467ffffffffffffffff1681565b6003546101d190600160601b900463ffffffff1681565b61012e6104db565b61026c73deaddeaddeaddeaddeaddeaddeaddeaddead000181565b6040516101469190610948565b61013960045481565b61013960075481565b3373deaddeaddeaddeaddeaddeaddeaddeaddead0001146102c75760405162461bcd60e51b81526004016102be90610956565b60405180910390fd5b6000805467ffffffffffffffff8a81166001600160801b031990921691909117600160401b8a831602178255600188905560028790556003805467ffffffffffffffff1916918716919091179055600484905560058390556006829055604080516020810190915290815260329061033f9082610a9d565b505050505050505050565b3373deaddeaddeaddeaddeaddeaddeaddeaddead00011461037357633cc50b456000526004601cfd5b60043560801c60035560143560801c6000556024356001556044356007556064356002556084356004556000603255565b603280546103b1906109cd565b80601f01602080910402602001604051908101604052809291908181526020018280546103dd906109cd565b801561042a5780601f106103ff5761010080835404028352916020019161042a565b820191906000526020600020905b81548152906001019060200180831161040d57829003601f168201915b505050505081565b3373deaddeaddeaddeaddeaddeaddeaddeaddead0001146104655760405162461bcd60e51b81526004016102be90610956565b6000805467ffffffffffffffff8b81166001600160801b031990921691909117600160401b8b83160217909155600188905560028790556003805467ffffffffffffffff191691871691909117905560048490556005839055600682905560326104cf8282610a9d565b50505050505050505050565b3373deaddeaddeaddeaddeaddeaddeaddeaddead00011461050457633cc50b456000526004601cfd5b60043560801c60035560143560801c60005560243560015560443560075560643560025560843560045560a43560326000526020600020602082106001811461055257801561056357505050565b600183901b60c43517603255505050565b60018360011b0160325560005b8381101561058f578060c4013560208204840155602081019050610570565b505b505050565b67ffffffffffffffff81165b81146105ad57600080fd5b50565b80356105bb81610596565b92915050565b806105a2565b80356105bb816105c1565b600080600080600080600080610100898b0312156105f2576105f2600080fd5b60006105fe8b8b6105b0565b985050602061060f8b828c016105b0565b97505060406106208b828c016105c7565b96505060606106318b828c016105c7565b95505060806106428b828c016105b0565b94505060a06106538b828c016105c7565b93505060c06106648b828c016105c7565b92505060e06106758b828c016105c7565b9150509295985092959890939650565b805b82525050565b602081016105bb8284610685565b60005b838110156106b657818101518382015260200161069e565b8381111561058f5750506000910152565b60006106d1825190565b8084526020840193506106e881856020860161069b565b601f01601f19169290920192915050565b6020808252810161070a81846106c7565b9392505050565b67ffffffffffffffff8116610687565b602081016105bb8284610711565b63ffffffff8116610687565b602081016105bb828461072f565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561078557610785610749565b6040525050565b600061079760405190565b90506107a3828261075f565b919050565b600067ffffffffffffffff8211156107c2576107c2610749565b601f19601f83011660200192915050565b82818337506000910152565b60006107f26107ed846107a8565b61078c565b90508281526020810184848401111561080d5761080d600080fd5b6108188482856107d3565b509392505050565b600082601f83011261083457610834600080fd5b81356108448482602086016107df565b949350505050565b60008060008060008060008060006101208a8c03121561086e5761086e600080fd5b600061087a8c8c6105b0565b995050602061088b8c828d016105b0565b985050604061089c8c828d016105c7565b97505060606108ad8c828d016105c7565b96505060806108be8c828d016105b0565b95505060a06108cf8c828d016105c7565b94505060c06108e08c828d016105c7565b93505060e06108f18c828d016105c7565b9250506101008a013567ffffffffffffffff81111561091257610912600080fd5b61091e8c828d01610820565b9150509295985092959850929598565b60006001600160a01b0382166105bb565b6106878161092e565b602081016105bb828461093f565b602080825281016105bb81603b81527f4c31426c6f636b3a206f6e6c7920746865206465706f7369746f72206163636f60208201527f756e742063616e20736574204c3120626c6f636b2076616c7565730000000000604082015260600190565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806109e157607f821691505b6020821081036109f3576109f36109b7565b50919050565b60006105bb610a058381565b90565b610a11836109f9565b81546008840282811b60001990911b908116901990911617825550505050565b6000610591818484610a08565b81811015610a5957610a51600082610a31565b600101610a3e565b5050565b601f821115610591576000818152602090206020601f85010481016020851015610a845750805b610a966020601f860104830182610a3e565b5050505050565b815167ffffffffffffffff811115610ab757610ab7610749565b610ac182546109cd565b610acc828285610a5d565b6020601f831160018114610b005760008415610ae85750858201515b600019600886021c1981166002860217865550610b59565b600085815260208120601f198616915b82811015610b305788850151825560209485019460019092019101610b10565b86831015610b4c5784890151600019601f89166008021c191682555b6001600288020188555050505b50505050505056fea164736f6c634300080f000a")
	gasPriceOracleDeploymentBytecode = common.FromHex("")
)

func EcotoneNetworkUpgradeTransactions() ([]hexutil.Bytes, error) {
	upgradeTxns := make([]hexutil.Bytes, 0, 6)

	deployL1BlockTransaction, err := types.NewTx(&types.DepositTx{
		SourceHash:          deployL1BlockSource.SourceHash(),
		From:                L1BlockDeployerAddress,
		To:                  nil,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 750_000,
		IsSystemTransaction: false,
		Data:                l1BlockDeploymentBytecode,
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, deployL1BlockTransaction)

	deployGasPriceOracle, err := types.NewTx(&types.DepositTx{
		SourceHash:          deployGasPriceOracleSource.SourceHash(),
		From:                GasPriceOracleDeployerAddress,
		To:                  nil,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 1_000_000,
		IsSystemTransaction: false,
		Data:                gasPriceOracleDeploymentBytecode,
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, deployGasPriceOracle)

	updateL1BlockProxy, err := types.NewTx(&types.DepositTx{
		SourceHash:          updateL1BlockProxySource.SourceHash(),
		From:                common.Address{},
		To:                  &predeploys.L1BlockAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 50_000,
		IsSystemTransaction: false,
		Data:                upgradeToCalldata(newL1BlockAddress),
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, updateL1BlockProxy)

	updateGasPriceOracleProxy, err := types.NewTx(&types.DepositTx{
		SourceHash:          updateGasPriceOracleSource.SourceHash(),
		From:                common.Address{},
		To:                  &predeploys.GasPriceOracleAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 50_000,
		IsSystemTransaction: false,
		Data:                upgradeToCalldata(newGasPriceOracleAddress),
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, updateGasPriceOracleProxy)

	enableEcotone, err := types.NewTx(&types.DepositTx{
		SourceHash:          enableEcotoneSource.SourceHash(),
		From:                L1InfoDepositerAddress,
		To:                  &predeploys.GasPriceOracleAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 80_000,
		IsSystemTransaction: false,
		Data:                enableEcotoneInput,
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}
	upgradeTxns = append(upgradeTxns, enableEcotone)

	deployEIP4788, err := types.NewTx(&types.DepositTx{
		From:                EIP4788From,
		To:                  nil, // contract-deployment tx
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 0x3d090, // hex constant, as defined in EIP-4788
		Data:                eip4788CreationData,
		IsSystemTransaction: false,
		SourceHash:          beaconRootsSource.SourceHash(),
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, deployEIP4788)

	return upgradeTxns, nil
}

func upgradeToCalldata(addr common.Address) []byte {
	buf := bytes.NewBuffer(make([]byte, 0, 4+20))
	if err := solabi.WriteSignature(buf, UpgradeToFuncBytes4); err != nil {
		panic(fmt.Errorf("failed to write upgradeTo signature data: %w", err))
	}
	if err := solabi.WriteAddress(buf, addr); err != nil {
		panic(fmt.Errorf("failed to write upgradeTo address data: %w", err))
	}
	return buf.Bytes()
}
