// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

contract Verifier {

    string public constant version = "c3131379c4bf618f2135c29547049b46923f7dca";

    fallback(bytes calldata _proof) external returns (bytes memory) {
        // Temporary dummy proof support
        if (_proof.length == 2 && (bytes2(_proof) == 0xDEAD || bytes2(_proof) == 0xFFFF)) {
            return bytes("");
        }

        assembly ("memory-safe") {
            // Enforce that Solidity memory layout is respected
            let data := mload(0x40)
            if iszero(eq(data, 0x80)) {
                revert(0, 0)
            }

            let success := true
            let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let is_affine := eq(x_cube_plus_3, y_square)
                    valid := and(valid, is_affine)
                }
            }
            mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x40, mod(calldataload(0x20), f_q))
mstore(0x60, mod(calldataload(0x40), f_q))
mstore(0x80, mod(calldataload(0x60), f_q))
mstore(0xa0, mod(calldataload(0x80), f_q))
mstore(0xc0, mod(calldataload(0xa0), f_q))
mstore(0xe0, mod(calldataload(0xc0), f_q))
mstore(0x100, mod(calldataload(0xe0), f_q))
mstore(0x120, mod(calldataload(0x100), f_q))
mstore(0x140, mod(calldataload(0x120), f_q))
mstore(0x160, mod(calldataload(0x140), f_q))
mstore(0x180, mod(calldataload(0x160), f_q))
mstore(0x0, 17967139007884439977203704648638375850221852439141353169260500773781171334480)

        {
            let x := calldataload(0x180)
            mstore(0x1a0, x)
            let y := calldataload(0x1a0)
            mstore(0x1c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x1c0)
            mstore(0x1e0, x)
            let y := calldataload(0x1e0)
            mstore(0x200, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x200)
            mstore(0x220, x)
            let y := calldataload(0x220)
            mstore(0x240, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x240)
            mstore(0x260, x)
            let y := calldataload(0x260)
            mstore(0x280, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x280)
            mstore(0x2a0, x)
            let y := calldataload(0x2a0)
            mstore(0x2c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x2e0, keccak256(0x0, 736))
{
            let hash := mload(0x2e0)
            mstore(0x300, mod(hash, f_q))
            mstore(0x320, hash)
        }

        {
            let x := calldataload(0x2c0)
            mstore(0x340, x)
            let y := calldataload(0x2e0)
            mstore(0x360, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x300)
            mstore(0x380, x)
            let y := calldataload(0x320)
            mstore(0x3a0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x3c0, keccak256(0x320, 160))
{
            let hash := mload(0x3c0)
            mstore(0x3e0, mod(hash, f_q))
            mstore(0x400, hash)
        }
mstore8(1056, 1)
mstore(0x420, keccak256(0x400, 33))
{
            let hash := mload(0x420)
            mstore(0x440, mod(hash, f_q))
            mstore(0x460, hash)
        }

        {
            let x := calldataload(0x340)
            mstore(0x480, x)
            let y := calldataload(0x360)
            mstore(0x4a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x380)
            mstore(0x4c0, x)
            let y := calldataload(0x3a0)
            mstore(0x4e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x3c0)
            mstore(0x500, x)
            let y := calldataload(0x3e0)
            mstore(0x520, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x400)
            mstore(0x540, x)
            let y := calldataload(0x420)
            mstore(0x560, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x440)
            mstore(0x580, x)
            let y := calldataload(0x460)
            mstore(0x5a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x480)
            mstore(0x5c0, x)
            let y := calldataload(0x4a0)
            mstore(0x5e0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x600, keccak256(0x460, 416))
{
            let hash := mload(0x600)
            mstore(0x620, mod(hash, f_q))
            mstore(0x640, hash)
        }

        {
            let x := calldataload(0x4c0)
            mstore(0x660, x)
            let y := calldataload(0x4e0)
            mstore(0x680, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x500)
            mstore(0x6a0, x)
            let y := calldataload(0x520)
            mstore(0x6c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x540)
            mstore(0x6e0, x)
            let y := calldataload(0x560)
            mstore(0x700, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x720, keccak256(0x640, 224))
{
            let hash := mload(0x720)
            mstore(0x740, mod(hash, f_q))
            mstore(0x760, hash)
        }
mstore(0x780, mod(calldataload(0x580), f_q))
mstore(0x7a0, mod(calldataload(0x5a0), f_q))
mstore(0x7c0, mod(calldataload(0x5c0), f_q))
mstore(0x7e0, mod(calldataload(0x5e0), f_q))
mstore(0x800, mod(calldataload(0x600), f_q))
mstore(0x820, mod(calldataload(0x620), f_q))
mstore(0x840, mod(calldataload(0x640), f_q))
mstore(0x860, mod(calldataload(0x660), f_q))
mstore(0x880, mod(calldataload(0x680), f_q))
mstore(0x8a0, mod(calldataload(0x6a0), f_q))
mstore(0x8c0, mod(calldataload(0x6c0), f_q))
mstore(0x8e0, mod(calldataload(0x6e0), f_q))
mstore(0x900, mod(calldataload(0x700), f_q))
mstore(0x920, mod(calldataload(0x720), f_q))
mstore(0x940, mod(calldataload(0x740), f_q))
mstore(0x960, mod(calldataload(0x760), f_q))
mstore(0x980, mod(calldataload(0x780), f_q))
mstore(0x9a0, mod(calldataload(0x7a0), f_q))
mstore(0x9c0, mod(calldataload(0x7c0), f_q))
mstore(0x9e0, mod(calldataload(0x7e0), f_q))
mstore(0xa00, mod(calldataload(0x800), f_q))
mstore(0xa20, mod(calldataload(0x820), f_q))
mstore(0xa40, mod(calldataload(0x840), f_q))
mstore(0xa60, mod(calldataload(0x860), f_q))
mstore(0xa80, mod(calldataload(0x880), f_q))
mstore(0xaa0, mod(calldataload(0x8a0), f_q))
mstore(0xac0, mod(calldataload(0x8c0), f_q))
mstore(0xae0, mod(calldataload(0x8e0), f_q))
mstore(0xb00, mod(calldataload(0x900), f_q))
mstore(0xb20, mod(calldataload(0x920), f_q))
mstore(0xb40, mod(calldataload(0x940), f_q))
mstore(0xb60, mod(calldataload(0x960), f_q))
mstore(0xb80, mod(calldataload(0x980), f_q))
mstore(0xba0, mod(calldataload(0x9a0), f_q))
mstore(0xbc0, mod(calldataload(0x9c0), f_q))
mstore(0xbe0, mod(calldataload(0x9e0), f_q))
mstore(0xc00, mod(calldataload(0xa00), f_q))
mstore(0xc20, mod(calldataload(0xa20), f_q))
mstore(0xc40, mod(calldataload(0xa40), f_q))
mstore(0xc60, mod(calldataload(0xa60), f_q))
mstore(0xc80, mod(calldataload(0xa80), f_q))
mstore(0xca0, mod(calldataload(0xaa0), f_q))
mstore(0xcc0, mod(calldataload(0xac0), f_q))
mstore(0xce0, mod(calldataload(0xae0), f_q))
mstore(0xd00, mod(calldataload(0xb00), f_q))
mstore(0xd20, mod(calldataload(0xb20), f_q))
mstore(0xd40, mod(calldataload(0xb40), f_q))
mstore(0xd60, keccak256(0x760, 1536))
{
            let hash := mload(0xd60)
            mstore(0xd80, mod(hash, f_q))
            mstore(0xda0, hash)
        }
mstore8(3520, 1)
mstore(0xdc0, keccak256(0xda0, 33))
{
            let hash := mload(0xdc0)
            mstore(0xde0, mod(hash, f_q))
            mstore(0xe00, hash)
        }

        {
            let x := calldataload(0xb60)
            mstore(0xe20, x)
            let y := calldataload(0xb80)
            mstore(0xe40, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xe60, keccak256(0xe00, 96))
{
            let hash := mload(0xe60)
            mstore(0xe80, mod(hash, f_q))
            mstore(0xea0, hash)
        }

        {
            let x := calldataload(0xba0)
            mstore(0xec0, x)
            let y := calldataload(0xbc0)
            mstore(0xee0, y)
            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0x20)
x := add(x, shl(88, mload(0x40)))
x := add(x, shl(176, mload(0x60)))
mstore(3840, x)
let y := mload(0x80)
y := add(y, shl(88, mload(0xa0)))
y := add(y, shl(176, mload(0xc0)))
mstore(3872, y)

            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0xe0)
x := add(x, shl(88, mload(0x100)))
x := add(x, shl(176, mload(0x120)))
mstore(3904, x)
let y := mload(0x140)
y := add(y, shl(88, mload(0x160)))
y := add(y, shl(176, mload(0x180)))
mstore(3936, y)

            success := and(validate_ec_point(x, y), success)
        }
mstore(0xf80, mulmod(mload(0x740), mload(0x740), f_q))
mstore(0xfa0, mulmod(mload(0xf80), mload(0xf80), f_q))
mstore(0xfc0, mulmod(mload(0xfa0), mload(0xfa0), f_q))
mstore(0xfe0, mulmod(mload(0xfc0), mload(0xfc0), f_q))
mstore(0x1000, mulmod(mload(0xfe0), mload(0xfe0), f_q))
mstore(0x1020, mulmod(mload(0x1000), mload(0x1000), f_q))
mstore(0x1040, mulmod(mload(0x1020), mload(0x1020), f_q))
mstore(0x1060, mulmod(mload(0x1040), mload(0x1040), f_q))
mstore(0x1080, mulmod(mload(0x1060), mload(0x1060), f_q))
mstore(0x10a0, mulmod(mload(0x1080), mload(0x1080), f_q))
mstore(0x10c0, mulmod(mload(0x10a0), mload(0x10a0), f_q))
mstore(0x10e0, mulmod(mload(0x10c0), mload(0x10c0), f_q))
mstore(0x1100, mulmod(mload(0x10e0), mload(0x10e0), f_q))
mstore(0x1120, mulmod(mload(0x1100), mload(0x1100), f_q))
mstore(0x1140, mulmod(mload(0x1120), mload(0x1120), f_q))
mstore(0x1160, mulmod(mload(0x1140), mload(0x1140), f_q))
mstore(0x1180, mulmod(mload(0x1160), mload(0x1160), f_q))
mstore(0x11a0, mulmod(mload(0x1180), mload(0x1180), f_q))
mstore(0x11c0, mulmod(mload(0x11a0), mload(0x11a0), f_q))
mstore(0x11e0, mulmod(mload(0x11c0), mload(0x11c0), f_q))
mstore(0x1200, mulmod(mload(0x11e0), mload(0x11e0), f_q))
mstore(0x1220, mulmod(mload(0x1200), mload(0x1200), f_q))
mstore(0x1240, mulmod(mload(0x1220), mload(0x1220), f_q))
mstore(0x1260, mulmod(mload(0x1240), mload(0x1240), f_q))
mstore(0x1280, addmod(mload(0x1260), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x12a0, mulmod(mload(0x1280), 21888241567198334088790460357988866238279339518792980768180410072331574733841, f_q))
mstore(0x12c0, mulmod(mload(0x12a0), 12929131318670223636853686797196826072950305380535537217467769528748593133487, f_q))
mstore(0x12e0, addmod(mload(0x740), 8959111553169051585392718948060449015598059019880497126230434657827215362130, f_q))
mstore(0x1300, mulmod(mload(0x12a0), 14655294445420895451632927078981340937842238432098198055057679026789553137428, f_q))
mstore(0x1320, addmod(mload(0x740), 7232948426418379770613478666275934150706125968317836288640525159786255358189, f_q))
mstore(0x1340, mulmod(mload(0x12a0), 12220484078924208264862893648548198807365556694478604924193442790112568454894, f_q))
mstore(0x1360, addmod(mload(0x740), 9667758792915066957383512096709076281182807705937429419504761396463240040723, f_q))
mstore(0x1380, mulmod(mload(0x12a0), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))
mstore(0x13a0, addmod(mload(0x740), 13154116519010929542673167886091370382741775939114889923107781597533678454429, f_q))
mstore(0x13c0, mulmod(mload(0x12a0), 7358966525675286471217089135633860168646304224547606326237275077574224349359, f_q))
mstore(0x13e0, addmod(mload(0x740), 14529276346163988751029316609623414919902060175868428017460929109001584146258, f_q))
mstore(0x1400, mulmod(mload(0x12a0), 9741553891420464328295280489650144566903017206473301385034033384879943874347, f_q))
mstore(0x1420, addmod(mload(0x740), 12146688980418810893951125255607130521645347193942732958664170801695864621270, f_q))
mstore(0x1440, mulmod(mload(0x12a0), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
mstore(0x1460, addmod(mload(0x740), 4558794634599160729665540001169218674296628713450539706539395399156027320107, f_q))
mstore(0x1480, mulmod(mload(0x12a0), 1, f_q))
mstore(0x14a0, addmod(mload(0x740), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x14c0, mulmod(mload(0x12a0), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
mstore(0x14e0, addmod(mload(0x740), 10436837293141318478790164891277058815157809665667237910671663755188835910966, f_q))
mstore(0x1500, mulmod(mload(0x12a0), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
mstore(0x1520, addmod(mload(0x740), 13513867906530865119835332133273263211836799082674232843258448413103731898270, f_q))
mstore(0x1540, mulmod(mload(0x12a0), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
mstore(0x1560, addmod(mload(0x740), 397435866944165296105265499114012685257684941273893521957278993950622991095, f_q))
mstore(0x1580, mulmod(mload(0x12a0), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
mstore(0x15a0, addmod(mload(0x740), 10676941854703594198666993839846402519342119846958189386823924046696287912227, f_q))
mstore(0x15c0, mulmod(mload(0x12a0), 18846108080730935585192484934247867403156699586319724728525857970312957475341, f_q))
mstore(0x15e0, addmod(mload(0x740), 3042134791108339637053920811009407685391664814096309615172346216262851020276, f_q))
mstore(0x1600, mulmod(mload(0x12a0), 3615478808282855240548287271348143516886772452944084747768312988864436725401, f_q))
mstore(0x1620, addmod(mload(0x740), 18272764063556419981698118473909131571661591947471949595929891197711371770216, f_q))
mstore(0x1640, mulmod(mload(0x12a0), 21451937155080765789602997556105366785934335730087568134349216848800867145453, f_q))
mstore(0x1660, addmod(mload(0x740), 436305716758509432643408189151908302614028670328466209348987337774941350164, f_q))
mstore(0x1680, mulmod(mload(0x12a0), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))
mstore(0x16a0, addmod(mload(0x740), 20461838439117790833741043996939313553025008529160428886800406442142042007110, f_q))
mstore(0x16c0, mulmod(mload(0x12a0), 13982290267294411190096162596630216412723378687553046594730793425118513274800, f_q))
mstore(0x16e0, addmod(mload(0x740), 7905952604544864032150243148627058675824985712862987748967410761457295220817, f_q))
mstore(0x1700, mulmod(mload(0x12a0), 216092043779272773661818549620449970334216366264741118684015851799902419467, f_q))
mstore(0x1720, addmod(mload(0x740), 21672150828060002448584587195636825118214148034151293225014188334775906076150, f_q))
mstore(0x1740, mulmod(mload(0x12a0), 9537783784440837896026284659246718978615447564543116209283382057778110278482, f_q))
mstore(0x1760, addmod(mload(0x740), 12350459087398437326220121086010556109932916835872918134414822128797698217135, f_q))
{
            let prod := mload(0x12e0)

                prod := mulmod(mload(0x1320), prod, f_q)
                mstore(0x1780, prod)

                prod := mulmod(mload(0x1360), prod, f_q)
                mstore(0x17a0, prod)

                prod := mulmod(mload(0x13a0), prod, f_q)
                mstore(0x17c0, prod)

                prod := mulmod(mload(0x13e0), prod, f_q)
                mstore(0x17e0, prod)

                prod := mulmod(mload(0x1420), prod, f_q)
                mstore(0x1800, prod)

                prod := mulmod(mload(0x1460), prod, f_q)
                mstore(0x1820, prod)

                prod := mulmod(mload(0x14a0), prod, f_q)
                mstore(0x1840, prod)

                prod := mulmod(mload(0x14e0), prod, f_q)
                mstore(0x1860, prod)

                prod := mulmod(mload(0x1520), prod, f_q)
                mstore(0x1880, prod)

                prod := mulmod(mload(0x1560), prod, f_q)
                mstore(0x18a0, prod)

                prod := mulmod(mload(0x15a0), prod, f_q)
                mstore(0x18c0, prod)

                prod := mulmod(mload(0x15e0), prod, f_q)
                mstore(0x18e0, prod)

                prod := mulmod(mload(0x1620), prod, f_q)
                mstore(0x1900, prod)

                prod := mulmod(mload(0x1660), prod, f_q)
                mstore(0x1920, prod)

                prod := mulmod(mload(0x16a0), prod, f_q)
                mstore(0x1940, prod)

                prod := mulmod(mload(0x16e0), prod, f_q)
                mstore(0x1960, prod)

                prod := mulmod(mload(0x1720), prod, f_q)
                mstore(0x1980, prod)

                prod := mulmod(mload(0x1760), prod, f_q)
                mstore(0x19a0, prod)

                prod := mulmod(mload(0x1280), prod, f_q)
                mstore(0x19c0, prod)

        }
mstore(0x1a00, 32)
mstore(0x1a20, 32)
mstore(0x1a40, 32)
mstore(0x1a60, mload(0x19c0))
mstore(0x1a80, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1aa0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x1a00, 0xc0, 0x19e0, 0x20), 1), success)
{

            let inv := mload(0x19e0)
            let v

                    v := mload(0x1280)
                    mstore(4736, mulmod(mload(0x19a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1760)
                    mstore(5984, mulmod(mload(0x1980), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1720)
                    mstore(5920, mulmod(mload(0x1960), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x16e0)
                    mstore(5856, mulmod(mload(0x1940), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x16a0)
                    mstore(5792, mulmod(mload(0x1920), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1660)
                    mstore(5728, mulmod(mload(0x1900), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1620)
                    mstore(5664, mulmod(mload(0x18e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x15e0)
                    mstore(5600, mulmod(mload(0x18c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x15a0)
                    mstore(5536, mulmod(mload(0x18a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1560)
                    mstore(5472, mulmod(mload(0x1880), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1520)
                    mstore(5408, mulmod(mload(0x1860), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x14e0)
                    mstore(5344, mulmod(mload(0x1840), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x14a0)
                    mstore(5280, mulmod(mload(0x1820), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1460)
                    mstore(5216, mulmod(mload(0x1800), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1420)
                    mstore(5152, mulmod(mload(0x17e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x13e0)
                    mstore(5088, mulmod(mload(0x17c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x13a0)
                    mstore(5024, mulmod(mload(0x17a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1360)
                    mstore(4960, mulmod(mload(0x1780), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x1320)
                    mstore(4896, mulmod(mload(0x12e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x12e0, inv)

        }
mstore(0x1ac0, mulmod(mload(0x12c0), mload(0x12e0), f_q))
mstore(0x1ae0, mulmod(mload(0x1300), mload(0x1320), f_q))
mstore(0x1b00, mulmod(mload(0x1340), mload(0x1360), f_q))
mstore(0x1b20, mulmod(mload(0x1380), mload(0x13a0), f_q))
mstore(0x1b40, mulmod(mload(0x13c0), mload(0x13e0), f_q))
mstore(0x1b60, mulmod(mload(0x1400), mload(0x1420), f_q))
mstore(0x1b80, mulmod(mload(0x1440), mload(0x1460), f_q))
mstore(0x1ba0, mulmod(mload(0x1480), mload(0x14a0), f_q))
mstore(0x1bc0, mulmod(mload(0x14c0), mload(0x14e0), f_q))
mstore(0x1be0, mulmod(mload(0x1500), mload(0x1520), f_q))
mstore(0x1c00, mulmod(mload(0x1540), mload(0x1560), f_q))
mstore(0x1c20, mulmod(mload(0x1580), mload(0x15a0), f_q))
mstore(0x1c40, mulmod(mload(0x15c0), mload(0x15e0), f_q))
mstore(0x1c60, mulmod(mload(0x1600), mload(0x1620), f_q))
mstore(0x1c80, mulmod(mload(0x1640), mload(0x1660), f_q))
mstore(0x1ca0, mulmod(mload(0x1680), mload(0x16a0), f_q))
mstore(0x1cc0, mulmod(mload(0x16c0), mload(0x16e0), f_q))
mstore(0x1ce0, mulmod(mload(0x1700), mload(0x1720), f_q))
mstore(0x1d00, mulmod(mload(0x1740), mload(0x1760), f_q))
{
            let result := mulmod(mload(0x1ba0), mload(0x20), f_q)
result := addmod(mulmod(mload(0x1bc0), mload(0x40), f_q), result, f_q)
result := addmod(mulmod(mload(0x1be0), mload(0x60), f_q), result, f_q)
result := addmod(mulmod(mload(0x1c00), mload(0x80), f_q), result, f_q)
result := addmod(mulmod(mload(0x1c20), mload(0xa0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1c40), mload(0xc0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1c60), mload(0xe0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1c80), mload(0x100), f_q), result, f_q)
result := addmod(mulmod(mload(0x1ca0), mload(0x120), f_q), result, f_q)
result := addmod(mulmod(mload(0x1cc0), mload(0x140), f_q), result, f_q)
result := addmod(mulmod(mload(0x1ce0), mload(0x160), f_q), result, f_q)
result := addmod(mulmod(mload(0x1d00), mload(0x180), f_q), result, f_q)
mstore(7456, result)
        }
mstore(0x1d40, mulmod(mload(0x7c0), mload(0x7a0), f_q))
mstore(0x1d60, addmod(mload(0x780), mload(0x1d40), f_q))
mstore(0x1d80, addmod(mload(0x1d60), sub(f_q, mload(0x7e0)), f_q))
mstore(0x1da0, mulmod(mload(0x1d80), mload(0x9e0), f_q))
mstore(0x1dc0, mulmod(mload(0x620), mload(0x1da0), f_q))
mstore(0x1de0, mulmod(mload(0x840), mload(0x820), f_q))
mstore(0x1e00, addmod(mload(0x800), mload(0x1de0), f_q))
mstore(0x1e20, addmod(mload(0x1e00), sub(f_q, mload(0x860)), f_q))
mstore(0x1e40, mulmod(mload(0x1e20), mload(0xa00), f_q))
mstore(0x1e60, addmod(mload(0x1dc0), mload(0x1e40), f_q))
mstore(0x1e80, mulmod(mload(0x620), mload(0x1e60), f_q))
mstore(0x1ea0, mulmod(mload(0x8c0), mload(0x8a0), f_q))
mstore(0x1ec0, addmod(mload(0x880), mload(0x1ea0), f_q))
mstore(0x1ee0, addmod(mload(0x1ec0), sub(f_q, mload(0x8e0)), f_q))
mstore(0x1f00, mulmod(mload(0x1ee0), mload(0xa20), f_q))
mstore(0x1f20, addmod(mload(0x1e80), mload(0x1f00), f_q))
mstore(0x1f40, mulmod(mload(0x620), mload(0x1f20), f_q))
mstore(0x1f60, mulmod(mload(0x940), mload(0x920), f_q))
mstore(0x1f80, addmod(mload(0x900), mload(0x1f60), f_q))
mstore(0x1fa0, addmod(mload(0x1f80), sub(f_q, mload(0x960)), f_q))
mstore(0x1fc0, mulmod(mload(0x1fa0), mload(0xa40), f_q))
mstore(0x1fe0, addmod(mload(0x1f40), mload(0x1fc0), f_q))
mstore(0x2000, mulmod(mload(0x620), mload(0x1fe0), f_q))
mstore(0x2020, addmod(1, sub(f_q, mload(0xb60)), f_q))
mstore(0x2040, mulmod(mload(0x2020), mload(0x1ba0), f_q))
mstore(0x2060, addmod(mload(0x2000), mload(0x2040), f_q))
mstore(0x2080, mulmod(mload(0x620), mload(0x2060), f_q))
mstore(0x20a0, mulmod(mload(0xc80), mload(0xc80), f_q))
mstore(0x20c0, addmod(mload(0x20a0), sub(f_q, mload(0xc80)), f_q))
mstore(0x20e0, mulmod(mload(0x20c0), mload(0x1ac0), f_q))
mstore(0x2100, addmod(mload(0x2080), mload(0x20e0), f_q))
mstore(0x2120, mulmod(mload(0x620), mload(0x2100), f_q))
mstore(0x2140, addmod(mload(0xbc0), sub(f_q, mload(0xba0)), f_q))
mstore(0x2160, mulmod(mload(0x2140), mload(0x1ba0), f_q))
mstore(0x2180, addmod(mload(0x2120), mload(0x2160), f_q))
mstore(0x21a0, mulmod(mload(0x620), mload(0x2180), f_q))
mstore(0x21c0, addmod(mload(0xc20), sub(f_q, mload(0xc00)), f_q))
mstore(0x21e0, mulmod(mload(0x21c0), mload(0x1ba0), f_q))
mstore(0x2200, addmod(mload(0x21a0), mload(0x21e0), f_q))
mstore(0x2220, mulmod(mload(0x620), mload(0x2200), f_q))
mstore(0x2240, addmod(mload(0xc80), sub(f_q, mload(0xc60)), f_q))
mstore(0x2260, mulmod(mload(0x2240), mload(0x1ba0), f_q))
mstore(0x2280, addmod(mload(0x2220), mload(0x2260), f_q))
mstore(0x22a0, mulmod(mload(0x620), mload(0x2280), f_q))
mstore(0x22c0, addmod(1, sub(f_q, mload(0x1ac0)), f_q))
mstore(0x22e0, addmod(mload(0x1ae0), mload(0x1b00), f_q))
mstore(0x2300, addmod(mload(0x22e0), mload(0x1b20), f_q))
mstore(0x2320, addmod(mload(0x2300), mload(0x1b40), f_q))
mstore(0x2340, addmod(mload(0x2320), mload(0x1b60), f_q))
mstore(0x2360, addmod(mload(0x2340), mload(0x1b80), f_q))
mstore(0x2380, addmod(mload(0x22c0), sub(f_q, mload(0x2360)), f_q))
mstore(0x23a0, mulmod(mload(0xa80), mload(0x3e0), f_q))
mstore(0x23c0, addmod(mload(0x9a0), mload(0x23a0), f_q))
mstore(0x23e0, addmod(mload(0x23c0), mload(0x440), f_q))
mstore(0x2400, mulmod(mload(0xaa0), mload(0x3e0), f_q))
mstore(0x2420, addmod(mload(0x780), mload(0x2400), f_q))
mstore(0x2440, addmod(mload(0x2420), mload(0x440), f_q))
mstore(0x2460, mulmod(mload(0x2440), mload(0x23e0), f_q))
mstore(0x2480, mulmod(mload(0x2460), mload(0xb80), f_q))
mstore(0x24a0, mulmod(1, mload(0x3e0), f_q))
mstore(0x24c0, mulmod(mload(0x740), mload(0x24a0), f_q))
mstore(0x24e0, addmod(mload(0x9a0), mload(0x24c0), f_q))
mstore(0x2500, addmod(mload(0x24e0), mload(0x440), f_q))
mstore(0x2520, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x3e0), f_q))
mstore(0x2540, mulmod(mload(0x740), mload(0x2520), f_q))
mstore(0x2560, addmod(mload(0x780), mload(0x2540), f_q))
mstore(0x2580, addmod(mload(0x2560), mload(0x440), f_q))
mstore(0x25a0, mulmod(mload(0x2580), mload(0x2500), f_q))
mstore(0x25c0, mulmod(mload(0x25a0), mload(0xb60), f_q))
mstore(0x25e0, addmod(mload(0x2480), sub(f_q, mload(0x25c0)), f_q))
mstore(0x2600, mulmod(mload(0x25e0), mload(0x2380), f_q))
mstore(0x2620, addmod(mload(0x22a0), mload(0x2600), f_q))
mstore(0x2640, mulmod(mload(0x620), mload(0x2620), f_q))
mstore(0x2660, mulmod(mload(0xac0), mload(0x3e0), f_q))
mstore(0x2680, addmod(mload(0x800), mload(0x2660), f_q))
mstore(0x26a0, addmod(mload(0x2680), mload(0x440), f_q))
mstore(0x26c0, mulmod(mload(0xae0), mload(0x3e0), f_q))
mstore(0x26e0, addmod(mload(0x880), mload(0x26c0), f_q))
mstore(0x2700, addmod(mload(0x26e0), mload(0x440), f_q))
mstore(0x2720, mulmod(mload(0x2700), mload(0x26a0), f_q))
mstore(0x2740, mulmod(mload(0x2720), mload(0xbe0), f_q))
mstore(0x2760, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x3e0), f_q))
mstore(0x2780, mulmod(mload(0x740), mload(0x2760), f_q))
mstore(0x27a0, addmod(mload(0x800), mload(0x2780), f_q))
mstore(0x27c0, addmod(mload(0x27a0), mload(0x440), f_q))
mstore(0x27e0, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x3e0), f_q))
mstore(0x2800, mulmod(mload(0x740), mload(0x27e0), f_q))
mstore(0x2820, addmod(mload(0x880), mload(0x2800), f_q))
mstore(0x2840, addmod(mload(0x2820), mload(0x440), f_q))
mstore(0x2860, mulmod(mload(0x2840), mload(0x27c0), f_q))
mstore(0x2880, mulmod(mload(0x2860), mload(0xbc0), f_q))
mstore(0x28a0, addmod(mload(0x2740), sub(f_q, mload(0x2880)), f_q))
mstore(0x28c0, mulmod(mload(0x28a0), mload(0x2380), f_q))
mstore(0x28e0, addmod(mload(0x2640), mload(0x28c0), f_q))
mstore(0x2900, mulmod(mload(0x620), mload(0x28e0), f_q))
mstore(0x2920, mulmod(mload(0xb00), mload(0x3e0), f_q))
mstore(0x2940, addmod(mload(0x900), mload(0x2920), f_q))
mstore(0x2960, addmod(mload(0x2940), mload(0x440), f_q))
mstore(0x2980, mulmod(mload(0xb20), mload(0x3e0), f_q))
mstore(0x29a0, addmod(mload(0x980), mload(0x2980), f_q))
mstore(0x29c0, addmod(mload(0x29a0), mload(0x440), f_q))
mstore(0x29e0, mulmod(mload(0x29c0), mload(0x2960), f_q))
mstore(0x2a00, mulmod(mload(0x29e0), mload(0xc40), f_q))
mstore(0x2a20, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x3e0), f_q))
mstore(0x2a40, mulmod(mload(0x740), mload(0x2a20), f_q))
mstore(0x2a60, addmod(mload(0x900), mload(0x2a40), f_q))
mstore(0x2a80, addmod(mload(0x2a60), mload(0x440), f_q))
mstore(0x2aa0, mulmod(21134065618345176623193549882539580312263652408302468683943992798037078993309, mload(0x3e0), f_q))
mstore(0x2ac0, mulmod(mload(0x740), mload(0x2aa0), f_q))
mstore(0x2ae0, addmod(mload(0x980), mload(0x2ac0), f_q))
mstore(0x2b00, addmod(mload(0x2ae0), mload(0x440), f_q))
mstore(0x2b20, mulmod(mload(0x2b00), mload(0x2a80), f_q))
mstore(0x2b40, mulmod(mload(0x2b20), mload(0xc20), f_q))
mstore(0x2b60, addmod(mload(0x2a00), sub(f_q, mload(0x2b40)), f_q))
mstore(0x2b80, mulmod(mload(0x2b60), mload(0x2380), f_q))
mstore(0x2ba0, addmod(mload(0x2900), mload(0x2b80), f_q))
mstore(0x2bc0, mulmod(mload(0x620), mload(0x2ba0), f_q))
mstore(0x2be0, mulmod(mload(0xb40), mload(0x3e0), f_q))
mstore(0x2c00, addmod(mload(0x1d20), mload(0x2be0), f_q))
mstore(0x2c20, addmod(mload(0x2c00), mload(0x440), f_q))
mstore(0x2c40, mulmod(mload(0x2c20), mload(0xca0), f_q))
mstore(0x2c60, mulmod(5625741653535312224677218588085279924365897425605943700675464992185016992283, mload(0x3e0), f_q))
mstore(0x2c80, mulmod(mload(0x740), mload(0x2c60), f_q))
mstore(0x2ca0, addmod(mload(0x1d20), mload(0x2c80), f_q))
mstore(0x2cc0, addmod(mload(0x2ca0), mload(0x440), f_q))
mstore(0x2ce0, mulmod(mload(0x2cc0), mload(0xc80), f_q))
mstore(0x2d00, addmod(mload(0x2c40), sub(f_q, mload(0x2ce0)), f_q))
mstore(0x2d20, mulmod(mload(0x2d00), mload(0x2380), f_q))
mstore(0x2d40, addmod(mload(0x2bc0), mload(0x2d20), f_q))
mstore(0x2d60, mulmod(mload(0x620), mload(0x2d40), f_q))
mstore(0x2d80, addmod(1, sub(f_q, mload(0xcc0)), f_q))
mstore(0x2da0, mulmod(mload(0x2d80), mload(0x1ba0), f_q))
mstore(0x2dc0, addmod(mload(0x2d60), mload(0x2da0), f_q))
mstore(0x2de0, mulmod(mload(0x620), mload(0x2dc0), f_q))
mstore(0x2e00, mulmod(mload(0xcc0), mload(0xcc0), f_q))
mstore(0x2e20, addmod(mload(0x2e00), sub(f_q, mload(0xcc0)), f_q))
mstore(0x2e40, mulmod(mload(0x2e20), mload(0x1ac0), f_q))
mstore(0x2e60, addmod(mload(0x2de0), mload(0x2e40), f_q))
mstore(0x2e80, mulmod(mload(0x620), mload(0x2e60), f_q))
mstore(0x2ea0, addmod(mload(0xd00), mload(0x3e0), f_q))
mstore(0x2ec0, mulmod(mload(0x2ea0), mload(0xce0), f_q))
mstore(0x2ee0, addmod(mload(0xd40), mload(0x440), f_q))
mstore(0x2f00, mulmod(mload(0x2ee0), mload(0x2ec0), f_q))
mstore(0x2f20, addmod(mload(0x980), mload(0x3e0), f_q))
mstore(0x2f40, mulmod(mload(0x2f20), mload(0xcc0), f_q))
mstore(0x2f60, addmod(mload(0x9c0), mload(0x440), f_q))
mstore(0x2f80, mulmod(mload(0x2f60), mload(0x2f40), f_q))
mstore(0x2fa0, addmod(mload(0x2f00), sub(f_q, mload(0x2f80)), f_q))
mstore(0x2fc0, mulmod(mload(0x2fa0), mload(0x2380), f_q))
mstore(0x2fe0, addmod(mload(0x2e80), mload(0x2fc0), f_q))
mstore(0x3000, mulmod(mload(0x620), mload(0x2fe0), f_q))
mstore(0x3020, addmod(mload(0xd00), sub(f_q, mload(0xd40)), f_q))
mstore(0x3040, mulmod(mload(0x3020), mload(0x1ba0), f_q))
mstore(0x3060, addmod(mload(0x3000), mload(0x3040), f_q))
mstore(0x3080, mulmod(mload(0x620), mload(0x3060), f_q))
mstore(0x30a0, mulmod(mload(0x3020), mload(0x2380), f_q))
mstore(0x30c0, addmod(mload(0xd00), sub(f_q, mload(0xd20)), f_q))
mstore(0x30e0, mulmod(mload(0x30c0), mload(0x30a0), f_q))
mstore(0x3100, addmod(mload(0x3080), mload(0x30e0), f_q))
mstore(0x3120, mulmod(mload(0x1260), mload(0x1260), f_q))
mstore(0x3140, mulmod(mload(0x3120), mload(0x1260), f_q))
mstore(0x3160, mulmod(1, mload(0x1260), f_q))
mstore(0x3180, mulmod(1, mload(0x3120), f_q))
mstore(0x31a0, mulmod(mload(0x3100), mload(0x1280), f_q))
mstore(0x31c0, mulmod(mload(0xf80), mload(0x740), f_q))
mstore(0x31e0, mulmod(mload(0x740), 1, f_q))
mstore(0x3200, addmod(mload(0xe80), sub(f_q, mload(0x31e0)), f_q))
mstore(0x3220, mulmod(mload(0x740), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
mstore(0x3240, addmod(mload(0xe80), sub(f_q, mload(0x3220)), f_q))
mstore(0x3260, mulmod(mload(0x740), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
mstore(0x3280, addmod(mload(0xe80), sub(f_q, mload(0x3260)), f_q))
mstore(0x32a0, mulmod(mload(0x740), 12929131318670223636853686797196826072950305380535537217467769528748593133487, f_q))
mstore(0x32c0, addmod(mload(0xe80), sub(f_q, mload(0x32a0)), f_q))
mstore(0x32e0, mulmod(mload(0x740), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
mstore(0x3300, addmod(mload(0xe80), sub(f_q, mload(0x32e0)), f_q))
mstore(0x3320, mulmod(mload(0x740), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
mstore(0x3340, addmod(mload(0xe80), sub(f_q, mload(0x3320)), f_q))
{
            let result := mulmod(mload(0xe80), 6616149745577394522356295102346368305374051634342887004165528916468992151333, f_q)
result := addmod(mulmod(mload(0x740), 15272093126261880699890110642910906783174312766073147339532675270106816344284, f_q), result, f_q)
mstore(13152, result)
        }
{
            let result := mulmod(mload(0xe80), 530501691302793820034524283154921640443166880847115433758691660016816186416, f_q)
result := addmod(mulmod(mload(0x740), 6735468303947967792722299167169712601265763928443086612877978228369959138708, f_q), result, f_q)
mstore(13184, result)
        }
{
            let result := mulmod(mload(0xe80), 6735468303947967792722299167169712601265763928443086612877978228369959138708, f_q)
result := addmod(mulmod(mload(0x740), 21402573809525492531235934453699988060841876665026314791644170130242704768864, f_q), result, f_q)
mstore(13216, result)
        }
{
            let result := mulmod(mload(0xe80), 21558793644302942916864965630979640748886316167261336210841195936026980690666, f_q)
result := addmod(mulmod(mload(0x740), 21647881284526053590463969745634050372655996593461286860577821962674562513632, f_q), result, f_q)
mstore(13248, result)
        }
mstore(0x33e0, mulmod(1, mload(0x3200), f_q))
mstore(0x3400, mulmod(mload(0x33e0), mload(0x3280), f_q))
mstore(0x3420, mulmod(mload(0x3400), mload(0x3240), f_q))
mstore(0x3440, mulmod(mload(0x3420), mload(0x3340), f_q))
{
            let result := mulmod(mload(0xe80), 1, f_q)
result := addmod(mulmod(mload(0x740), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)
mstore(13408, result)
        }
{
            let result := mulmod(mload(0xe80), 12163000419891990293569405173061573680049742717229898748261573253229795914908, f_q)
result := addmod(mulmod(mload(0x740), 9725242451947284928677000572195701408498621683186135595436630933346012580709, f_q), result, f_q)
mstore(13440, result)
        }
{
            let result := mulmod(mload(0xe80), 17085049131699056766421998221476555826977441931846378573521510030619952504372, f_q)
result := addmod(mulmod(mload(0x740), 6337000465755888211746305680664882431492568521396101891532798530745714905908, f_q), result, f_q)
mstore(13472, result)
        }
{
            let result := mulmod(mload(0xe80), 10262058425268217215884133263876699099081481632544093361167483234163265012860, f_q)
result := addmod(mulmod(mload(0x740), 14297308348282218433797077139696728813764374573836158179437870281950912384055, f_q), result, f_q)
mstore(13504, result)
        }
mstore(0x34e0, mulmod(mload(0x3400), mload(0x32c0), f_q))
{
            let result := mulmod(mload(0xe80), 10436837293141318478790164891277058815157809665667237910671663755188835910967, f_q)
result := addmod(mulmod(mload(0x740), 11451405578697956743456240853980216273390554734748796433026540431386972584650, f_q), result, f_q)
mstore(13568, result)
        }
{
            let result := mulmod(mload(0xe80), 11451405578697956743456240853980216273390554734748796433026540431386972584650, f_q)
result := addmod(mulmod(mload(0x740), 3077030613389546641045167241996204396678989417006994932586784657914895987304, f_q), result, f_q)
mstore(13600, result)
        }
{
            let result := mulmod(mload(0xe80), 4558794634599160729665540001169218674296628713450539706539395399156027320108, f_q)
result := addmod(mulmod(mload(0x740), 17329448237240114492580865744088056414251735686965494637158808787419781175509, f_q), result, f_q)
mstore(13632, result)
        }
{
            let result := mulmod(mload(0xe80), 17329448237240114492580865744088056414251735686965494637158808787419781175509, f_q)
result := addmod(mulmod(mload(0x740), 7587894345819650164285585254437911847348718480492193252124775402539837301163, f_q), result, f_q)
mstore(13664, result)
        }
mstore(0x3580, mulmod(mload(0x33e0), mload(0x3300), f_q))
{
            let prod := mload(0x3360)

                prod := mulmod(mload(0x3380), prod, f_q)
                mstore(0x35a0, prod)

                prod := mulmod(mload(0x33a0), prod, f_q)
                mstore(0x35c0, prod)

                prod := mulmod(mload(0x33c0), prod, f_q)
                mstore(0x35e0, prod)

                prod := mulmod(mload(0x3460), prod, f_q)
                mstore(0x3600, prod)

                prod := mulmod(mload(0x33e0), prod, f_q)
                mstore(0x3620, prod)

                prod := mulmod(mload(0x3480), prod, f_q)
                mstore(0x3640, prod)

                prod := mulmod(mload(0x34a0), prod, f_q)
                mstore(0x3660, prod)

                prod := mulmod(mload(0x34c0), prod, f_q)
                mstore(0x3680, prod)

                prod := mulmod(mload(0x34e0), prod, f_q)
                mstore(0x36a0, prod)

                prod := mulmod(mload(0x3500), prod, f_q)
                mstore(0x36c0, prod)

                prod := mulmod(mload(0x3520), prod, f_q)
                mstore(0x36e0, prod)

                prod := mulmod(mload(0x3400), prod, f_q)
                mstore(0x3700, prod)

                prod := mulmod(mload(0x3540), prod, f_q)
                mstore(0x3720, prod)

                prod := mulmod(mload(0x3560), prod, f_q)
                mstore(0x3740, prod)

                prod := mulmod(mload(0x3580), prod, f_q)
                mstore(0x3760, prod)

        }
mstore(0x37a0, 32)
mstore(0x37c0, 32)
mstore(0x37e0, 32)
mstore(0x3800, mload(0x3760))
mstore(0x3820, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x3840, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x37a0, 0xc0, 0x3780, 0x20), 1), success)
{

            let inv := mload(0x3780)
            let v

                    v := mload(0x3580)
                    mstore(13696, mulmod(mload(0x3740), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x3560)
                    mstore(13664, mulmod(mload(0x3720), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x3540)
                    mstore(13632, mulmod(mload(0x3700), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x3400)
                    mstore(13312, mulmod(mload(0x36e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x3520)
                    mstore(13600, mulmod(mload(0x36c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x3500)
                    mstore(13568, mulmod(mload(0x36a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x34e0)
                    mstore(13536, mulmod(mload(0x3680), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x34c0)
                    mstore(13504, mulmod(mload(0x3660), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x34a0)
                    mstore(13472, mulmod(mload(0x3640), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x3480)
                    mstore(13440, mulmod(mload(0x3620), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x33e0)
                    mstore(13280, mulmod(mload(0x3600), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x3460)
                    mstore(13408, mulmod(mload(0x35e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x33c0)
                    mstore(13248, mulmod(mload(0x35c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x33a0)
                    mstore(13216, mulmod(mload(0x35a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x3380)
                    mstore(13184, mulmod(mload(0x3360), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x3360, inv)

        }
{
            let result := mload(0x3360)
result := addmod(mload(0x3380), result, f_q)
result := addmod(mload(0x33a0), result, f_q)
result := addmod(mload(0x33c0), result, f_q)
mstore(14432, result)
        }
mstore(0x3880, mulmod(mload(0x3440), mload(0x33e0), f_q))
{
            let result := mload(0x3460)
mstore(14496, result)
        }
mstore(0x38c0, mulmod(mload(0x3440), mload(0x34e0), f_q))
{
            let result := mload(0x3480)
result := addmod(mload(0x34a0), result, f_q)
result := addmod(mload(0x34c0), result, f_q)
mstore(14560, result)
        }
mstore(0x3900, mulmod(mload(0x3440), mload(0x3400), f_q))
{
            let result := mload(0x3500)
result := addmod(mload(0x3520), result, f_q)
mstore(14624, result)
        }
mstore(0x3940, mulmod(mload(0x3440), mload(0x3580), f_q))
{
            let result := mload(0x3540)
result := addmod(mload(0x3560), result, f_q)
mstore(14688, result)
        }
{
            let prod := mload(0x3860)

                prod := mulmod(mload(0x38a0), prod, f_q)
                mstore(0x3980, prod)

                prod := mulmod(mload(0x38e0), prod, f_q)
                mstore(0x39a0, prod)

                prod := mulmod(mload(0x3920), prod, f_q)
                mstore(0x39c0, prod)

                prod := mulmod(mload(0x3960), prod, f_q)
                mstore(0x39e0, prod)

        }
mstore(0x3a20, 32)
mstore(0x3a40, 32)
mstore(0x3a60, 32)
mstore(0x3a80, mload(0x39e0))
mstore(0x3aa0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x3ac0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x3a20, 0xc0, 0x3a00, 0x20), 1), success)
{

            let inv := mload(0x3a00)
            let v

                    v := mload(0x3960)
                    mstore(14688, mulmod(mload(0x39c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x3920)
                    mstore(14624, mulmod(mload(0x39a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x38e0)
                    mstore(14560, mulmod(mload(0x3980), inv, f_q))
                    inv := mulmod(v, inv, f_q)

                    v := mload(0x38a0)
                    mstore(14496, mulmod(mload(0x3860), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x3860, inv)

        }
mstore(0x3ae0, mulmod(mload(0x3880), mload(0x38a0), f_q))
mstore(0x3b00, mulmod(mload(0x38c0), mload(0x38e0), f_q))
mstore(0x3b20, mulmod(mload(0x3900), mload(0x3920), f_q))
mstore(0x3b40, mulmod(mload(0x3940), mload(0x3960), f_q))
mstore(0x3b60, mulmod(mload(0xd80), mload(0xd80), f_q))
mstore(0x3b80, mulmod(mload(0x3b60), mload(0xd80), f_q))
mstore(0x3ba0, mulmod(mload(0x3b80), mload(0xd80), f_q))
mstore(0x3bc0, mulmod(mload(0x3ba0), mload(0xd80), f_q))
mstore(0x3be0, mulmod(mload(0x3bc0), mload(0xd80), f_q))
mstore(0x3c00, mulmod(mload(0x3be0), mload(0xd80), f_q))
mstore(0x3c20, mulmod(mload(0x3c00), mload(0xd80), f_q))
mstore(0x3c40, mulmod(mload(0x3c20), mload(0xd80), f_q))
mstore(0x3c60, mulmod(mload(0x3c40), mload(0xd80), f_q))
mstore(0x3c80, mulmod(mload(0x3c60), mload(0xd80), f_q))
mstore(0x3ca0, mulmod(mload(0x3c80), mload(0xd80), f_q))
mstore(0x3cc0, mulmod(mload(0x3ca0), mload(0xd80), f_q))
mstore(0x3ce0, mulmod(mload(0x3cc0), mload(0xd80), f_q))
mstore(0x3d00, mulmod(mload(0x3ce0), mload(0xd80), f_q))
mstore(0x3d20, mulmod(mload(0x3d00), mload(0xd80), f_q))
mstore(0x3d40, mulmod(mload(0x3d20), mload(0xd80), f_q))
mstore(0x3d60, mulmod(mload(0xde0), mload(0xde0), f_q))
mstore(0x3d80, mulmod(mload(0x3d60), mload(0xde0), f_q))
mstore(0x3da0, mulmod(mload(0x3d80), mload(0xde0), f_q))
mstore(0x3dc0, mulmod(mload(0x3da0), mload(0xde0), f_q))
{
            let result := mulmod(mload(0x780), mload(0x3360), f_q)
result := addmod(mulmod(mload(0x7a0), mload(0x3380), f_q), result, f_q)
result := addmod(mulmod(mload(0x7c0), mload(0x33a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x7e0), mload(0x33c0), f_q), result, f_q)
mstore(15840, result)
        }
mstore(0x3e00, mulmod(mload(0x3de0), mload(0x3860), f_q))
mstore(0x3e20, mulmod(sub(f_q, mload(0x3e00)), 1, f_q))
{
            let result := mulmod(mload(0x800), mload(0x3360), f_q)
result := addmod(mulmod(mload(0x820), mload(0x3380), f_q), result, f_q)
result := addmod(mulmod(mload(0x840), mload(0x33a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x860), mload(0x33c0), f_q), result, f_q)
mstore(15936, result)
        }
mstore(0x3e60, mulmod(mload(0x3e40), mload(0x3860), f_q))
mstore(0x3e80, mulmod(sub(f_q, mload(0x3e60)), mload(0xd80), f_q))
mstore(0x3ea0, mulmod(1, mload(0xd80), f_q))
mstore(0x3ec0, addmod(mload(0x3e20), mload(0x3e80), f_q))
{
            let result := mulmod(mload(0x880), mload(0x3360), f_q)
result := addmod(mulmod(mload(0x8a0), mload(0x3380), f_q), result, f_q)
result := addmod(mulmod(mload(0x8c0), mload(0x33a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x8e0), mload(0x33c0), f_q), result, f_q)
mstore(16096, result)
        }
mstore(0x3f00, mulmod(mload(0x3ee0), mload(0x3860), f_q))
mstore(0x3f20, mulmod(sub(f_q, mload(0x3f00)), mload(0x3b60), f_q))
mstore(0x3f40, mulmod(1, mload(0x3b60), f_q))
mstore(0x3f60, addmod(mload(0x3ec0), mload(0x3f20), f_q))
{
            let result := mulmod(mload(0x900), mload(0x3360), f_q)
result := addmod(mulmod(mload(0x920), mload(0x3380), f_q), result, f_q)
result := addmod(mulmod(mload(0x940), mload(0x33a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x960), mload(0x33c0), f_q), result, f_q)
mstore(16256, result)
        }
mstore(0x3fa0, mulmod(mload(0x3f80), mload(0x3860), f_q))
mstore(0x3fc0, mulmod(sub(f_q, mload(0x3fa0)), mload(0x3b80), f_q))
mstore(0x3fe0, mulmod(1, mload(0x3b80), f_q))
mstore(0x4000, addmod(mload(0x3f60), mload(0x3fc0), f_q))
mstore(0x4020, mulmod(mload(0x4000), 1, f_q))
mstore(0x4040, mulmod(mload(0x3ea0), 1, f_q))
mstore(0x4060, mulmod(mload(0x3f40), 1, f_q))
mstore(0x4080, mulmod(mload(0x3fe0), 1, f_q))
mstore(0x40a0, mulmod(1, mload(0x3880), f_q))
{
            let result := mulmod(mload(0x980), mload(0x3460), f_q)
mstore(16576, result)
        }
mstore(0x40e0, mulmod(mload(0x40c0), mload(0x3ae0), f_q))
mstore(0x4100, mulmod(sub(f_q, mload(0x40e0)), 1, f_q))
mstore(0x4120, mulmod(mload(0x40a0), 1, f_q))
{
            let result := mulmod(mload(0xd40), mload(0x3460), f_q)
mstore(16704, result)
        }
mstore(0x4160, mulmod(mload(0x4140), mload(0x3ae0), f_q))
mstore(0x4180, mulmod(sub(f_q, mload(0x4160)), mload(0xd80), f_q))
mstore(0x41a0, mulmod(mload(0x40a0), mload(0xd80), f_q))
mstore(0x41c0, addmod(mload(0x4100), mload(0x4180), f_q))
{
            let result := mulmod(mload(0x9a0), mload(0x3460), f_q)
mstore(16864, result)
        }
mstore(0x4200, mulmod(mload(0x41e0), mload(0x3ae0), f_q))
mstore(0x4220, mulmod(sub(f_q, mload(0x4200)), mload(0x3b60), f_q))
mstore(0x4240, mulmod(mload(0x40a0), mload(0x3b60), f_q))
mstore(0x4260, addmod(mload(0x41c0), mload(0x4220), f_q))
{
            let result := mulmod(mload(0x9c0), mload(0x3460), f_q)
mstore(17024, result)
        }
mstore(0x42a0, mulmod(mload(0x4280), mload(0x3ae0), f_q))
mstore(0x42c0, mulmod(sub(f_q, mload(0x42a0)), mload(0x3b80), f_q))
mstore(0x42e0, mulmod(mload(0x40a0), mload(0x3b80), f_q))
mstore(0x4300, addmod(mload(0x4260), mload(0x42c0), f_q))
{
            let result := mulmod(mload(0x9e0), mload(0x3460), f_q)
mstore(17184, result)
        }
mstore(0x4340, mulmod(mload(0x4320), mload(0x3ae0), f_q))
mstore(0x4360, mulmod(sub(f_q, mload(0x4340)), mload(0x3ba0), f_q))
mstore(0x4380, mulmod(mload(0x40a0), mload(0x3ba0), f_q))
mstore(0x43a0, addmod(mload(0x4300), mload(0x4360), f_q))
{
            let result := mulmod(mload(0xa00), mload(0x3460), f_q)
mstore(17344, result)
        }
mstore(0x43e0, mulmod(mload(0x43c0), mload(0x3ae0), f_q))
mstore(0x4400, mulmod(sub(f_q, mload(0x43e0)), mload(0x3bc0), f_q))
mstore(0x4420, mulmod(mload(0x40a0), mload(0x3bc0), f_q))
mstore(0x4440, addmod(mload(0x43a0), mload(0x4400), f_q))
{
            let result := mulmod(mload(0xa20), mload(0x3460), f_q)
mstore(17504, result)
        }
mstore(0x4480, mulmod(mload(0x4460), mload(0x3ae0), f_q))
mstore(0x44a0, mulmod(sub(f_q, mload(0x4480)), mload(0x3be0), f_q))
mstore(0x44c0, mulmod(mload(0x40a0), mload(0x3be0), f_q))
mstore(0x44e0, addmod(mload(0x4440), mload(0x44a0), f_q))
{
            let result := mulmod(mload(0xa40), mload(0x3460), f_q)
mstore(17664, result)
        }
mstore(0x4520, mulmod(mload(0x4500), mload(0x3ae0), f_q))
mstore(0x4540, mulmod(sub(f_q, mload(0x4520)), mload(0x3c00), f_q))
mstore(0x4560, mulmod(mload(0x40a0), mload(0x3c00), f_q))
mstore(0x4580, addmod(mload(0x44e0), mload(0x4540), f_q))
{
            let result := mulmod(mload(0xa80), mload(0x3460), f_q)
mstore(17824, result)
        }
mstore(0x45c0, mulmod(mload(0x45a0), mload(0x3ae0), f_q))
mstore(0x45e0, mulmod(sub(f_q, mload(0x45c0)), mload(0x3c20), f_q))
mstore(0x4600, mulmod(mload(0x40a0), mload(0x3c20), f_q))
mstore(0x4620, addmod(mload(0x4580), mload(0x45e0), f_q))
{
            let result := mulmod(mload(0xaa0), mload(0x3460), f_q)
mstore(17984, result)
        }
mstore(0x4660, mulmod(mload(0x4640), mload(0x3ae0), f_q))
mstore(0x4680, mulmod(sub(f_q, mload(0x4660)), mload(0x3c40), f_q))
mstore(0x46a0, mulmod(mload(0x40a0), mload(0x3c40), f_q))
mstore(0x46c0, addmod(mload(0x4620), mload(0x4680), f_q))
{
            let result := mulmod(mload(0xac0), mload(0x3460), f_q)
mstore(18144, result)
        }
mstore(0x4700, mulmod(mload(0x46e0), mload(0x3ae0), f_q))
mstore(0x4720, mulmod(sub(f_q, mload(0x4700)), mload(0x3c60), f_q))
mstore(0x4740, mulmod(mload(0x40a0), mload(0x3c60), f_q))
mstore(0x4760, addmod(mload(0x46c0), mload(0x4720), f_q))
{
            let result := mulmod(mload(0xae0), mload(0x3460), f_q)
mstore(18304, result)
        }
mstore(0x47a0, mulmod(mload(0x4780), mload(0x3ae0), f_q))
mstore(0x47c0, mulmod(sub(f_q, mload(0x47a0)), mload(0x3c80), f_q))
mstore(0x47e0, mulmod(mload(0x40a0), mload(0x3c80), f_q))
mstore(0x4800, addmod(mload(0x4760), mload(0x47c0), f_q))
{
            let result := mulmod(mload(0xb00), mload(0x3460), f_q)
mstore(18464, result)
        }
mstore(0x4840, mulmod(mload(0x4820), mload(0x3ae0), f_q))
mstore(0x4860, mulmod(sub(f_q, mload(0x4840)), mload(0x3ca0), f_q))
mstore(0x4880, mulmod(mload(0x40a0), mload(0x3ca0), f_q))
mstore(0x48a0, addmod(mload(0x4800), mload(0x4860), f_q))
{
            let result := mulmod(mload(0xb20), mload(0x3460), f_q)
mstore(18624, result)
        }
mstore(0x48e0, mulmod(mload(0x48c0), mload(0x3ae0), f_q))
mstore(0x4900, mulmod(sub(f_q, mload(0x48e0)), mload(0x3cc0), f_q))
mstore(0x4920, mulmod(mload(0x40a0), mload(0x3cc0), f_q))
mstore(0x4940, addmod(mload(0x48a0), mload(0x4900), f_q))
{
            let result := mulmod(mload(0xb40), mload(0x3460), f_q)
mstore(18784, result)
        }
mstore(0x4980, mulmod(mload(0x4960), mload(0x3ae0), f_q))
mstore(0x49a0, mulmod(sub(f_q, mload(0x4980)), mload(0x3ce0), f_q))
mstore(0x49c0, mulmod(mload(0x40a0), mload(0x3ce0), f_q))
mstore(0x49e0, addmod(mload(0x4940), mload(0x49a0), f_q))
mstore(0x4a00, mulmod(mload(0x3160), mload(0x3880), f_q))
mstore(0x4a20, mulmod(mload(0x3180), mload(0x3880), f_q))
{
            let result := mulmod(mload(0x31a0), mload(0x3460), f_q)
mstore(19008, result)
        }
mstore(0x4a60, mulmod(mload(0x4a40), mload(0x3ae0), f_q))
mstore(0x4a80, mulmod(sub(f_q, mload(0x4a60)), mload(0x3d00), f_q))
mstore(0x4aa0, mulmod(mload(0x40a0), mload(0x3d00), f_q))
mstore(0x4ac0, mulmod(mload(0x4a00), mload(0x3d00), f_q))
mstore(0x4ae0, mulmod(mload(0x4a20), mload(0x3d00), f_q))
mstore(0x4b00, addmod(mload(0x49e0), mload(0x4a80), f_q))
{
            let result := mulmod(mload(0xa60), mload(0x3460), f_q)
mstore(19232, result)
        }
mstore(0x4b40, mulmod(mload(0x4b20), mload(0x3ae0), f_q))
mstore(0x4b60, mulmod(sub(f_q, mload(0x4b40)), mload(0x3d20), f_q))
mstore(0x4b80, mulmod(mload(0x40a0), mload(0x3d20), f_q))
mstore(0x4ba0, addmod(mload(0x4b00), mload(0x4b60), f_q))
mstore(0x4bc0, mulmod(mload(0x4ba0), mload(0xde0), f_q))
mstore(0x4be0, mulmod(mload(0x4120), mload(0xde0), f_q))
mstore(0x4c00, mulmod(mload(0x41a0), mload(0xde0), f_q))
mstore(0x4c20, mulmod(mload(0x4240), mload(0xde0), f_q))
mstore(0x4c40, mulmod(mload(0x42e0), mload(0xde0), f_q))
mstore(0x4c60, mulmod(mload(0x4380), mload(0xde0), f_q))
mstore(0x4c80, mulmod(mload(0x4420), mload(0xde0), f_q))
mstore(0x4ca0, mulmod(mload(0x44c0), mload(0xde0), f_q))
mstore(0x4cc0, mulmod(mload(0x4560), mload(0xde0), f_q))
mstore(0x4ce0, mulmod(mload(0x4600), mload(0xde0), f_q))
mstore(0x4d00, mulmod(mload(0x46a0), mload(0xde0), f_q))
mstore(0x4d20, mulmod(mload(0x4740), mload(0xde0), f_q))
mstore(0x4d40, mulmod(mload(0x47e0), mload(0xde0), f_q))
mstore(0x4d60, mulmod(mload(0x4880), mload(0xde0), f_q))
mstore(0x4d80, mulmod(mload(0x4920), mload(0xde0), f_q))
mstore(0x4da0, mulmod(mload(0x49c0), mload(0xde0), f_q))
mstore(0x4dc0, mulmod(mload(0x4aa0), mload(0xde0), f_q))
mstore(0x4de0, mulmod(mload(0x4ac0), mload(0xde0), f_q))
mstore(0x4e00, mulmod(mload(0x4ae0), mload(0xde0), f_q))
mstore(0x4e20, mulmod(mload(0x4b80), mload(0xde0), f_q))
mstore(0x4e40, addmod(mload(0x4020), mload(0x4bc0), f_q))
mstore(0x4e60, mulmod(1, mload(0x38c0), f_q))
{
            let result := mulmod(mload(0xb60), mload(0x3480), f_q)
result := addmod(mulmod(mload(0xb80), mload(0x34a0), f_q), result, f_q)
result := addmod(mulmod(mload(0xba0), mload(0x34c0), f_q), result, f_q)
mstore(20096, result)
        }
mstore(0x4ea0, mulmod(mload(0x4e80), mload(0x3b00), f_q))
mstore(0x4ec0, mulmod(sub(f_q, mload(0x4ea0)), 1, f_q))
mstore(0x4ee0, mulmod(mload(0x4e60), 1, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x3480), f_q)
result := addmod(mulmod(mload(0xbe0), mload(0x34a0), f_q), result, f_q)
result := addmod(mulmod(mload(0xc00), mload(0x34c0), f_q), result, f_q)
mstore(20224, result)
        }
mstore(0x4f20, mulmod(mload(0x4f00), mload(0x3b00), f_q))
mstore(0x4f40, mulmod(sub(f_q, mload(0x4f20)), mload(0xd80), f_q))
mstore(0x4f60, mulmod(mload(0x4e60), mload(0xd80), f_q))
mstore(0x4f80, addmod(mload(0x4ec0), mload(0x4f40), f_q))
{
            let result := mulmod(mload(0xc20), mload(0x3480), f_q)
result := addmod(mulmod(mload(0xc40), mload(0x34a0), f_q), result, f_q)
result := addmod(mulmod(mload(0xc60), mload(0x34c0), f_q), result, f_q)
mstore(20384, result)
        }
mstore(0x4fc0, mulmod(mload(0x4fa0), mload(0x3b00), f_q))
mstore(0x4fe0, mulmod(sub(f_q, mload(0x4fc0)), mload(0x3b60), f_q))
mstore(0x5000, mulmod(mload(0x4e60), mload(0x3b60), f_q))
mstore(0x5020, addmod(mload(0x4f80), mload(0x4fe0), f_q))
mstore(0x5040, mulmod(mload(0x5020), mload(0x3d60), f_q))
mstore(0x5060, mulmod(mload(0x4ee0), mload(0x3d60), f_q))
mstore(0x5080, mulmod(mload(0x4f60), mload(0x3d60), f_q))
mstore(0x50a0, mulmod(mload(0x5000), mload(0x3d60), f_q))
mstore(0x50c0, addmod(mload(0x4e40), mload(0x5040), f_q))
mstore(0x50e0, mulmod(1, mload(0x3900), f_q))
{
            let result := mulmod(mload(0xc80), mload(0x3500), f_q)
result := addmod(mulmod(mload(0xca0), mload(0x3520), f_q), result, f_q)
mstore(20736, result)
        }
mstore(0x5120, mulmod(mload(0x5100), mload(0x3b20), f_q))
mstore(0x5140, mulmod(sub(f_q, mload(0x5120)), 1, f_q))
mstore(0x5160, mulmod(mload(0x50e0), 1, f_q))
{
            let result := mulmod(mload(0xcc0), mload(0x3500), f_q)
result := addmod(mulmod(mload(0xce0), mload(0x3520), f_q), result, f_q)
mstore(20864, result)
        }
mstore(0x51a0, mulmod(mload(0x5180), mload(0x3b20), f_q))
mstore(0x51c0, mulmod(sub(f_q, mload(0x51a0)), mload(0xd80), f_q))
mstore(0x51e0, mulmod(mload(0x50e0), mload(0xd80), f_q))
mstore(0x5200, addmod(mload(0x5140), mload(0x51c0), f_q))
mstore(0x5220, mulmod(mload(0x5200), mload(0x3d80), f_q))
mstore(0x5240, mulmod(mload(0x5160), mload(0x3d80), f_q))
mstore(0x5260, mulmod(mload(0x51e0), mload(0x3d80), f_q))
mstore(0x5280, addmod(mload(0x50c0), mload(0x5220), f_q))
mstore(0x52a0, mulmod(1, mload(0x3940), f_q))
{
            let result := mulmod(mload(0xd00), mload(0x3540), f_q)
result := addmod(mulmod(mload(0xd20), mload(0x3560), f_q), result, f_q)
mstore(21184, result)
        }
mstore(0x52e0, mulmod(mload(0x52c0), mload(0x3b40), f_q))
mstore(0x5300, mulmod(sub(f_q, mload(0x52e0)), 1, f_q))
mstore(0x5320, mulmod(mload(0x52a0), 1, f_q))
mstore(0x5340, mulmod(mload(0x5300), mload(0x3da0), f_q))
mstore(0x5360, mulmod(mload(0x5320), mload(0x3da0), f_q))
mstore(0x5380, addmod(mload(0x5280), mload(0x5340), f_q))
mstore(0x53a0, mulmod(1, mload(0x3440), f_q))
mstore(0x53c0, mulmod(1, mload(0xe80), f_q))
mstore(0x53e0, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x5400, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x5420, mload(0x5380))
success := and(eq(staticcall(gas(), 0x7, 0x53e0, 0x60, 0x53e0, 0x40), 1), success)
mstore(0x5440, mload(0x53e0))
                    mstore(0x5460, mload(0x5400))
mstore(0x5480, mload(0x1a0))
                    mstore(0x54a0, mload(0x1c0))
success := and(eq(staticcall(gas(), 0x6, 0x5440, 0x80, 0x5440, 0x40), 1), success)
mstore(0x54c0, mload(0x1e0))
                    mstore(0x54e0, mload(0x200))
mstore(0x5500, mload(0x4040))
success := and(eq(staticcall(gas(), 0x7, 0x54c0, 0x60, 0x54c0, 0x40), 1), success)
mstore(0x5520, mload(0x5440))
                    mstore(0x5540, mload(0x5460))
mstore(0x5560, mload(0x54c0))
                    mstore(0x5580, mload(0x54e0))
success := and(eq(staticcall(gas(), 0x6, 0x5520, 0x80, 0x5520, 0x40), 1), success)
mstore(0x55a0, mload(0x220))
                    mstore(0x55c0, mload(0x240))
mstore(0x55e0, mload(0x4060))
success := and(eq(staticcall(gas(), 0x7, 0x55a0, 0x60, 0x55a0, 0x40), 1), success)
mstore(0x5600, mload(0x5520))
                    mstore(0x5620, mload(0x5540))
mstore(0x5640, mload(0x55a0))
                    mstore(0x5660, mload(0x55c0))
success := and(eq(staticcall(gas(), 0x6, 0x5600, 0x80, 0x5600, 0x40), 1), success)
mstore(0x5680, mload(0x260))
                    mstore(0x56a0, mload(0x280))
mstore(0x56c0, mload(0x4080))
success := and(eq(staticcall(gas(), 0x7, 0x5680, 0x60, 0x5680, 0x40), 1), success)
mstore(0x56e0, mload(0x5600))
                    mstore(0x5700, mload(0x5620))
mstore(0x5720, mload(0x5680))
                    mstore(0x5740, mload(0x56a0))
success := and(eq(staticcall(gas(), 0x6, 0x56e0, 0x80, 0x56e0, 0x40), 1), success)
mstore(0x5760, mload(0x2a0))
                    mstore(0x5780, mload(0x2c0))
mstore(0x57a0, mload(0x4be0))
success := and(eq(staticcall(gas(), 0x7, 0x5760, 0x60, 0x5760, 0x40), 1), success)
mstore(0x57c0, mload(0x56e0))
                    mstore(0x57e0, mload(0x5700))
mstore(0x5800, mload(0x5760))
                    mstore(0x5820, mload(0x5780))
success := and(eq(staticcall(gas(), 0x6, 0x57c0, 0x80, 0x57c0, 0x40), 1), success)
mstore(0x5840, mload(0x380))
                    mstore(0x5860, mload(0x3a0))
mstore(0x5880, mload(0x4c00))
success := and(eq(staticcall(gas(), 0x7, 0x5840, 0x60, 0x5840, 0x40), 1), success)
mstore(0x58a0, mload(0x57c0))
                    mstore(0x58c0, mload(0x57e0))
mstore(0x58e0, mload(0x5840))
                    mstore(0x5900, mload(0x5860))
success := and(eq(staticcall(gas(), 0x6, 0x58a0, 0x80, 0x58a0, 0x40), 1), success)
mstore(0x5920, 0x0b538e2c514b575365889f911d8cc46feab72fe062b813e6dacfbe6e9b3a6f34)
                    mstore(0x5940, 0x1c40e041b84f6bfbacd64383e6da0c8d322af2e60b2f85ad8b7ca5df833313c1)
mstore(0x5960, mload(0x4c20))
success := and(eq(staticcall(gas(), 0x7, 0x5920, 0x60, 0x5920, 0x40), 1), success)
mstore(0x5980, mload(0x58a0))
                    mstore(0x59a0, mload(0x58c0))
mstore(0x59c0, mload(0x5920))
                    mstore(0x59e0, mload(0x5940))
success := and(eq(staticcall(gas(), 0x6, 0x5980, 0x80, 0x5980, 0x40), 1), success)
mstore(0x5a00, 0x2d679a88a505cb3a8da19e1f0741ff337389bc48a2f3b9936013aa5b4583618d)
                    mstore(0x5a20, 0x13f0a6493c9ad40b2317f180ac3fde88236cdec22ab58184dcb6ab10b494c0ee)
mstore(0x5a40, mload(0x4c40))
success := and(eq(staticcall(gas(), 0x7, 0x5a00, 0x60, 0x5a00, 0x40), 1), success)
mstore(0x5a60, mload(0x5980))
                    mstore(0x5a80, mload(0x59a0))
mstore(0x5aa0, mload(0x5a00))
                    mstore(0x5ac0, mload(0x5a20))
success := and(eq(staticcall(gas(), 0x6, 0x5a60, 0x80, 0x5a60, 0x40), 1), success)
mstore(0x5ae0, 0x043deffece6d6f2ee92aed5bdb5530975f7a9ea6f97f7cb157e6c7fdc2502556)
                    mstore(0x5b00, 0x07b1731fdd40bb1d229cb5453763d78aa40f1e752d1743992db49b58465171a0)
mstore(0x5b20, mload(0x4c60))
success := and(eq(staticcall(gas(), 0x7, 0x5ae0, 0x60, 0x5ae0, 0x40), 1), success)
mstore(0x5b40, mload(0x5a60))
                    mstore(0x5b60, mload(0x5a80))
mstore(0x5b80, mload(0x5ae0))
                    mstore(0x5ba0, mload(0x5b00))
success := and(eq(staticcall(gas(), 0x6, 0x5b40, 0x80, 0x5b40, 0x40), 1), success)
mstore(0x5bc0, 0x0f6d9ce476d6c4793a7a136d653714a9c2df6df39179127dd8d47481ed7b1f47)
                    mstore(0x5be0, 0x2d97d0af29c5b9f847037c8c48bb62239236084282a766b177f0a684f6a0b984)
mstore(0x5c00, mload(0x4c80))
success := and(eq(staticcall(gas(), 0x7, 0x5bc0, 0x60, 0x5bc0, 0x40), 1), success)
mstore(0x5c20, mload(0x5b40))
                    mstore(0x5c40, mload(0x5b60))
mstore(0x5c60, mload(0x5bc0))
                    mstore(0x5c80, mload(0x5be0))
success := and(eq(staticcall(gas(), 0x6, 0x5c20, 0x80, 0x5c20, 0x40), 1), success)
mstore(0x5ca0, 0x0f04544fec477c40774bd19bfed07d9ba6c9d61bc5dcdfa1f59b67d58bd9f1b0)
                    mstore(0x5cc0, 0x26a876afe743228560b488c5b16df48e94cd6a4197ccf8be4f8eb2e11d8acf89)
mstore(0x5ce0, mload(0x4ca0))
success := and(eq(staticcall(gas(), 0x7, 0x5ca0, 0x60, 0x5ca0, 0x40), 1), success)
mstore(0x5d00, mload(0x5c20))
                    mstore(0x5d20, mload(0x5c40))
mstore(0x5d40, mload(0x5ca0))
                    mstore(0x5d60, mload(0x5cc0))
success := and(eq(staticcall(gas(), 0x6, 0x5d00, 0x80, 0x5d00, 0x40), 1), success)
mstore(0x5d80, 0x1097e5a2292ce2356c97531291d9913df342bb4bf6c758e4468f27b9d8cae850)
                    mstore(0x5da0, 0x0becdd428ab3cec8ffa616b4ab54b646dcccc9a4e3c49474d70d6216dcab5a1d)
mstore(0x5dc0, mload(0x4cc0))
success := and(eq(staticcall(gas(), 0x7, 0x5d80, 0x60, 0x5d80, 0x40), 1), success)
mstore(0x5de0, mload(0x5d00))
                    mstore(0x5e00, mload(0x5d20))
mstore(0x5e20, mload(0x5d80))
                    mstore(0x5e40, mload(0x5da0))
success := and(eq(staticcall(gas(), 0x6, 0x5de0, 0x80, 0x5de0, 0x40), 1), success)
mstore(0x5e60, 0x0e20ebfeda66a8dbd14bfd1837694d9017cb11df583b001f5049b34597083f38)
                    mstore(0x5e80, 0x194f2f540bba8fb5f38dc25cd333e5cf067c6410f3b262d260f269147fcd814a)
mstore(0x5ea0, mload(0x4ce0))
success := and(eq(staticcall(gas(), 0x7, 0x5e60, 0x60, 0x5e60, 0x40), 1), success)
mstore(0x5ec0, mload(0x5de0))
                    mstore(0x5ee0, mload(0x5e00))
mstore(0x5f00, mload(0x5e60))
                    mstore(0x5f20, mload(0x5e80))
success := and(eq(staticcall(gas(), 0x6, 0x5ec0, 0x80, 0x5ec0, 0x40), 1), success)
mstore(0x5f40, 0x1f386945aac45e5cd160f33455b8a26502fd143e0518b62dc0b5036548003105)
                    mstore(0x5f60, 0x20f5951692f0676f283d9bd0c6453380b8bbd5b6855f249c0109d3428d565423)
mstore(0x5f80, mload(0x4d00))
success := and(eq(staticcall(gas(), 0x7, 0x5f40, 0x60, 0x5f40, 0x40), 1), success)
mstore(0x5fa0, mload(0x5ec0))
                    mstore(0x5fc0, mload(0x5ee0))
mstore(0x5fe0, mload(0x5f40))
                    mstore(0x6000, mload(0x5f60))
success := and(eq(staticcall(gas(), 0x6, 0x5fa0, 0x80, 0x5fa0, 0x40), 1), success)
mstore(0x6020, 0x0f68d0495095d32783734b6d74a312ab0aff59c3580d5a20fef704683acc6e05)
                    mstore(0x6040, 0x119185b91fdf7d816d31ef7aed67529fc0706505537d398a73c4e619f9748aa5)
mstore(0x6060, mload(0x4d20))
success := and(eq(staticcall(gas(), 0x7, 0x6020, 0x60, 0x6020, 0x40), 1), success)
mstore(0x6080, mload(0x5fa0))
                    mstore(0x60a0, mload(0x5fc0))
mstore(0x60c0, mload(0x6020))
                    mstore(0x60e0, mload(0x6040))
success := and(eq(staticcall(gas(), 0x6, 0x6080, 0x80, 0x6080, 0x40), 1), success)
mstore(0x6100, 0x204f2cb3da7030dbd90e7c4e07166ec7816705434ed08235eaeb0e551319ace8)
                    mstore(0x6120, 0x14091e1a2f7fc9985d3f356e9388f1a3224d8f6f7e13e0816ba698b40b0c7c2a)
mstore(0x6140, mload(0x4d40))
success := and(eq(staticcall(gas(), 0x7, 0x6100, 0x60, 0x6100, 0x40), 1), success)
mstore(0x6160, mload(0x6080))
                    mstore(0x6180, mload(0x60a0))
mstore(0x61a0, mload(0x6100))
                    mstore(0x61c0, mload(0x6120))
success := and(eq(staticcall(gas(), 0x6, 0x6160, 0x80, 0x6160, 0x40), 1), success)
mstore(0x61e0, 0x2a1fa000d86a74c8c412ef6c2a933a16c3b4ef562fbfa8fabb8ffa8dac6fa2f5)
                    mstore(0x6200, 0x0565038c8b90fafea01ef1f9a9ce2c22c567aa7dee2430731180ca3809c986bd)
mstore(0x6220, mload(0x4d60))
success := and(eq(staticcall(gas(), 0x7, 0x61e0, 0x60, 0x61e0, 0x40), 1), success)
mstore(0x6240, mload(0x6160))
                    mstore(0x6260, mload(0x6180))
mstore(0x6280, mload(0x61e0))
                    mstore(0x62a0, mload(0x6200))
success := and(eq(staticcall(gas(), 0x6, 0x6240, 0x80, 0x6240, 0x40), 1), success)
mstore(0x62c0, 0x12e624a2a78a265dbafb1bae1db82f370f6d752a66b3aceac73f31035bf3e052)
                    mstore(0x62e0, 0x24235d84f005f5ad3768e6322c05e81362b6cfc21e42ba0b8168b701d3feb3ea)
mstore(0x6300, mload(0x4d80))
success := and(eq(staticcall(gas(), 0x7, 0x62c0, 0x60, 0x62c0, 0x40), 1), success)
mstore(0x6320, mload(0x6240))
                    mstore(0x6340, mload(0x6260))
mstore(0x6360, mload(0x62c0))
                    mstore(0x6380, mload(0x62e0))
success := and(eq(staticcall(gas(), 0x6, 0x6320, 0x80, 0x6320, 0x40), 1), success)
mstore(0x63a0, 0x02720314a9487c28bfd2df0dc3e6ace61a2daf8955827ac9cf47bcb99ad2b861)
                    mstore(0x63c0, 0x2e4663af3b832747987a73cb92a83fcc2dfda8d402cb0afd1e0e96c05cc3fd6b)
mstore(0x63e0, mload(0x4da0))
success := and(eq(staticcall(gas(), 0x7, 0x63a0, 0x60, 0x63a0, 0x40), 1), success)
mstore(0x6400, mload(0x6320))
                    mstore(0x6420, mload(0x6340))
mstore(0x6440, mload(0x63a0))
                    mstore(0x6460, mload(0x63c0))
success := and(eq(staticcall(gas(), 0x6, 0x6400, 0x80, 0x6400, 0x40), 1), success)
mstore(0x6480, mload(0x660))
                    mstore(0x64a0, mload(0x680))
mstore(0x64c0, mload(0x4dc0))
success := and(eq(staticcall(gas(), 0x7, 0x6480, 0x60, 0x6480, 0x40), 1), success)
mstore(0x64e0, mload(0x6400))
                    mstore(0x6500, mload(0x6420))
mstore(0x6520, mload(0x6480))
                    mstore(0x6540, mload(0x64a0))
success := and(eq(staticcall(gas(), 0x6, 0x64e0, 0x80, 0x64e0, 0x40), 1), success)
mstore(0x6560, mload(0x6a0))
                    mstore(0x6580, mload(0x6c0))
mstore(0x65a0, mload(0x4de0))
success := and(eq(staticcall(gas(), 0x7, 0x6560, 0x60, 0x6560, 0x40), 1), success)
mstore(0x65c0, mload(0x64e0))
                    mstore(0x65e0, mload(0x6500))
mstore(0x6600, mload(0x6560))
                    mstore(0x6620, mload(0x6580))
success := and(eq(staticcall(gas(), 0x6, 0x65c0, 0x80, 0x65c0, 0x40), 1), success)
mstore(0x6640, mload(0x6e0))
                    mstore(0x6660, mload(0x700))
mstore(0x6680, mload(0x4e00))
success := and(eq(staticcall(gas(), 0x7, 0x6640, 0x60, 0x6640, 0x40), 1), success)
mstore(0x66a0, mload(0x65c0))
                    mstore(0x66c0, mload(0x65e0))
mstore(0x66e0, mload(0x6640))
                    mstore(0x6700, mload(0x6660))
success := and(eq(staticcall(gas(), 0x6, 0x66a0, 0x80, 0x66a0, 0x40), 1), success)
mstore(0x6720, mload(0x5c0))
                    mstore(0x6740, mload(0x5e0))
mstore(0x6760, mload(0x4e20))
success := and(eq(staticcall(gas(), 0x7, 0x6720, 0x60, 0x6720, 0x40), 1), success)
mstore(0x6780, mload(0x66a0))
                    mstore(0x67a0, mload(0x66c0))
mstore(0x67c0, mload(0x6720))
                    mstore(0x67e0, mload(0x6740))
success := and(eq(staticcall(gas(), 0x6, 0x6780, 0x80, 0x6780, 0x40), 1), success)
mstore(0x6800, mload(0x480))
                    mstore(0x6820, mload(0x4a0))
mstore(0x6840, mload(0x5060))
success := and(eq(staticcall(gas(), 0x7, 0x6800, 0x60, 0x6800, 0x40), 1), success)
mstore(0x6860, mload(0x6780))
                    mstore(0x6880, mload(0x67a0))
mstore(0x68a0, mload(0x6800))
                    mstore(0x68c0, mload(0x6820))
success := and(eq(staticcall(gas(), 0x6, 0x6860, 0x80, 0x6860, 0x40), 1), success)
mstore(0x68e0, mload(0x4c0))
                    mstore(0x6900, mload(0x4e0))
mstore(0x6920, mload(0x5080))
success := and(eq(staticcall(gas(), 0x7, 0x68e0, 0x60, 0x68e0, 0x40), 1), success)
mstore(0x6940, mload(0x6860))
                    mstore(0x6960, mload(0x6880))
mstore(0x6980, mload(0x68e0))
                    mstore(0x69a0, mload(0x6900))
success := and(eq(staticcall(gas(), 0x6, 0x6940, 0x80, 0x6940, 0x40), 1), success)
mstore(0x69c0, mload(0x500))
                    mstore(0x69e0, mload(0x520))
mstore(0x6a00, mload(0x50a0))
success := and(eq(staticcall(gas(), 0x7, 0x69c0, 0x60, 0x69c0, 0x40), 1), success)
mstore(0x6a20, mload(0x6940))
                    mstore(0x6a40, mload(0x6960))
mstore(0x6a60, mload(0x69c0))
                    mstore(0x6a80, mload(0x69e0))
success := and(eq(staticcall(gas(), 0x6, 0x6a20, 0x80, 0x6a20, 0x40), 1), success)
mstore(0x6aa0, mload(0x540))
                    mstore(0x6ac0, mload(0x560))
mstore(0x6ae0, mload(0x5240))
success := and(eq(staticcall(gas(), 0x7, 0x6aa0, 0x60, 0x6aa0, 0x40), 1), success)
mstore(0x6b00, mload(0x6a20))
                    mstore(0x6b20, mload(0x6a40))
mstore(0x6b40, mload(0x6aa0))
                    mstore(0x6b60, mload(0x6ac0))
success := and(eq(staticcall(gas(), 0x6, 0x6b00, 0x80, 0x6b00, 0x40), 1), success)
mstore(0x6b80, mload(0x580))
                    mstore(0x6ba0, mload(0x5a0))
mstore(0x6bc0, mload(0x5260))
success := and(eq(staticcall(gas(), 0x7, 0x6b80, 0x60, 0x6b80, 0x40), 1), success)
mstore(0x6be0, mload(0x6b00))
                    mstore(0x6c00, mload(0x6b20))
mstore(0x6c20, mload(0x6b80))
                    mstore(0x6c40, mload(0x6ba0))
success := and(eq(staticcall(gas(), 0x6, 0x6be0, 0x80, 0x6be0, 0x40), 1), success)
mstore(0x6c60, mload(0x340))
                    mstore(0x6c80, mload(0x360))
mstore(0x6ca0, mload(0x5360))
success := and(eq(staticcall(gas(), 0x7, 0x6c60, 0x60, 0x6c60, 0x40), 1), success)
mstore(0x6cc0, mload(0x6be0))
                    mstore(0x6ce0, mload(0x6c00))
mstore(0x6d00, mload(0x6c60))
                    mstore(0x6d20, mload(0x6c80))
success := and(eq(staticcall(gas(), 0x6, 0x6cc0, 0x80, 0x6cc0, 0x40), 1), success)
mstore(0x6d40, mload(0xe20))
                    mstore(0x6d60, mload(0xe40))
mstore(0x6d80, sub(f_q, mload(0x53a0)))
success := and(eq(staticcall(gas(), 0x7, 0x6d40, 0x60, 0x6d40, 0x40), 1), success)
mstore(0x6da0, mload(0x6cc0))
                    mstore(0x6dc0, mload(0x6ce0))
mstore(0x6de0, mload(0x6d40))
                    mstore(0x6e00, mload(0x6d60))
success := and(eq(staticcall(gas(), 0x6, 0x6da0, 0x80, 0x6da0, 0x40), 1), success)
mstore(0x6e20, mload(0xec0))
                    mstore(0x6e40, mload(0xee0))
mstore(0x6e60, mload(0x53c0))
success := and(eq(staticcall(gas(), 0x7, 0x6e20, 0x60, 0x6e20, 0x40), 1), success)
mstore(0x6e80, mload(0x6da0))
                    mstore(0x6ea0, mload(0x6dc0))
mstore(0x6ec0, mload(0x6e20))
                    mstore(0x6ee0, mload(0x6e40))
success := and(eq(staticcall(gas(), 0x6, 0x6e80, 0x80, 0x6e80, 0x40), 1), success)
mstore(0x6f00, mload(0x6e80))
                    mstore(0x6f20, mload(0x6ea0))
mstore(0x6f40, mload(0xec0))
                    mstore(0x6f60, mload(0xee0))
mstore(0x6f80, mload(0xf00))
                    mstore(0x6fa0, mload(0xf20))
mstore(0x6fc0, mload(0xf40))
                    mstore(0x6fe0, mload(0xf60))
mstore(0x7000, keccak256(0x6f00, 256))
mstore(28704, mod(mload(28672), f_q))
mstore(0x7040, mulmod(mload(0x7020), mload(0x7020), f_q))
mstore(0x7060, mulmod(1, mload(0x7020), f_q))
mstore(0x7080, mload(0x6f80))
                    mstore(0x70a0, mload(0x6fa0))
mstore(0x70c0, mload(0x7060))
success := and(eq(staticcall(gas(), 0x7, 0x7080, 0x60, 0x7080, 0x40), 1), success)
mstore(0x70e0, mload(0x6f00))
                    mstore(0x7100, mload(0x6f20))
mstore(0x7120, mload(0x7080))
                    mstore(0x7140, mload(0x70a0))
success := and(eq(staticcall(gas(), 0x6, 0x70e0, 0x80, 0x70e0, 0x40), 1), success)
mstore(0x7160, mload(0x6fc0))
                    mstore(0x7180, mload(0x6fe0))
mstore(0x71a0, mload(0x7060))
success := and(eq(staticcall(gas(), 0x7, 0x7160, 0x60, 0x7160, 0x40), 1), success)
mstore(0x71c0, mload(0x6f40))
                    mstore(0x71e0, mload(0x6f60))
mstore(0x7200, mload(0x7160))
                    mstore(0x7220, mload(0x7180))
success := and(eq(staticcall(gas(), 0x6, 0x71c0, 0x80, 0x71c0, 0x40), 1), success)
mstore(0x7240, mload(0x70e0))
                    mstore(0x7260, mload(0x7100))
mstore(0x7280, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x72a0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x72c0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x72e0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x7300, mload(0x71c0))
                    mstore(0x7320, mload(0x71e0))
mstore(0x7340, 0x29d8d535d03a8dbfe649850c3ad2b89d92f2bd37e5acda4cf388025bdc31fd32)
            mstore(0x7360, 0x188c95e5e6b71364b1ced1159509e6f642051c787da379b61bde88550a463f7f)
            mstore(0x7380, 0x09abaad5291d0bf5e9f561fb0faf6bc3151ef65f29df18381cf1af17cbeb8216)
            mstore(0x73a0, 0x1157f8d92f6abc7e531183e84da719d5a47bda7d0c0cffe091101f7ef2a10f4e)
success := and(eq(staticcall(gas(), 0x8, 0x7240, 0x180, 0x7240, 0x20), 1), success)
success := and(eq(mload(0x7240), 1), success)

            // Revert if anything fails
            if iszero(success) { revert(0, 0) }

            // Return empty bytes on success
            return(0, 0)

        }
    }
}
