[run]
concurrency = 8
timeout = "10m"
issues-exit-code = 1
tests = true
build-tags = ["integration", "e2e"]

[issues]
exclude-dirs = [
    "op-service",
    "op-node",
    "op-e2e",
    "op-chain-ops",
    "op-batcher",
    "op-bindings",
    "packages",
]
# Don't skip errors, set to 0 to have all results.
max-issues-per-linter = 0

# When enabled linter will skip directories: vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
# skip-dirs-use-default: false

[output]

# I prefer the simplest one: `line-number` and saving to `lint.txt`
#
# The `tab` also looks good and with the next release I will switch to it
# (ref: https://github.com/golangci/golangci-lint/issues/3728)
#
# There are more formats which can be used on CI or by your IDE.
# format: line-number:lint.txt

# I do not find this useful, parameter above already enables filepath
# with a line and column. For me, it's easier to follow the path and
# see the line in an IDE where I see more code and understand it better.
# print-issued-lines: false

# Must have. Easier to understand the output.
print-linter-name = true

# No, no skips, everything should be reported.
uniq-by-line = false

# Slightly easier to follow the results + getting deterministic output.
sort-results = true

[linters]

# Set to true runs only fast linters.
# Good option for 'lint on save', pre-commit hook or CI.
fast = false

enable = [
    "asasalint",                 # check for pass []any as any in variadic func(...any)
    "asciicheck",                # code does not contain non-ASCII identifiers
    "bidichk",                   # Checks for dangerous unicode character sequences.
    "bodyclose",                 # Checks whether HTTP response body is closed successfully.
    "copyloopvar",               # Replaces exportloopref which was deprecated since Go1.22
    "errcheck",                  # errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases
    "errname",                   # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`.
    "errorlint",                 # Suggests to use `%w` for error-wrapping.
    "gocheckcompilerdirectives", # Checks that go compiler directive comments (//go:) are valid.
    "gocritic",                  # Provides diagnostics that check for bugs, performance and style issues.
    "gofumpt",                   # Gofumpt checks whether code was gofumpt-ed.
    "goheader",                  # Checks is file header matches to pattern
    "gosec",                     #(gas): Inspects source code for security problems. see https://github.com/securego/gosec#available-rules
    "gosimple",                  #(megacheck): Linter for Go source code that specializes in simplifying code
    "govet",                     #(vet, vetshadow): Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    "ineffassign",               # Detects when assignments to existing variables are not used
    "misspell",                  # Finds commonly misspelled English words in comments
    "nakedret",                  # Finds naked/bare returns and requires change them.
    "nilerr",                    # Finds the code that returns nil even if it checks that the error is not nil.
    "noctx",                     # noctx finds sending http request without context.Context
    "nolintlint",                # Reports ill-formed or insufficient nolint directivess
    "nosprintfhostport",         # Checks for misuse of Sprintf to construct a host with port in a URL.
    "paralleltest",              # paralleltest detects missing usage of t.Parallel() method in your Go test
    "prealloc",                  # Finds slice declarations that could potentially be pre-allocated
    "predeclared",               # find code that shadows one of Go's predeclared identifiers
    "promlinter",                # Check Prometheus metrics naming via promlint
    "reassign",                  # Checks that package variables are not reassigned
    "rowserrcheck",              # checks whether Err of rows is checked successfully
    "sloglint",                  # sloglint is a linter that detects common mistakes in structured logging
    "sqlclosecheck",             # Checks that sql.Rows and sql.Stmt are closed.
    "stylecheck",                # Stylecheck is a replacement for golint
    "tenv",                      # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    "testableexamples",          # linter checks if examples are testable (have an expected output)
    "thelper",                   # thelper detects Go test helpers without t.Helper() call and checks the consistency of test helpers
    "tparallel",                 # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    "unconvert",                 # Remove unnecessary type conversions
    "unparam",                   # Reports unused function parameters
    "unused",                    #(megacheck): Checks Go code for unused constants, variables, functions and types
    "usestdlibvars",             # A linter that detect the possibility to use variables/constants from the Go standard library.
    "wastedassign",              # wastedassign finds wasted assignment statements.
]

disable = [
    "containedctx",     # containedctx is a linter that detects struct contained context.Context field
    "contextcheck",     # Check whether the function uses a non-inherited context.
    "cyclop",           # checks function and package cyclomatic complexity
    "decorder",         # check declaration order and count of types, constants, variables and functions
    "depguard",         # Go linter that checks if package imports are in a list of acceptable packages
    "dogsled",          # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    "dupl",             # Checks for code clone detection (but fails to notice subtle changes that occur in unit tests)
    "dupword",          # Checks for duplicate words in the source code (too many false positives)
    "durationcheck",    # Check for two durations multiplied together.
    "errchkjson",       # Just check the error from json.Marshal instead
    "exhaustive",       # check exhaustiveness of enum switch statements (annoying)
    "exhaustruct",      # Checks if all structure fields are initialized
    "funlen",           # Tool for detection of long functions
    "forbidigo",        # Forbids certain identifiers - mainly print statements
    "forcetypeassert",  # finds forced type assertions (too many places this is useful - like testing - to require)
    "gci",              # Imports order. Covered by gofumpt
    "ginkgolinter",     # enforces standards of using ginkgo and gomega (which we don't have)
    "gochecknoglobals", # check that no global variables exist
    "gochecknoinits",   # Checks that no init functions are present in Go code
    "gocognit",         # Computes and checks the cognitive complexity of functions
    "goconst",          # Finds repeated strings that could be replaced by a constant
    "gocyclo",          # Computes and checks the cyclomatic complexity of functions
    "godot",            # Check if comments end in a period
    "err113",           # Go linter to check the errors handling expressions (not worth it - too many to deal with and not enough gained)
    "gofmt",            # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification (dup with gofumpt)
    "goimports",        # Check import statements are formatted according to the 'goimport' command. Reformat imports in autofix mode (dup with gofumpt)
    "godox",            # Tool for detection of FIXME, TODO and other comment keywords
    "gomoddirectives",  # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    "gomodguard",       # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    "goprintffuncname", # Checks that printf-like functions are named with `f` at the end
    "grouper",          # An analyzer to analyze expression groups.
    "importas",         # Enforces consistent import aliases
    "interfacebloat",   # A linter that checks the number of methods inside an interface.
    "ireturn",          # Accept Interfaces, Return Concrete Types
    "lll",              # Reports long lines
    "loggercheck",      #(logrlint): Checks key value pairs for common logger libraries (kitlog,klog,logr,zap).
    "maintidx",         # maintidx measures the maintainability index of each function.
    "makezero",         # Finds slice declarations with non-zero initial length
    "musttag",          # enforce field tags in (un)marshaled structs
    "nestif",           # Reports deeply nested if statements
    "nilnil",           # Checks that there is no simultaneous return of `nil` error and an invalid value.
    "nlreturn",         # nlreturn checks for a new line before return and branch statements to increase code clarity
    "nonamedreturns",   # Reports all named returns
    "revive",           # (run separately)
    "staticcheck",      #(megacheck): It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint.
    "tagliatelle",      # Checks the struct tags.
    "testpackage",      # linter that makes you use a separate _test package (no worth the effort in this repo)
    "typecheck",        # Compiler does this
    "varnamelen",       # checks that the length of a variable's name matches its scope
    "whitespace",       # Tool for detection of leading and trailing whitespace (covered elsewhere)
    "wrapcheck",        # Checks that errors returned from external packages are wrapped
    "wsl",              # Whitespace Linter - Forces you to use empty lines!
]

[linters-settings]

[linters-settings.gocritic]
enabled-tags = [
    "diagnostic",
    "experimental",
    "opinionated",
    "performance",
    "style",
]

disabled-checks = [
    "hugeParam",
    "rangeExprCopy",
    "rangeValCopy",
    "importShadow",
    "deferInLoop",   # This is checked by revive (run separately)
    "appendAssign",  # Too many false positives
    "appendCombine", # Suggests combining append statements, but separate is often more clear
]

[linters-settings.errcheck]
# Report `a := b.(MyStruct)` when should be `a, ok := ...`
# allow this since it's highly useful to chain (especially in tests)
check-type-assertions = false

# checks:`num, _ := strconv.Atoi(numStr)`.
# assume these are intentional
check-blank = false

# Function to skip.
exclude-functions = [
    "io/ioutil.ReadFile",
    "io.Copy(*bytes.Buffer)",
    "io.Copy(os.Stdout)",
]

[linters-settings.govet]
disable = [
    "fieldalignment", # I'm ok to waste some bytes
]

[linters-settings.nakedret]
# No naked returns, ever.
max-func-lines = 1 # Default: 30

[linters-settings.stylecheck]
checks = [
    "all",
    # ignore initialisms in naming as style
    # (also can catch other good naming issues, but not worth the noise)
    "-ST1003",
    # ignore error string styles
    "-ST1005",
]

[linters-settings.gosec]
excludes = [
    "G204", # Subprocess launched with a potential tainted input or cmd arguments
    "G306", # Expect WriteFile permissions to be 0600 or less
    "G404", # Use of weak random number generator (math/rand instead of crypto/rand)
    "G115", # integer overflow conversion uint64 -> int64
]

[linters-settings.sloglint]
attr-only = true
