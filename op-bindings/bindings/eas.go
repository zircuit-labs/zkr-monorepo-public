// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/zircuit-labs/l2-geth-public"
	"github.com/zircuit-labs/l2-geth-public/accounts/abi"
	"github.com/zircuit-labs/l2-geth-public/accounts/abi/bind"
	"github.com/zircuit-labs/l2-geth-public/common"
	"github.com/zircuit-labs/l2-geth-public/core/types"
	"github.com/zircuit-labs/l2-geth-public/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Attestation is an auto generated low-level Go binding around an user-defined struct.
type Attestation struct {
	Uid            [32]byte
	Schema         [32]byte
	Time           uint64
	ExpirationTime uint64
	RevocationTime uint64
	RefUID         [32]byte
	Recipient      common.Address
	Attester       common.Address
	Revocable      bool
	Data           []byte
}

// AttestationRequest is an auto generated low-level Go binding around an user-defined struct.
type AttestationRequest struct {
	Schema [32]byte
	Data   AttestationRequestData
}

// AttestationRequestData is an auto generated low-level Go binding around an user-defined struct.
type AttestationRequestData struct {
	Recipient      common.Address
	ExpirationTime uint64
	Revocable      bool
	RefUID         [32]byte
	Data           []byte
	Value          *big.Int
}

// DelegatedAttestationRequest is an auto generated low-level Go binding around an user-defined struct.
type DelegatedAttestationRequest struct {
	Schema    [32]byte
	Data      AttestationRequestData
	Signature Signature
	Attester  common.Address
	Deadline  uint64
}

// DelegatedRevocationRequest is an auto generated low-level Go binding around an user-defined struct.
type DelegatedRevocationRequest struct {
	Schema    [32]byte
	Data      RevocationRequestData
	Signature Signature
	Revoker   common.Address
	Deadline  uint64
}

// MultiAttestationRequest is an auto generated low-level Go binding around an user-defined struct.
type MultiAttestationRequest struct {
	Schema [32]byte
	Data   []AttestationRequestData
}

// MultiDelegatedAttestationRequest is an auto generated low-level Go binding around an user-defined struct.
type MultiDelegatedAttestationRequest struct {
	Schema     [32]byte
	Data       []AttestationRequestData
	Signatures []Signature
	Attester   common.Address
	Deadline   uint64
}

// MultiDelegatedRevocationRequest is an auto generated low-level Go binding around an user-defined struct.
type MultiDelegatedRevocationRequest struct {
	Schema     [32]byte
	Data       []RevocationRequestData
	Signatures []Signature
	Revoker    common.Address
	Deadline   uint64
}

// MultiRevocationRequest is an auto generated low-level Go binding around an user-defined struct.
type MultiRevocationRequest struct {
	Schema [32]byte
	Data   []RevocationRequestData
}

// RevocationRequest is an auto generated low-level Go binding around an user-defined struct.
type RevocationRequest struct {
	Schema [32]byte
	Data   RevocationRequestData
}

// RevocationRequestData is an auto generated low-level Go binding around an user-defined struct.
type RevocationRequestData struct {
	Uid   [32]byte
	Value *big.Int
}

// Signature is an auto generated low-level Go binding around an user-defined struct.
type Signature struct {
	V uint8
	R [32]byte
	S [32]byte
}

// EASMetaData contains all meta data concerning the EAS contract.
var EASMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"attest\",\"inputs\":[{\"name\":\"request\",\"type\":\"tuple\",\"internalType\":\"structAttestationRequest\",\"components\":[{\"name\":\"schema\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"tuple\",\"internalType\":\"structAttestationRequestData\",\"components\":[{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"expirationTime\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"revocable\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"refUID\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"attestByDelegation\",\"inputs\":[{\"name\":\"delegatedRequest\",\"type\":\"tuple\",\"internalType\":\"structDelegatedAttestationRequest\",\"components\":[{\"name\":\"schema\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"tuple\",\"internalType\":\"structAttestationRequestData\",\"components\":[{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"expirationTime\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"revocable\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"refUID\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"signature\",\"type\":\"tuple\",\"internalType\":\"structSignature\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"attester\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAttestTypeHash\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"getAttestation\",\"inputs\":[{\"name\":\"uid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structAttestation\",\"components\":[{\"name\":\"uid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"schema\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"time\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"expirationTime\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"revocationTime\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"refUID\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"attester\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"revocable\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getDomainSeparator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getName\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getNonce\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRevokeOffchain\",\"inputs\":[{\"name\":\"revoker\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRevokeTypeHash\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"getSchemaRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractISchemaRegistry\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"getTimestamp\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"increaseNonce\",\"inputs\":[{\"name\":\"newNonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isAttestationValid\",\"inputs\":[{\"name\":\"uid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"multiAttest\",\"inputs\":[{\"name\":\"multiRequests\",\"type\":\"tuple[]\",\"internalType\":\"structMultiAttestationRequest[]\",\"components\":[{\"name\":\"schema\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"tuple[]\",\"internalType\":\"structAttestationRequestData[]\",\"components\":[{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"expirationTime\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"revocable\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"refUID\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"multiAttestByDelegation\",\"inputs\":[{\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\",\"internalType\":\"structMultiDelegatedAttestationRequest[]\",\"components\":[{\"name\":\"schema\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"tuple[]\",\"internalType\":\"structAttestationRequestData[]\",\"components\":[{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"expirationTime\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"revocable\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"refUID\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"signatures\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"attester\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"multiRevoke\",\"inputs\":[{\"name\":\"multiRequests\",\"type\":\"tuple[]\",\"internalType\":\"structMultiRevocationRequest[]\",\"components\":[{\"name\":\"schema\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"tuple[]\",\"internalType\":\"structRevocationRequestData[]\",\"components\":[{\"name\":\"uid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"multiRevokeByDelegation\",\"inputs\":[{\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\",\"internalType\":\"structMultiDelegatedRevocationRequest[]\",\"components\":[{\"name\":\"schema\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"tuple[]\",\"internalType\":\"structRevocationRequestData[]\",\"components\":[{\"name\":\"uid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"signatures\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"revoker\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"multiRevokeOffchain\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"multiTimestamp\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revoke\",\"inputs\":[{\"name\":\"request\",\"type\":\"tuple\",\"internalType\":\"structRevocationRequest\",\"components\":[{\"name\":\"schema\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"tuple\",\"internalType\":\"structRevocationRequestData\",\"components\":[{\"name\":\"uid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"revokeByDelegation\",\"inputs\":[{\"name\":\"delegatedRequest\",\"type\":\"tuple\",\"internalType\":\"structDelegatedRevocationRequest\",\"components\":[{\"name\":\"schema\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"tuple\",\"internalType\":\"structRevocationRequestData\",\"components\":[{\"name\":\"uid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"signature\",\"type\":\"tuple\",\"internalType\":\"structSignature\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"revoker\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"revokeOffchain\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"timestamp\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Attested\",\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"attester\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"uid\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"schemaUID\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NonceIncreased\",\"inputs\":[{\"name\":\"oldNonce\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"newNonce\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Revoked\",\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"attester\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"uid\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"schemaUID\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RevokedOffchain\",\"inputs\":[{\"name\":\"revoker\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Timestamped\",\"inputs\":[{\"name\":\"data\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessDenied\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AddressInsufficientBalance\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"AlreadyRevoked\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AlreadyRevokedOffchain\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AlreadyTimestamped\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"DeadlineExpired\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FailedInnerCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientValue\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAttestation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAttestations\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidExpirationTime\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidLength\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidNonce\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidOffset\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidRegistry\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidRevocation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidRevocations\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSchema\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidShortString\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidVerifier\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"Irrevocable\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotFound\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotPayable\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"StringTooLong\",\"inputs\":[{\"name\":\"str\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"WrongSchema\",\"inputs\":[]}]",
	Bin: "0x6101806040523480156200001257600080fd5b50604080518082018252600381526245415360e81b602080830191909152825180840190935260058352640312e332e360dc1b9083015290818162000059826000620000ac565b610120526200006a816001620000ac565b61014052815160208084019190912060e052815190820120610100524660a05262000094620000e5565b60805250503060c052506020015161016052620004aa565b6000602083511015620000cc57620000c48362000141565b9050620000df565b81620000d984826200029b565b5060ff90505b92915050565b60e0516101005160405160009262000126927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f924690309060200162000390565b60405160208183030381529060405280519060200120905090565b600080829050601f8151111562000178578260405163305a27a960e01b81526004016200016f919062000441565b60405180910390fd5b8051620001858262000466565b179392505050565b90565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b600281046001821680620001d157607f821691505b602082108103620001e657620001e6620001a6565b50919050565b6000620000df6200018d8381565b6200020583620001ec565b815460001960089490940293841b1916921b91909117905550565b60006200022f818484620001fa565b505050565b8181101562000253576200024a60008262000220565b60010162000234565b5050565b601f8211156200022f576000818152602090206020601f85010481016020851015620002805750805b620002946020601f86010483018262000234565b5050505050565b81516001600160401b03811115620002b757620002b762000190565b620002c38254620001bc565b620002d082828562000257565b6020601f831160018114620003075760008415620002ee5750858201515b600019600886021c198116600286021786555062000363565b600085815260208120601f198616915b8281101562000339578885015182556020948501946001909201910162000317565b86831015620003565784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b805b82525050565b60006001600160a01b038216620000df565b6200036d8162000373565b60a08101620003a082886200036b565b620003af60208301876200036b565b620003be60408301866200036b565b620003cd60608301856200036b565b620003dc608083018462000385565b9695505050505050565b60005b8381101562000403578181015183820152602001620003e9565b50506000910152565b600062000417825190565b80845260208401935062000430818560208601620003e6565b601f01601f19169290920192915050565b602080825281016200045481846200040c565b9392505050565b6000620000df825190565b600062000471825190565b6020830162000480816200045b565b92506020821015620004a3576200049e600019836020036008021b90565b831692505b5050919050565b60805160a05160c05160e051610100516101205161014051610160516140886200051060003960006106a801526000611fc001526000611f93015260006125600152600061253f01526000611ff30152600061201d0152600061204701526140886000f3fe6080604052600436106101665760003560e01c806384b0196e116100d1578063cf190f341161008a578063e71ff36511610064578063e71ff365146104a0578063ed24911d146104c0578063f10b5cc8146104d5578063f17325e7146104f757600080fd5b8063cf190f341461040e578063d45c44351461042e578063e30bb5631461046457600080fd5b806384b0196e14610314578063954115251461033c578063a3112a641461034f578063a6d4dbc71461037c578063b469318d1461038f578063b83010d3146103db57600080fd5b806344adc90e1161012357806344adc90e1461025d578063469262671461027d5780634cb7e9e5146102905780634d003070146102a357806354fd4d50146102c357806379f7573a146102f457600080fd5b80630eabf6601461016b57806312b11a171461018057806313893f61146101c557806317d7de7c146101f25780632d0335ab146102145780633c0427151461024a575b600080fd5b61017e610179366004612ba0565b61050a565b005b34801561018c57600080fd5b507ffeb2925a02bae3dae48d424a0437a2b6ac939aa9230ddc55a1a76f065d9880765b6040516101bc9190612bef565b60405180910390f35b3480156101d157600080fd5b506101e56101e0366004612ba0565b61065c565b6040516101bc9190612c0c565b3480156101fe57600080fd5b506102076106a1565b6040516101bc9190612c70565b34801561022057600080fd5b506101af61022f366004612cb1565b6001600160a01b031660009081526002602052604090205490565b6101af610258366004612cf5565b6106d1565b61027061026b366004612ba0565b6107b6565b6040516101bc9190612d8c565b61017e61028b366004612db2565b6108ff565b61017e61029e366004612ba0565b610983565b3480156102af57600080fd5b506101e56102be366004612de4565b610a48565b3480156102cf57600080fd5b50610207604051806040016040528060058152602001640312e342e360dc1b81525081565b34801561030057600080fd5b5061017e61030f366004612de4565b610a55565b34801561032057600080fd5b50610329610ad5565b6040516101bc9796959493929190612e5c565b61027061034a366004612ba0565b610b1b565b34801561035b57600080fd5b5061036f61036a366004612de4565b610d48565b6040516101bc9190612fa9565b61017e61038a366004612fd0565b610e8f565b34801561039b57600080fd5b506101e56103aa366004612ff2565b6001600160a01b0391909116600090815260366020908152604080832093835292905220546001600160401b031690565b3480156103e757600080fd5b507fb5d556f07587ec0f08cf386545cc4362c702a001650c2058002615ee5c9d1e756101af565b34801561041a57600080fd5b506101e5610429366004612de4565b610f34565b34801561043a57600080fd5b506101e5610449366004612de4565b6000908152603560205260409020546001600160401b031690565b34801561047057600080fd5b5061049361047f366004612de4565b600090815260346020526040902054151590565b6040516101bc919061302f565b3480156104ac57600080fd5b506101e56104bb366004612ba0565b610f42565b3480156104cc57600080fd5b506101af610f7a565b3480156104e157600080fd5b506020602160991b016040516101bc919061307f565b6101af6105053660046130a2565b610f84565b348160005b8181101561065557600019820181146000868684818110610532576105326130dc565b905060200281019061054491906130f2565b61054d90613424565b602081015180519192509080158061056a57508260400151518114155b156105885760405163251f56a160e21b815260040160405180910390fd5b60005b8181101561061e576106166040518060a00160405280866000015181526020018584815181106105bd576105bd6130dc565b60200260200101518152602001866040015184815181106105e0576105e06130dc565b6020026020010151815260200186606001516001600160a01b0316815260200186608001516001600160401b0316815250611024565b60010161058b565b5061063483600001518385606001518a8861117b565b61063e9088613446565b96505050505061064e8160010190565b905061050f565b5050505050565b60004282825b818110156106955761068d33878784818110610680576106806130dc565b90506020020135856115e1565b600101610662565b50909150505b92915050565b60606106cc7f0000000000000000000000000000000000000000000000000000000000000000611694565b905090565b60006106e46106df8361364a565b6117d9565b604080516001808252818301909252600091816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a082015282526000199092019101816106fb57905050905061074b6020840184613656565b61075490613670565b81600081518110610767576107676130dc565b602090810291909101015261079083358261078860c0870160a08801612cb1565b3460016118cf565b602001516000815181106107a6576107a66130dc565b6020026020010151915050919050565b6060816000816001600160401b038111156107d3576107d3613116565b60405190808252806020026020018201604052801561080657816020015b60608152602001906001900390816107f15790505b509050600034815b848110156108e9576000198501811436898984818110610830576108306130dc565b9050602002810190610842919061367c565b90506108516020820182613696565b90506000036108735760405163251f56a160e21b815260040160405180910390fd5b600061089882356108876020850185613696565b6108909161375f565b3388876118cf565b80519091506108a79086613446565b945080602001518785815181106108c0576108c06130dc565b6020026020010181905250806020015151860195505050506108e28160010190565b905061080e565b506108f48383611e13565b979650505050505050565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816109165790505090506109513683900383016020840161376c565b81600081518110610964576109646130dc565b602090810291909101015261097e8235823334600161117b565b505050565b348160005b818110156106555760001982018114368686848181106109aa576109aa6130dc565b90506020028101906109bc919061367c565b9050610a2981356109d0602084018461378d565b808060200260200160405190810160405280939291908181526020016000905b82821015610a1c57610a0d6040830286013681900381019061376c565b815260200190600101906109f0565b505050505033888661117b565b610a339086613446565b94505050610a418160010190565b9050610988565b60004261069b8382611efc565b33600090815260026020526040902054808211610a8557604051633ab3447f60e11b815260040160405180910390fd5b3360009081526002602052604090819020839055517f57b09af877df9068fd60a69d7b21f5576b8b38955812d6ae4ac52942f1e38fb790610ac990839085906137e3565b60405180910390a15050565b600060608060008060006060610ae9611f8c565b610af1611fb9565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6060816000816001600160401b03811115610b3857610b38613116565b604051908082528060200260200182016040528015610b6b57816020015b6060815260200190600190039081610b565790505b509050600034815b848110156108e9576000198501811436898984818110610b9557610b956130dc565b9050602002810190610ba791906130f2565b9050366000610bb96020840184613696565b909250905080801580610bda5750610bd460408501856137fe565b90508114155b15610bf85760405163251f56a160e21b815260040160405180910390fd5b60005b81811015610ccb57610cc36040518060a0016040528087600001358152602001868685818110610c2d57610c2d6130dc565b9050602002810190610c3f9190613656565b610c4890613670565b8152602001610c5a60408901896137fe565b85818110610c6a57610c6a6130dc565b905060600201803603810190610c809190613854565b8152602001610c956080890160608a01612cb1565b6001600160a01b03168152602001610cb360a0890160808a01613875565b6001600160401b031690526117d9565b600101610bfb565b506000610cf48535610cdd858761375f565b610ced6080890160608a01612cb1565b8b8a6118cf565b8051909150610d039089613446565b975080602001518a8881518110610d1c57610d1c6130dc565b602002602001018190525080602001515189019850505050505050610d418160010190565b9050610b73565b610d50612af9565b6000828152603460209081526040918290208251610140810184528154815260018201549281019290925260028101546001600160401b0380821694840194909452600160401b810484166060840152600160801b90049092166080820152600382015460a082015260048201546001600160a01b0390811660c0830152600583015490811660e0830152600160a01b900460ff16151561010082015260068201805491929161012084019190610e06906138ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610e32906138ac565b8015610e7f5780601f10610e5457610100808354040283529160200191610e7f565b820191906000526020600020905b815481529060010190602001808311610e6257829003601f168201915b5050505050815250509050919050565b610ea6610ea13683900383018361394d565b611024565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610ebd579050509050610ef83683900383016020840161376c565b81600081518110610f0b57610f0b6130dc565b602090810291909101015261097e823582610f2c60e0860160c08701612cb1565b34600161117b565b60004261069b3384836115e1565b60004282825b8181101561069557610f72868683818110610f6557610f656130dc565b9050602002013584611efc565b600101610f48565b60006106cc611fe6565b604080516001808252818301909252600091829190816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a08201528252600019909201910181610f9e579050509050610fee6020840184613656565b610ff790613670565b8160008151811061100a5761100a6130dc565b6020908102919091010152610790833582333460016118cf565b60808101516001600160401b0316158015906110555750426001600160401b031681608001516001600160401b0316105b1561107357604051631ab7da6b60e01b815260040160405180910390fd5b602080820151604080840151606085015185518451858701516001600160a01b038416600090815260029098529487208054969794969495611118957fb5d556f07587ec0f08cf386545cc4362c702a001650c2058002615ee5c9d1e7595949392886110de8361396f565b919050558a608001516040516020016110fd9796959493929190613989565b60405160208183030381529060405280519060200120612071565b905061115884606001518284602001518560400151866000015160405160200161114493929190613a0f565b60405160208183030381529060405261209e565b61117557604051638baa579f60e01b815260040160405180910390fd5b50505050565b6040516351753e3760e11b815260009081906020602160991b019063a2ea7c6e906111aa908a90600401612bef565b600060405180830381865afa1580156111c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111ef9190810190613b5f565b805190915061121157604051635f9bd90760e11b815260040160405180910390fd5b85516000816001600160401b0381111561122d5761122d613116565b60405190808252806020026020018201604052801561126657816020015b611253612af9565b81526020019060019003908161124b5790505b5090506000826001600160401b0381111561128357611283613116565b6040519080825280602002602001820160405280156112ac578160200160208202803683370190505b50905060005b838110156115c15760008a82815181106112ce576112ce6130dc565b602090810291909101810151805160009081526034909252604090912080549192509061130e5760405163c5723b5160e01b815260040160405180910390fd5b8c81600101541461133257604051635f9bd90760e11b815260040160405180910390fd5b60058101546001600160a01b038c811691161461136257604051634ca8886760e01b815260040160405180910390fd5b6005810154600160a01b900460ff1661138e5760405163157bd4c360e01b815260040160405180910390fd5b6002810154600160801b90046001600160401b0316156113c15760405163905e710760e01b815260040160405180910390fd5b4260028201805467ffffffffffffffff60801b198116600160801b6001600160401b03948516810291821793849055604080516101408101825287548152600188015460208201529386169286169290921791830191909152600160401b8304841660608301529091049091166080820152600382015460a082015260048201546001600160a01b0390811660c0830152600583015490811660e0830152600160a01b900460ff1615156101008201526006820180548391610120840191611488906138ac565b80601f01602080910402602001604051908101604052809291908181526020018280546114b4906138ac565b80156115015780601f106114d657610100808354040283529160200191611501565b820191906000526020600020905b8154815290600101906020018083116114e457829003601f168201915b50505050508152505085848151811061151c5761151c6130dc565b6020026020010181905250816020015184848151811061153e5761153e6130dc565b6020026020010181815250508c8b6001600160a01b0316868581518110611567576115676130dc565b602002602001015160c001516001600160a01b03167ff930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f61585600001516040516115af9190612bef565b60405180910390a450506001016112b2565b506115d184838360018b8b612102565b9450505050505b95945050505050565b6001600160a01b038316600090815260366020908152604080832085845291829052909120546001600160401b03161561162e5760405163ec9d6eeb60e01b815260040160405180910390fd5b600083815260208290526040808220805467ffffffffffffffff19166001600160401b0386169081179091559051909185916001600160a01b038816917f92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a222991a450505050565b604080516020808252818301909252606091600091906020820181803683370190505090506000805b602081101561172f5760008582602081106116da576116da6130dc565b1a60f81b90506001600160f81b031981166000036116f8575061172f565b8084848151811061170b5761170b6130dc565b60200101906001600160f81b031916908160001a90535050600191820191016116bd565b506000816001600160401b0381111561174a5761174a613116565b6040519080825280601f01601f191660200182016040528015611774576020820181803683370190505b50905060005b828110156117d057838181518110611794576117946130dc565b602001015160f81c60f81b8282815181106117b1576117b16130dc565b60200101906001600160f81b031916908160001a90535060010161177a565b50949350505050565b60808101516001600160401b03161580159061180a5750426001600160401b031681608001516001600160401b0316105b1561182857604051631ab7da6b60e01b815260040160405180910390fd5b6020808201516040808401516060808601518651855186880151868801519488015160808901518051908b012060a08a01516001600160a01b03871660009081526002909c52988b2080549a9b989a9899611118997ffeb2925a02bae3dae48d424a0437a2b6ac939aa9230ddc55a1a76f065d988076999493928c6118ac8361396f565b919050558e608001516040516020016110fd9b9a99989796959493929190613b99565b6040805180820190915260008152606060208201528451604080518082019091526000815260606020820152816001600160401b0381111561191357611913613116565b60405190808252806020026020018201604052801561193c578160200160208202803683370190505b5060208201526040516351753e3760e11b81526000906020602160991b019063a2ea7c6e9061196f908c90600401612bef565b600060405180830381865afa15801561198c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119b49190810190613b5f565b80519091506119d657604051635f9bd90760e11b815260040160405180910390fd5b6000836001600160401b038111156119f0576119f0613116565b604051908082528060200260200182016040528015611a2957816020015b611a16612af9565b815260200190600190039081611a0e5790505b5090506000846001600160401b03811115611a4657611a46613116565b604051908082528060200260200182016040528015611a6f578160200160208202803683370190505b50905060005b85811015611df25760008b8281518110611a9157611a916130dc565b6020026020010151905060006001600160401b031681602001516001600160401b031614158015611ad85750426001600160401b031681602001516001600160401b031611155b15611af6576040516308e8b93760e01b815260040160405180910390fd5b8460400151158015611b09575080604001515b15611b275760405163157bd4c360e01b815260040160405180910390fd5b60006040518061014001604052806000801b81526020018f8152602001611b4b4290565b6001600160401b0316815260200183602001516001600160401b0316815260200160006001600160401b031681526020018360600151815260200183600001516001600160a01b031681526020018d6001600160a01b0316815260200183604001511515815260200183608001518152509050600080600090505b611bd08382612410565b60008181526034602052604090205490925015611bef57600101611bc6565b8183526000828152603460209081526040918290208551815590850151600182015590840151600282018054606087015160808801516001600160401b03908116600160801b0267ffffffffffffffff60801b19928216600160401b026fffffffffffffffffffffffffffffffff199094169190951617919091171691909117905560a0840151600382015560c08401516004820180546001600160a01b039283166001600160a01b031990911617905560e08501516005830180546101008801511515600160a01b026001600160a81b031990911692909316919091179190911790556101208401518491906006820190611ceb9082613cd2565b505050606084015115611d29576060840151600090815260346020526040902054611d295760405163c5723b5160e01b815260040160405180910390fd5b82878681518110611d3c57611d3c6130dc565b60200260200101819052508360a00151868681518110611d5e57611d5e6130dc565b6020026020010181815250508189602001518681518110611d8157611d816130dc565b6020026020010181815250508f8e6001600160a01b031685600001516001600160a01b03167f8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b3585604051611dd59190612bef565b60405180910390a450505050611deb8160010190565b9050611a75565b50611e0283838360008c8c612102565b845250919998505050505050505050565b60606000826001600160401b03811115611e2f57611e2f613116565b604051908082528060200260200182016040528015611e58578160200160208202803683370190505b508451909150600090815b81811015611ef1576000878281518110611e7f57611e7f6130dc565b6020026020010151905060008151905060005b81811015611edd57828181518110611eac57611eac6130dc565b6020026020010151878781518110611ec657611ec66130dc565b602090810291909101015260019586019501611e92565b505050611eea8160010190565b9050611e63565b509195945050505050565b6000828152603560205260409020546001600160401b031615611f32576040516317133ca360e11b815260040160405180910390fd5b600082815260356020526040808220805467ffffffffffffffff19166001600160401b0385169081179091559051909184917f5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f9190a35050565b60606106cc7f0000000000000000000000000000000000000000000000000000000000000000600061246f565b60606106cc7f0000000000000000000000000000000000000000000000000000000000000000600161246f565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561203f57507f000000000000000000000000000000000000000000000000000000000000000046145b1561206957507f000000000000000000000000000000000000000000000000000000000000000090565b6106cc61251a565b600061069b61207e611fe6565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060006120ad85856125b0565b50909250905060008160038111156120c7576120c7613d95565b1480156120e55750856001600160a01b0316826001600160a01b0316145b806120f657506120f68686866125fd565b925050505b9392505050565b8451600090600181900361215a576121528888600081518110612127576121276130dc565b602002602001015188600081518110612142576121426130dc565b60200260200101518888886126d8565b915050612406565b60208801516001600160a01b0381166121d55760005b828110156121ba5787818151811061218a5761218a6130dc565b60200260200101516000146121b257604051631574f9f360e01b815260040160405180910390fd5b600101612170565b5083156121ca576121ca85612914565b600092505050612406565b600080826001600160a01b031663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223a9190613dab565b905060005b848110156122c55760008a828151811061225b5761225b6130dc565b602002602001015190508060000361227357506122bd565b8261229157604051631574f9f360e01b815260040160405180910390fd5b888111156122b25760405163044044a560e21b815260040160405180910390fd5b978890039792909201915b60010161223f565b508715612361576040516388e5b2d960e01b81526001600160a01b038416906388e5b2d99084906122fc908e908e90600401613e3e565b60206040518083038185885af115801561231a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061233f9190613dab565b61235c5760405163bf2f3a8b60e01b815260040160405180910390fd5b6123f1565b6040516348ed85bf60e11b81526001600160a01b038416906391db0b7e908490612391908e908e90600401613e3e565b60206040518083038185885af11580156123af573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906123d49190613dab565b6123f15760405163e8bee83960e01b815260040160405180910390fd5b85156124005761240087612914565b50925050505b9695505050505050565b60208083015160c084015160e0850151604080870151606088015161010089015160a08a01516101208b0151945160009961245199989796918c9101613efc565b60405160208183030381529060405280519060200120905092915050565b606060ff83146124895761248283612927565b905061069b565b818054612495906138ac565b80601f01602080910402602001604051908101604052809291908181526020018280546124c1906138ac565b801561250e5780601f106124e35761010080835404028352916020019161250e565b820191906000526020600020905b8154815290600101906020018083116124f157829003601f168201915b5050505050905061069b565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001612595959493929190613f95565b60405160208183030381529060405280519060200120905090565b600080600083516041036125ea5760208401516040850151606086015160001a6125dc88828585612966565b9550955095505050506125f6565b50508151600091506002905b9250925092565b6000806000856001600160a01b0316858560405160240161261f929190613fd7565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b179052516126549190613ff7565b600060405180830381855afa9150503d806000811461268f576040519150601f19603f3d011682016040523d82523d6000602084013e612694565b606091505b50915091508180156126a857506020815110155b80156120f657508051630b135d3f60e11b906126cd9083016020908101908401614003565b149695505050505050565b60208601516000906001600160a01b03811661272657851561270d57604051631574f9f360e01b815260040160405180910390fd5b821561271c5761271c84612914565b6000915050612406565b85156127d257806001600160a01b031663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561276a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278e9190613dab565b6127ab57604051631574f9f360e01b815260040160405180910390fd5b838611156127cc5760405163044044a560e21b815260040160405180910390fd5b85840393505b841561286b5760405163e49617e160e01b81526001600160a01b0382169063e49617e1908890612806908b90600401612fa9565b60206040518083038185885af1158015612824573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906128499190613dab565b6128665760405163ccf3bb2760e01b815260040160405180910390fd5b6128f9565b60405163e60c350560e01b81526001600160a01b0382169063e60c3505908890612899908b90600401612fa9565b60206040518083038185885af11580156128b7573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906128dc9190613dab565b6128f95760405163bd8ba84d60e01b815260040160405180910390fd5b82156129085761290884612914565b50939695505050505050565b8015612924576129243382612a28565b50565b6060600061293483612ad1565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156129a15750600091506003905082612a1e565b6000600188888888604051600081526020016040526040516129c6949392919061402d565b6020604051602081039080840390855afa1580156129e8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612a1457506000925060019150829050612a1e565b9250600091508190505b9450945094915050565b80471015612a54573060405163cd78605960e01b8152600401612a4b9190614062565b60405180910390fd5b6000826001600160a01b031682604051612a6d90614070565b60006040518083038185875af1925050503d8060008114612aaa576040519150601f19603f3d011682016040523d82523d6000602084013e612aaf565b606091505b505090508061097e57604051630a12f52160e11b815260040160405180910390fd5b600060ff8216601f81111561069b57604051632cd44ac360e21b815260040160405180910390fd5b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082019290925261012081019190915290565b60008083601f840112612b6457612b64600080fd5b5081356001600160401b03811115612b7e57612b7e600080fd5b602083019150836020820283011115612b9957612b99600080fd5b9250929050565b60008060208385031215612bb657612bb6600080fd5b82356001600160401b03811115612bcf57612bcf600080fd5b612bdb85828601612b4f565b92509250509250929050565b805b82525050565b6020810161069b8284612be7565b6001600160401b038116612be9565b6020810161069b8284612bfd565b60005b83811015612c35578181015183820152602001612c1d565b50506000910152565b6000612c48825190565b808452602084019350612c5f818560208601612c1a565b601f01601f19169290920192915050565b602080825281016120fb8184612c3e565b60006001600160a01b03821661069b565b612c9b81612c81565b811461292457600080fd5b803561069b81612c92565b600060208284031215612cc657612cc6600080fd5b6000612cd28484612ca6565b949350505050565b600060e08284031215612cef57612cef600080fd5b50919050565b600060208284031215612d0a57612d0a600080fd5b81356001600160401b03811115612d2357612d23600080fd5b612cd284828501612cda565b6000612d3b8383612be7565b505060200190565b6000612d4d825190565b80845260209384019383018060005b83811015612d81578151612d708882612d2f565b975060208301925050600101612d5c565b509495945050505050565b602080825281016120fb8184612d43565b600060608284031215612cef57612cef600080fd5b600060608284031215612dc757612dc7600080fd5b6000612cd28484612d9d565b80612c9b565b803561069b81612dd3565b600060208284031215612df957612df9600080fd5b6000612cd28484612dd9565b6001600160f81b03198116612be9565b612be981612c81565b6000612e28825190565b80845260209384019383018060005b83811015612d81578151612e4b8882612d2f565b975060208301925050600101612e37565b60e08101612e6a828a612e05565b8181036020830152612e7c8189612c3e565b90508181036040830152612e908188612c3e565b9050612e9f6060830187612be7565b612eac6080830186612e15565b612eb960a0830185612be7565b81810360c0830152612ecb8184612e1e565b9998505050505050505050565b801515612be9565b8051600090610140840190612ef58582612be7565b506020830151612f086020860182612be7565b506040830151612f1b6040860182612bfd565b506060830151612f2e6060860182612bfd565b506080830151612f416080860182612bfd565b5060a0830151612f5460a0860182612be7565b5060c0830151612f6760c0860182612e15565b5060e0830151612f7a60e0860182612e15565b50610100830151612f8f610100860182612ed8565b506101208301518482036101208601526115d88282612c3e565b602080825281016120fb8184612ee0565b60006101008284031215612cef57612cef600080fd5b60006101008284031215612fe657612fe6600080fd5b6000612cd28484612fba565b6000806040838503121561300857613008600080fd5b60006130148585612ca6565b925050602061302585828601612dd9565b9150509250929050565b6020810161069b8284612ed8565b600061069b6001600160a01b038316613054565b90565b6001600160a01b031690565b600061069b8261303d565b600061069b82613060565b612be98161306b565b6020810161069b8284613076565b600060408284031215612cef57612cef600080fd5b6000602082840312156130b7576130b7600080fd5b81356001600160401b038111156130d0576130d0600080fd5b612cd28482850161308d565b634e487b7160e01b600052603260045260246000fd5b60008235609e193684900301811261310c5761310c600080fd5b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b038211171561315157613151613116565b6040525050565b600061316360405190565b905061316f828261312c565b919050565b60006001600160401b0382111561318d5761318d613116565b5060209081020190565b6000604082840312156131ac576131ac600080fd5b6131b66040613158565b905060006131c48484612dd9565b82525060206131d584848301612dd9565b60208301525092915050565b60006131f46131ef84613174565b613158565b8381529050602081016040840283018581111561321357613213600080fd5b835b8181101561323957806132288882613197565b845250602090920191604001613215565b5050509392505050565b600082601f83011261325757613257600080fd5b8135612cd28482602086016131e1565b60ff8116612c9b565b803561069b81613267565b60006060828403121561329057613290600080fd5b61329a6060613158565b905060006132a88484613270565b82525060206132b984848301612dd9565b60208301525060406132cd84828501612dd9565b60408301525092915050565b60006132e76131ef84613174565b8381529050602081016060840283018581111561330657613306600080fd5b835b81811015613239578061331b888261327b565b845250602090920191606001613308565b600082601f83011261334057613340600080fd5b8135612cd28482602086016132d9565b6001600160401b038116612c9b565b803561069b81613350565b600060a0828403121561337f5761337f600080fd5b61338960a0613158565b905060006133978484612dd9565b82525060208201356001600160401b038111156133b6576133b6600080fd5b6133c284828501613243565b60208301525060408201356001600160401b038111156133e4576133e4600080fd5b6133f08482850161332c565b604083015250606061340484828501612ca6565b60608301525060806134188482850161335f565b60808301525092915050565b600061069b368361336a565b634e487b7160e01b600052601160045260246000fd5b8181038181111561069b5761069b613430565b801515612c9b565b803561069b81613459565b60006001600160401b0382111561348557613485613116565b601f19601f83011660200192915050565b82818337506000910152565b60006134b06131ef8461346c565b9050828152602081018484840111156134cb576134cb600080fd5b6134d6848285613496565b509392505050565b600082601f8301126134f2576134f2600080fd5b8135612cd28482602086016134a2565b600060c0828403121561351757613517600080fd5b61352160c0613158565b9050600061352f8484612ca6565b82525060206135408484830161335f565b602083015250604061355484828501613461565b604083015250606061356884828501612dd9565b60608301525060808201356001600160401b0381111561358a5761358a600080fd5b613596848285016134de565b60808301525060a06135aa84828501612dd9565b60a08301525092915050565b600060e082840312156135cb576135cb600080fd5b6135d560a0613158565b905060006135e38484612dd9565b82525060208201356001600160401b0381111561360257613602600080fd5b61360e84828501613502565b60208301525060406136228482850161327b565b60408301525060a061363684828501612ca6565b60608301525060c06134188482850161335f565b600061069b36836135b6565b6000823560be193684900301811261310c5761310c600080fd5b600061069b3683613502565b60008235603e193684900301811261310c5761310c600080fd5b6000808335601e19368590030181126136b1576136b1600080fd5b8084019250823591506001600160401b038211156136d1576136d1600080fd5b602092830192820236038313156136ea576136ea600080fd5b509250929050565b60006137006131ef84613174565b8381529050602080820190840283018581111561371f5761371f600080fd5b835b818110156132395780356001600160401b0381111561374257613742600080fd5b80860161374f8982613502565b8552505060209283019201613721565b60006120fb3684846136f2565b60006040828403121561378157613781600080fd5b6000612cd28484613197565b6000808335601e19368590030181126137a8576137a8600080fd5b8084019250823591506001600160401b038211156137c8576137c8600080fd5b6020830192506040820236038313156136ea576136ea600080fd5b604081016137f18285612be7565b6120fb6020830184612be7565b6000808335601e193685900301811261381957613819600080fd5b8084019250823591506001600160401b0382111561383957613839600080fd5b6020830192506060820236038313156136ea576136ea600080fd5b60006060828403121561386957613869600080fd5b6000612cd2848461327b565b60006020828403121561388a5761388a600080fd5b6000612cd2848461335f565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806138c057607f821691505b602082108103612cef57612cef613896565b600061010082840312156138e8576138e8600080fd5b6138f260a0613158565b905060006139008484612dd9565b825250602061391184848301613197565b60208301525060606139258482850161327b565b60408301525060c061393984828501612ca6565b60608301525060e06134188482850161335f565b6000610100828403121561396357613963600080fd5b6000612cd284846138d2565b6000600019820361398257613982613430565b5060010190565b60e08101613997828a612be7565b6139a46020830189612e15565b6139b16040830188612be7565b6139be6060830187612be7565b6139cb6080830186612be7565b6139d860a0830185612be7565b6139e560c0830184612bfd565b98975050505050505050565b80612be9565b600061069b8260f81b90565b612be960ff82166139f7565b6000613a1b82866139f1565b602082019150613a2b82856139f1565b602082019150613a3b8284613a03565b506001019392505050565b805161069b81612dd3565b600061069b82612c81565b612c9b81613a51565b805161069b81613a5c565b805161069b81613459565b6000613a896131ef8461346c565b905082815260208101848484011115613aa457613aa4600080fd5b6134d6848285612c1a565b600082601f830112613ac357613ac3600080fd5b8151612cd2848260208601613a7b565b600060808284031215613ae857613ae8600080fd5b613af26080613158565b90506000613b008484613a46565b8252506020613b1184848301613a65565b6020830152506040613b2584828501613a70565b60408301525060608201516001600160401b03811115613b4757613b47600080fd5b613b5384828501613aaf565b60608301525092915050565b600060208284031215613b7457613b74600080fd5b81516001600160401b03811115613b8d57613b8d600080fd5b612cd284828501613ad3565b6101608101613ba8828e612be7565b613bb5602083018d612e15565b613bc2604083018c612be7565b613bcf606083018b612e15565b613bdc608083018a612bfd565b613be960a0830189612ed8565b613bf660c0830188612be7565b613c0360e0830187612be7565b613c11610100830186612be7565b613c1f610120830185612be7565b613c2d610140830184612bfd565b9c9b505050505050505050505050565b600061069b6130518381565b613c5283613c3d565b815460001960089490940293841b1916921b91909117905550565b600061097e818484613c49565b81811015613c9557613c8d600082613c6d565b600101613c7a565b5050565b601f82111561097e576000818152602090206020601f85010481016020851015613cc05750805b6106556020601f860104830182613c7a565b81516001600160401b03811115613ceb57613ceb613116565b613cf582546138ac565b613d00828285613c99565b6020601f831160018114613d345760008415613d1c5750858201515b600019600886021c1981166002860217865550613d8d565b600085815260208120601f198616915b82811015613d645788850151825560209485019460019092019101613d44565b86831015613d805784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215613dc057613dc0600080fd5b6000612cd28484613a70565b60006120fb8383612ee0565b6000613de2825190565b80845260208401935083602082028501613dfc8560200190565b8060005b85811015613e315784840389528151613e198582613dcc565b94506020830160209a909a0199925050600101613e00565b5091979650505050505050565b60408082528101613e4f8185613dd8565b90508181036020830152612cd28184612e1e565b600061069b8260601b90565b600061069b82613e63565b612be9613e8682612c81565b613e6f565b600061069b8260c01b90565b612be96001600160401b038216613e8b565b600061069b826139f7565b612be9811515613ea9565b6000613ec9825190565b613ed7818560208601612c1a565b9290920192915050565b600061069b8260e01b90565b612be963ffffffff8216613ee1565b6000613f08828c6139f1565b602082019150613f18828b613e7a565b601482019150613f28828a613e7a565b601482019150613f388289613e97565b600882019150613f488288613e97565b600882019150613f588287613eb4565b600182019150613f6882866139f1565b602082019150613f788285613ebf565b9150613f848284613eed565b506004019998505050505050505050565b60a08101613fa38288612be7565b613fb06020830187612be7565b613fbd6040830186612be7565b613fca6060830185612be7565b6124066080830184612e15565b60408101613fe58285612be7565b8181036020830152612cd28184612c3e565b60006120fb8284613ebf565b60006020828403121561401857614018600080fd5b6000612cd28484613a46565b60ff8116612be9565b6080810161403b8287612be7565b6140486020830186614024565b6140556040830185612be7565b6115d86060830184612be7565b6020810161069b8284612e15565b600061069b8261305156fea164736f6c6343000814000a",
}

// EASABI is the input ABI used to generate the binding from.
// Deprecated: Use EASMetaData.ABI instead.
var EASABI = EASMetaData.ABI

// EASBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EASMetaData.Bin instead.
var EASBin = EASMetaData.Bin

// DeployEAS deploys a new Ethereum contract, binding an instance of EAS to it.
func DeployEAS(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EAS, error) {
	parsed, err := EASMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EASBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EAS{EASCaller: EASCaller{contract: contract}, EASTransactor: EASTransactor{contract: contract}, EASFilterer: EASFilterer{contract: contract}}, nil
}

// EAS is an auto generated Go binding around an Ethereum contract.
type EAS struct {
	EASCaller     // Read-only binding to the contract
	EASTransactor // Write-only binding to the contract
	EASFilterer   // Log filterer for contract events
}

// EASCaller is an auto generated read-only Go binding around an Ethereum contract.
type EASCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EASTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EASTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EASFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EASFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EASSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EASSession struct {
	Contract     *EAS              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EASCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EASCallerSession struct {
	Contract *EASCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// EASTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EASTransactorSession struct {
	Contract     *EASTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EASRaw is an auto generated low-level Go binding around an Ethereum contract.
type EASRaw struct {
	Contract *EAS // Generic contract binding to access the raw methods on
}

// EASCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EASCallerRaw struct {
	Contract *EASCaller // Generic read-only contract binding to access the raw methods on
}

// EASTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EASTransactorRaw struct {
	Contract *EASTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEAS creates a new instance of EAS, bound to a specific deployed contract.
func NewEAS(address common.Address, backend bind.ContractBackend) (*EAS, error) {
	contract, err := bindEAS(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EAS{EASCaller: EASCaller{contract: contract}, EASTransactor: EASTransactor{contract: contract}, EASFilterer: EASFilterer{contract: contract}}, nil
}

// NewEASCaller creates a new read-only instance of EAS, bound to a specific deployed contract.
func NewEASCaller(address common.Address, caller bind.ContractCaller) (*EASCaller, error) {
	contract, err := bindEAS(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EASCaller{contract: contract}, nil
}

// NewEASTransactor creates a new write-only instance of EAS, bound to a specific deployed contract.
func NewEASTransactor(address common.Address, transactor bind.ContractTransactor) (*EASTransactor, error) {
	contract, err := bindEAS(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EASTransactor{contract: contract}, nil
}

// NewEASFilterer creates a new log filterer instance of EAS, bound to a specific deployed contract.
func NewEASFilterer(address common.Address, filterer bind.ContractFilterer) (*EASFilterer, error) {
	contract, err := bindEAS(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EASFilterer{contract: contract}, nil
}

// bindEAS binds a generic wrapper to an already deployed contract.
func bindEAS(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := EASMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EAS *EASRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EAS.Contract.EASCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EAS *EASRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EAS.Contract.EASTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EAS *EASRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EAS.Contract.EASTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EAS *EASCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EAS.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EAS *EASTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EAS.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EAS *EASTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EAS.Contract.contract.Transact(opts, method, params...)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_EAS *EASCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_EAS *EASSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _EAS.Contract.Eip712Domain(&_EAS.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_EAS *EASCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _EAS.Contract.Eip712Domain(&_EAS.CallOpts)
}

// GetAttestTypeHash is a free data retrieval call binding the contract method 0x12b11a17.
//
// Solidity: function getAttestTypeHash() pure returns(bytes32)
func (_EAS *EASCaller) GetAttestTypeHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "getAttestTypeHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetAttestTypeHash is a free data retrieval call binding the contract method 0x12b11a17.
//
// Solidity: function getAttestTypeHash() pure returns(bytes32)
func (_EAS *EASSession) GetAttestTypeHash() ([32]byte, error) {
	return _EAS.Contract.GetAttestTypeHash(&_EAS.CallOpts)
}

// GetAttestTypeHash is a free data retrieval call binding the contract method 0x12b11a17.
//
// Solidity: function getAttestTypeHash() pure returns(bytes32)
func (_EAS *EASCallerSession) GetAttestTypeHash() ([32]byte, error) {
	return _EAS.Contract.GetAttestTypeHash(&_EAS.CallOpts)
}

// GetAttestation is a free data retrieval call binding the contract method 0xa3112a64.
//
// Solidity: function getAttestation(bytes32 uid) view returns((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))
func (_EAS *EASCaller) GetAttestation(opts *bind.CallOpts, uid [32]byte) (Attestation, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "getAttestation", uid)

	if err != nil {
		return *new(Attestation), err
	}

	out0 := *abi.ConvertType(out[0], new(Attestation)).(*Attestation)

	return out0, err

}

// GetAttestation is a free data retrieval call binding the contract method 0xa3112a64.
//
// Solidity: function getAttestation(bytes32 uid) view returns((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))
func (_EAS *EASSession) GetAttestation(uid [32]byte) (Attestation, error) {
	return _EAS.Contract.GetAttestation(&_EAS.CallOpts, uid)
}

// GetAttestation is a free data retrieval call binding the contract method 0xa3112a64.
//
// Solidity: function getAttestation(bytes32 uid) view returns((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))
func (_EAS *EASCallerSession) GetAttestation(uid [32]byte) (Attestation, error) {
	return _EAS.Contract.GetAttestation(&_EAS.CallOpts, uid)
}

// GetDomainSeparator is a free data retrieval call binding the contract method 0xed24911d.
//
// Solidity: function getDomainSeparator() view returns(bytes32)
func (_EAS *EASCaller) GetDomainSeparator(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "getDomainSeparator")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetDomainSeparator is a free data retrieval call binding the contract method 0xed24911d.
//
// Solidity: function getDomainSeparator() view returns(bytes32)
func (_EAS *EASSession) GetDomainSeparator() ([32]byte, error) {
	return _EAS.Contract.GetDomainSeparator(&_EAS.CallOpts)
}

// GetDomainSeparator is a free data retrieval call binding the contract method 0xed24911d.
//
// Solidity: function getDomainSeparator() view returns(bytes32)
func (_EAS *EASCallerSession) GetDomainSeparator() ([32]byte, error) {
	return _EAS.Contract.GetDomainSeparator(&_EAS.CallOpts)
}

// GetName is a free data retrieval call binding the contract method 0x17d7de7c.
//
// Solidity: function getName() view returns(string)
func (_EAS *EASCaller) GetName(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "getName")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetName is a free data retrieval call binding the contract method 0x17d7de7c.
//
// Solidity: function getName() view returns(string)
func (_EAS *EASSession) GetName() (string, error) {
	return _EAS.Contract.GetName(&_EAS.CallOpts)
}

// GetName is a free data retrieval call binding the contract method 0x17d7de7c.
//
// Solidity: function getName() view returns(string)
func (_EAS *EASCallerSession) GetName() (string, error) {
	return _EAS.Contract.GetName(&_EAS.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address account) view returns(uint256)
func (_EAS *EASCaller) GetNonce(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "getNonce", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address account) view returns(uint256)
func (_EAS *EASSession) GetNonce(account common.Address) (*big.Int, error) {
	return _EAS.Contract.GetNonce(&_EAS.CallOpts, account)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address account) view returns(uint256)
func (_EAS *EASCallerSession) GetNonce(account common.Address) (*big.Int, error) {
	return _EAS.Contract.GetNonce(&_EAS.CallOpts, account)
}

// GetRevokeOffchain is a free data retrieval call binding the contract method 0xb469318d.
//
// Solidity: function getRevokeOffchain(address revoker, bytes32 data) view returns(uint64)
func (_EAS *EASCaller) GetRevokeOffchain(opts *bind.CallOpts, revoker common.Address, data [32]byte) (uint64, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "getRevokeOffchain", revoker, data)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetRevokeOffchain is a free data retrieval call binding the contract method 0xb469318d.
//
// Solidity: function getRevokeOffchain(address revoker, bytes32 data) view returns(uint64)
func (_EAS *EASSession) GetRevokeOffchain(revoker common.Address, data [32]byte) (uint64, error) {
	return _EAS.Contract.GetRevokeOffchain(&_EAS.CallOpts, revoker, data)
}

// GetRevokeOffchain is a free data retrieval call binding the contract method 0xb469318d.
//
// Solidity: function getRevokeOffchain(address revoker, bytes32 data) view returns(uint64)
func (_EAS *EASCallerSession) GetRevokeOffchain(revoker common.Address, data [32]byte) (uint64, error) {
	return _EAS.Contract.GetRevokeOffchain(&_EAS.CallOpts, revoker, data)
}

// GetRevokeTypeHash is a free data retrieval call binding the contract method 0xb83010d3.
//
// Solidity: function getRevokeTypeHash() pure returns(bytes32)
func (_EAS *EASCaller) GetRevokeTypeHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "getRevokeTypeHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRevokeTypeHash is a free data retrieval call binding the contract method 0xb83010d3.
//
// Solidity: function getRevokeTypeHash() pure returns(bytes32)
func (_EAS *EASSession) GetRevokeTypeHash() ([32]byte, error) {
	return _EAS.Contract.GetRevokeTypeHash(&_EAS.CallOpts)
}

// GetRevokeTypeHash is a free data retrieval call binding the contract method 0xb83010d3.
//
// Solidity: function getRevokeTypeHash() pure returns(bytes32)
func (_EAS *EASCallerSession) GetRevokeTypeHash() ([32]byte, error) {
	return _EAS.Contract.GetRevokeTypeHash(&_EAS.CallOpts)
}

// GetSchemaRegistry is a free data retrieval call binding the contract method 0xf10b5cc8.
//
// Solidity: function getSchemaRegistry() pure returns(address)
func (_EAS *EASCaller) GetSchemaRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "getSchemaRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSchemaRegistry is a free data retrieval call binding the contract method 0xf10b5cc8.
//
// Solidity: function getSchemaRegistry() pure returns(address)
func (_EAS *EASSession) GetSchemaRegistry() (common.Address, error) {
	return _EAS.Contract.GetSchemaRegistry(&_EAS.CallOpts)
}

// GetSchemaRegistry is a free data retrieval call binding the contract method 0xf10b5cc8.
//
// Solidity: function getSchemaRegistry() pure returns(address)
func (_EAS *EASCallerSession) GetSchemaRegistry() (common.Address, error) {
	return _EAS.Contract.GetSchemaRegistry(&_EAS.CallOpts)
}

// GetTimestamp is a free data retrieval call binding the contract method 0xd45c4435.
//
// Solidity: function getTimestamp(bytes32 data) view returns(uint64)
func (_EAS *EASCaller) GetTimestamp(opts *bind.CallOpts, data [32]byte) (uint64, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "getTimestamp", data)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetTimestamp is a free data retrieval call binding the contract method 0xd45c4435.
//
// Solidity: function getTimestamp(bytes32 data) view returns(uint64)
func (_EAS *EASSession) GetTimestamp(data [32]byte) (uint64, error) {
	return _EAS.Contract.GetTimestamp(&_EAS.CallOpts, data)
}

// GetTimestamp is a free data retrieval call binding the contract method 0xd45c4435.
//
// Solidity: function getTimestamp(bytes32 data) view returns(uint64)
func (_EAS *EASCallerSession) GetTimestamp(data [32]byte) (uint64, error) {
	return _EAS.Contract.GetTimestamp(&_EAS.CallOpts, data)
}

// IsAttestationValid is a free data retrieval call binding the contract method 0xe30bb563.
//
// Solidity: function isAttestationValid(bytes32 uid) view returns(bool)
func (_EAS *EASCaller) IsAttestationValid(opts *bind.CallOpts, uid [32]byte) (bool, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "isAttestationValid", uid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAttestationValid is a free data retrieval call binding the contract method 0xe30bb563.
//
// Solidity: function isAttestationValid(bytes32 uid) view returns(bool)
func (_EAS *EASSession) IsAttestationValid(uid [32]byte) (bool, error) {
	return _EAS.Contract.IsAttestationValid(&_EAS.CallOpts, uid)
}

// IsAttestationValid is a free data retrieval call binding the contract method 0xe30bb563.
//
// Solidity: function isAttestationValid(bytes32 uid) view returns(bool)
func (_EAS *EASCallerSession) IsAttestationValid(uid [32]byte) (bool, error) {
	return _EAS.Contract.IsAttestationValid(&_EAS.CallOpts, uid)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_EAS *EASCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _EAS.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_EAS *EASSession) Version() (string, error) {
	return _EAS.Contract.Version(&_EAS.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_EAS *EASCallerSession) Version() (string, error) {
	return _EAS.Contract.Version(&_EAS.CallOpts)
}

// Attest is a paid mutator transaction binding the contract method 0xf17325e7.
//
// Solidity: function attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)) request) payable returns(bytes32)
func (_EAS *EASTransactor) Attest(opts *bind.TransactOpts, request AttestationRequest) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "attest", request)
}

// Attest is a paid mutator transaction binding the contract method 0xf17325e7.
//
// Solidity: function attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)) request) payable returns(bytes32)
func (_EAS *EASSession) Attest(request AttestationRequest) (*types.Transaction, error) {
	return _EAS.Contract.Attest(&_EAS.TransactOpts, request)
}

// Attest is a paid mutator transaction binding the contract method 0xf17325e7.
//
// Solidity: function attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)) request) payable returns(bytes32)
func (_EAS *EASTransactorSession) Attest(request AttestationRequest) (*types.Transaction, error) {
	return _EAS.Contract.Attest(&_EAS.TransactOpts, request)
}

// AttestByDelegation is a paid mutator transaction binding the contract method 0x3c042715.
//
// Solidity: function attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64) delegatedRequest) payable returns(bytes32)
func (_EAS *EASTransactor) AttestByDelegation(opts *bind.TransactOpts, delegatedRequest DelegatedAttestationRequest) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "attestByDelegation", delegatedRequest)
}

// AttestByDelegation is a paid mutator transaction binding the contract method 0x3c042715.
//
// Solidity: function attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64) delegatedRequest) payable returns(bytes32)
func (_EAS *EASSession) AttestByDelegation(delegatedRequest DelegatedAttestationRequest) (*types.Transaction, error) {
	return _EAS.Contract.AttestByDelegation(&_EAS.TransactOpts, delegatedRequest)
}

// AttestByDelegation is a paid mutator transaction binding the contract method 0x3c042715.
//
// Solidity: function attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64) delegatedRequest) payable returns(bytes32)
func (_EAS *EASTransactorSession) AttestByDelegation(delegatedRequest DelegatedAttestationRequest) (*types.Transaction, error) {
	return _EAS.Contract.AttestByDelegation(&_EAS.TransactOpts, delegatedRequest)
}

// IncreaseNonce is a paid mutator transaction binding the contract method 0x79f7573a.
//
// Solidity: function increaseNonce(uint256 newNonce) returns()
func (_EAS *EASTransactor) IncreaseNonce(opts *bind.TransactOpts, newNonce *big.Int) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "increaseNonce", newNonce)
}

// IncreaseNonce is a paid mutator transaction binding the contract method 0x79f7573a.
//
// Solidity: function increaseNonce(uint256 newNonce) returns()
func (_EAS *EASSession) IncreaseNonce(newNonce *big.Int) (*types.Transaction, error) {
	return _EAS.Contract.IncreaseNonce(&_EAS.TransactOpts, newNonce)
}

// IncreaseNonce is a paid mutator transaction binding the contract method 0x79f7573a.
//
// Solidity: function increaseNonce(uint256 newNonce) returns()
func (_EAS *EASTransactorSession) IncreaseNonce(newNonce *big.Int) (*types.Transaction, error) {
	return _EAS.Contract.IncreaseNonce(&_EAS.TransactOpts, newNonce)
}

// MultiAttest is a paid mutator transaction binding the contract method 0x44adc90e.
//
// Solidity: function multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[] multiRequests) payable returns(bytes32[])
func (_EAS *EASTransactor) MultiAttest(opts *bind.TransactOpts, multiRequests []MultiAttestationRequest) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "multiAttest", multiRequests)
}

// MultiAttest is a paid mutator transaction binding the contract method 0x44adc90e.
//
// Solidity: function multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[] multiRequests) payable returns(bytes32[])
func (_EAS *EASSession) MultiAttest(multiRequests []MultiAttestationRequest) (*types.Transaction, error) {
	return _EAS.Contract.MultiAttest(&_EAS.TransactOpts, multiRequests)
}

// MultiAttest is a paid mutator transaction binding the contract method 0x44adc90e.
//
// Solidity: function multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[] multiRequests) payable returns(bytes32[])
func (_EAS *EASTransactorSession) MultiAttest(multiRequests []MultiAttestationRequest) (*types.Transaction, error) {
	return _EAS.Contract.MultiAttest(&_EAS.TransactOpts, multiRequests)
}

// MultiAttestByDelegation is a paid mutator transaction binding the contract method 0x95411525.
//
// Solidity: function multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[] multiDelegatedRequests) payable returns(bytes32[])
func (_EAS *EASTransactor) MultiAttestByDelegation(opts *bind.TransactOpts, multiDelegatedRequests []MultiDelegatedAttestationRequest) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "multiAttestByDelegation", multiDelegatedRequests)
}

// MultiAttestByDelegation is a paid mutator transaction binding the contract method 0x95411525.
//
// Solidity: function multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[] multiDelegatedRequests) payable returns(bytes32[])
func (_EAS *EASSession) MultiAttestByDelegation(multiDelegatedRequests []MultiDelegatedAttestationRequest) (*types.Transaction, error) {
	return _EAS.Contract.MultiAttestByDelegation(&_EAS.TransactOpts, multiDelegatedRequests)
}

// MultiAttestByDelegation is a paid mutator transaction binding the contract method 0x95411525.
//
// Solidity: function multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[] multiDelegatedRequests) payable returns(bytes32[])
func (_EAS *EASTransactorSession) MultiAttestByDelegation(multiDelegatedRequests []MultiDelegatedAttestationRequest) (*types.Transaction, error) {
	return _EAS.Contract.MultiAttestByDelegation(&_EAS.TransactOpts, multiDelegatedRequests)
}

// MultiRevoke is a paid mutator transaction binding the contract method 0x4cb7e9e5.
//
// Solidity: function multiRevoke((bytes32,(bytes32,uint256)[])[] multiRequests) payable returns()
func (_EAS *EASTransactor) MultiRevoke(opts *bind.TransactOpts, multiRequests []MultiRevocationRequest) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "multiRevoke", multiRequests)
}

// MultiRevoke is a paid mutator transaction binding the contract method 0x4cb7e9e5.
//
// Solidity: function multiRevoke((bytes32,(bytes32,uint256)[])[] multiRequests) payable returns()
func (_EAS *EASSession) MultiRevoke(multiRequests []MultiRevocationRequest) (*types.Transaction, error) {
	return _EAS.Contract.MultiRevoke(&_EAS.TransactOpts, multiRequests)
}

// MultiRevoke is a paid mutator transaction binding the contract method 0x4cb7e9e5.
//
// Solidity: function multiRevoke((bytes32,(bytes32,uint256)[])[] multiRequests) payable returns()
func (_EAS *EASTransactorSession) MultiRevoke(multiRequests []MultiRevocationRequest) (*types.Transaction, error) {
	return _EAS.Contract.MultiRevoke(&_EAS.TransactOpts, multiRequests)
}

// MultiRevokeByDelegation is a paid mutator transaction binding the contract method 0x0eabf660.
//
// Solidity: function multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[] multiDelegatedRequests) payable returns()
func (_EAS *EASTransactor) MultiRevokeByDelegation(opts *bind.TransactOpts, multiDelegatedRequests []MultiDelegatedRevocationRequest) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "multiRevokeByDelegation", multiDelegatedRequests)
}

// MultiRevokeByDelegation is a paid mutator transaction binding the contract method 0x0eabf660.
//
// Solidity: function multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[] multiDelegatedRequests) payable returns()
func (_EAS *EASSession) MultiRevokeByDelegation(multiDelegatedRequests []MultiDelegatedRevocationRequest) (*types.Transaction, error) {
	return _EAS.Contract.MultiRevokeByDelegation(&_EAS.TransactOpts, multiDelegatedRequests)
}

// MultiRevokeByDelegation is a paid mutator transaction binding the contract method 0x0eabf660.
//
// Solidity: function multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[] multiDelegatedRequests) payable returns()
func (_EAS *EASTransactorSession) MultiRevokeByDelegation(multiDelegatedRequests []MultiDelegatedRevocationRequest) (*types.Transaction, error) {
	return _EAS.Contract.MultiRevokeByDelegation(&_EAS.TransactOpts, multiDelegatedRequests)
}

// MultiRevokeOffchain is a paid mutator transaction binding the contract method 0x13893f61.
//
// Solidity: function multiRevokeOffchain(bytes32[] data) returns(uint64)
func (_EAS *EASTransactor) MultiRevokeOffchain(opts *bind.TransactOpts, data [][32]byte) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "multiRevokeOffchain", data)
}

// MultiRevokeOffchain is a paid mutator transaction binding the contract method 0x13893f61.
//
// Solidity: function multiRevokeOffchain(bytes32[] data) returns(uint64)
func (_EAS *EASSession) MultiRevokeOffchain(data [][32]byte) (*types.Transaction, error) {
	return _EAS.Contract.MultiRevokeOffchain(&_EAS.TransactOpts, data)
}

// MultiRevokeOffchain is a paid mutator transaction binding the contract method 0x13893f61.
//
// Solidity: function multiRevokeOffchain(bytes32[] data) returns(uint64)
func (_EAS *EASTransactorSession) MultiRevokeOffchain(data [][32]byte) (*types.Transaction, error) {
	return _EAS.Contract.MultiRevokeOffchain(&_EAS.TransactOpts, data)
}

// MultiTimestamp is a paid mutator transaction binding the contract method 0xe71ff365.
//
// Solidity: function multiTimestamp(bytes32[] data) returns(uint64)
func (_EAS *EASTransactor) MultiTimestamp(opts *bind.TransactOpts, data [][32]byte) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "multiTimestamp", data)
}

// MultiTimestamp is a paid mutator transaction binding the contract method 0xe71ff365.
//
// Solidity: function multiTimestamp(bytes32[] data) returns(uint64)
func (_EAS *EASSession) MultiTimestamp(data [][32]byte) (*types.Transaction, error) {
	return _EAS.Contract.MultiTimestamp(&_EAS.TransactOpts, data)
}

// MultiTimestamp is a paid mutator transaction binding the contract method 0xe71ff365.
//
// Solidity: function multiTimestamp(bytes32[] data) returns(uint64)
func (_EAS *EASTransactorSession) MultiTimestamp(data [][32]byte) (*types.Transaction, error) {
	return _EAS.Contract.MultiTimestamp(&_EAS.TransactOpts, data)
}

// Revoke is a paid mutator transaction binding the contract method 0x46926267.
//
// Solidity: function revoke((bytes32,(bytes32,uint256)) request) payable returns()
func (_EAS *EASTransactor) Revoke(opts *bind.TransactOpts, request RevocationRequest) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "revoke", request)
}

// Revoke is a paid mutator transaction binding the contract method 0x46926267.
//
// Solidity: function revoke((bytes32,(bytes32,uint256)) request) payable returns()
func (_EAS *EASSession) Revoke(request RevocationRequest) (*types.Transaction, error) {
	return _EAS.Contract.Revoke(&_EAS.TransactOpts, request)
}

// Revoke is a paid mutator transaction binding the contract method 0x46926267.
//
// Solidity: function revoke((bytes32,(bytes32,uint256)) request) payable returns()
func (_EAS *EASTransactorSession) Revoke(request RevocationRequest) (*types.Transaction, error) {
	return _EAS.Contract.Revoke(&_EAS.TransactOpts, request)
}

// RevokeByDelegation is a paid mutator transaction binding the contract method 0xa6d4dbc7.
//
// Solidity: function revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64) delegatedRequest) payable returns()
func (_EAS *EASTransactor) RevokeByDelegation(opts *bind.TransactOpts, delegatedRequest DelegatedRevocationRequest) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "revokeByDelegation", delegatedRequest)
}

// RevokeByDelegation is a paid mutator transaction binding the contract method 0xa6d4dbc7.
//
// Solidity: function revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64) delegatedRequest) payable returns()
func (_EAS *EASSession) RevokeByDelegation(delegatedRequest DelegatedRevocationRequest) (*types.Transaction, error) {
	return _EAS.Contract.RevokeByDelegation(&_EAS.TransactOpts, delegatedRequest)
}

// RevokeByDelegation is a paid mutator transaction binding the contract method 0xa6d4dbc7.
//
// Solidity: function revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64) delegatedRequest) payable returns()
func (_EAS *EASTransactorSession) RevokeByDelegation(delegatedRequest DelegatedRevocationRequest) (*types.Transaction, error) {
	return _EAS.Contract.RevokeByDelegation(&_EAS.TransactOpts, delegatedRequest)
}

// RevokeOffchain is a paid mutator transaction binding the contract method 0xcf190f34.
//
// Solidity: function revokeOffchain(bytes32 data) returns(uint64)
func (_EAS *EASTransactor) RevokeOffchain(opts *bind.TransactOpts, data [32]byte) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "revokeOffchain", data)
}

// RevokeOffchain is a paid mutator transaction binding the contract method 0xcf190f34.
//
// Solidity: function revokeOffchain(bytes32 data) returns(uint64)
func (_EAS *EASSession) RevokeOffchain(data [32]byte) (*types.Transaction, error) {
	return _EAS.Contract.RevokeOffchain(&_EAS.TransactOpts, data)
}

// RevokeOffchain is a paid mutator transaction binding the contract method 0xcf190f34.
//
// Solidity: function revokeOffchain(bytes32 data) returns(uint64)
func (_EAS *EASTransactorSession) RevokeOffchain(data [32]byte) (*types.Transaction, error) {
	return _EAS.Contract.RevokeOffchain(&_EAS.TransactOpts, data)
}

// Timestamp is a paid mutator transaction binding the contract method 0x4d003070.
//
// Solidity: function timestamp(bytes32 data) returns(uint64)
func (_EAS *EASTransactor) Timestamp(opts *bind.TransactOpts, data [32]byte) (*types.Transaction, error) {
	return _EAS.contract.Transact(opts, "timestamp", data)
}

// Timestamp is a paid mutator transaction binding the contract method 0x4d003070.
//
// Solidity: function timestamp(bytes32 data) returns(uint64)
func (_EAS *EASSession) Timestamp(data [32]byte) (*types.Transaction, error) {
	return _EAS.Contract.Timestamp(&_EAS.TransactOpts, data)
}

// Timestamp is a paid mutator transaction binding the contract method 0x4d003070.
//
// Solidity: function timestamp(bytes32 data) returns(uint64)
func (_EAS *EASTransactorSession) Timestamp(data [32]byte) (*types.Transaction, error) {
	return _EAS.Contract.Timestamp(&_EAS.TransactOpts, data)
}

// EASAttestedIterator is returned from FilterAttested and is used to iterate over the raw logs and unpacked data for Attested events raised by the EAS contract.
type EASAttestedIterator struct {
	Event *EASAttested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EASAttestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EASAttested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EASAttested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EASAttestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EASAttestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EASAttested represents a Attested event raised by the EAS contract.
type EASAttested struct {
	Recipient common.Address
	Attester  common.Address
	Uid       [32]byte
	SchemaUID [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAttested is a free log retrieval operation binding the contract event 0x8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b35.
//
// Solidity: event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID)
func (_EAS *EASFilterer) FilterAttested(opts *bind.FilterOpts, recipient []common.Address, attester []common.Address, schemaUID [][32]byte) (*EASAttestedIterator, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}
	var attesterRule []interface{}
	for _, attesterItem := range attester {
		attesterRule = append(attesterRule, attesterItem)
	}

	var schemaUIDRule []interface{}
	for _, schemaUIDItem := range schemaUID {
		schemaUIDRule = append(schemaUIDRule, schemaUIDItem)
	}

	logs, sub, err := _EAS.contract.FilterLogs(opts, "Attested", recipientRule, attesterRule, schemaUIDRule)
	if err != nil {
		return nil, err
	}
	return &EASAttestedIterator{contract: _EAS.contract, event: "Attested", logs: logs, sub: sub}, nil
}

// WatchAttested is a free log subscription operation binding the contract event 0x8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b35.
//
// Solidity: event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID)
func (_EAS *EASFilterer) WatchAttested(opts *bind.WatchOpts, sink chan<- *EASAttested, recipient []common.Address, attester []common.Address, schemaUID [][32]byte) (event.Subscription, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}
	var attesterRule []interface{}
	for _, attesterItem := range attester {
		attesterRule = append(attesterRule, attesterItem)
	}

	var schemaUIDRule []interface{}
	for _, schemaUIDItem := range schemaUID {
		schemaUIDRule = append(schemaUIDRule, schemaUIDItem)
	}

	logs, sub, err := _EAS.contract.WatchLogs(opts, "Attested", recipientRule, attesterRule, schemaUIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EASAttested)
				if err := _EAS.contract.UnpackLog(event, "Attested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAttested is a log parse operation binding the contract event 0x8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b35.
//
// Solidity: event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID)
func (_EAS *EASFilterer) ParseAttested(log types.Log) (*EASAttested, error) {
	event := new(EASAttested)
	if err := _EAS.contract.UnpackLog(event, "Attested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EASEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the EAS contract.
type EASEIP712DomainChangedIterator struct {
	Event *EASEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EASEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EASEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EASEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EASEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EASEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EASEIP712DomainChanged represents a EIP712DomainChanged event raised by the EAS contract.
type EASEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_EAS *EASFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*EASEIP712DomainChangedIterator, error) {

	logs, sub, err := _EAS.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &EASEIP712DomainChangedIterator{contract: _EAS.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_EAS *EASFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *EASEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _EAS.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EASEIP712DomainChanged)
				if err := _EAS.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_EAS *EASFilterer) ParseEIP712DomainChanged(log types.Log) (*EASEIP712DomainChanged, error) {
	event := new(EASEIP712DomainChanged)
	if err := _EAS.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EASNonceIncreasedIterator is returned from FilterNonceIncreased and is used to iterate over the raw logs and unpacked data for NonceIncreased events raised by the EAS contract.
type EASNonceIncreasedIterator struct {
	Event *EASNonceIncreased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EASNonceIncreasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EASNonceIncreased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EASNonceIncreased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EASNonceIncreasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EASNonceIncreasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EASNonceIncreased represents a NonceIncreased event raised by the EAS contract.
type EASNonceIncreased struct {
	OldNonce *big.Int
	NewNonce *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNonceIncreased is a free log retrieval operation binding the contract event 0x57b09af877df9068fd60a69d7b21f5576b8b38955812d6ae4ac52942f1e38fb7.
//
// Solidity: event NonceIncreased(uint256 oldNonce, uint256 newNonce)
func (_EAS *EASFilterer) FilterNonceIncreased(opts *bind.FilterOpts) (*EASNonceIncreasedIterator, error) {

	logs, sub, err := _EAS.contract.FilterLogs(opts, "NonceIncreased")
	if err != nil {
		return nil, err
	}
	return &EASNonceIncreasedIterator{contract: _EAS.contract, event: "NonceIncreased", logs: logs, sub: sub}, nil
}

// WatchNonceIncreased is a free log subscription operation binding the contract event 0x57b09af877df9068fd60a69d7b21f5576b8b38955812d6ae4ac52942f1e38fb7.
//
// Solidity: event NonceIncreased(uint256 oldNonce, uint256 newNonce)
func (_EAS *EASFilterer) WatchNonceIncreased(opts *bind.WatchOpts, sink chan<- *EASNonceIncreased) (event.Subscription, error) {

	logs, sub, err := _EAS.contract.WatchLogs(opts, "NonceIncreased")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EASNonceIncreased)
				if err := _EAS.contract.UnpackLog(event, "NonceIncreased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNonceIncreased is a log parse operation binding the contract event 0x57b09af877df9068fd60a69d7b21f5576b8b38955812d6ae4ac52942f1e38fb7.
//
// Solidity: event NonceIncreased(uint256 oldNonce, uint256 newNonce)
func (_EAS *EASFilterer) ParseNonceIncreased(log types.Log) (*EASNonceIncreased, error) {
	event := new(EASNonceIncreased)
	if err := _EAS.contract.UnpackLog(event, "NonceIncreased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EASRevokedIterator is returned from FilterRevoked and is used to iterate over the raw logs and unpacked data for Revoked events raised by the EAS contract.
type EASRevokedIterator struct {
	Event *EASRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EASRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EASRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EASRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EASRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EASRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EASRevoked represents a Revoked event raised by the EAS contract.
type EASRevoked struct {
	Recipient common.Address
	Attester  common.Address
	Uid       [32]byte
	SchemaUID [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRevoked is a free log retrieval operation binding the contract event 0xf930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f615.
//
// Solidity: event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID)
func (_EAS *EASFilterer) FilterRevoked(opts *bind.FilterOpts, recipient []common.Address, attester []common.Address, schemaUID [][32]byte) (*EASRevokedIterator, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}
	var attesterRule []interface{}
	for _, attesterItem := range attester {
		attesterRule = append(attesterRule, attesterItem)
	}

	var schemaUIDRule []interface{}
	for _, schemaUIDItem := range schemaUID {
		schemaUIDRule = append(schemaUIDRule, schemaUIDItem)
	}

	logs, sub, err := _EAS.contract.FilterLogs(opts, "Revoked", recipientRule, attesterRule, schemaUIDRule)
	if err != nil {
		return nil, err
	}
	return &EASRevokedIterator{contract: _EAS.contract, event: "Revoked", logs: logs, sub: sub}, nil
}

// WatchRevoked is a free log subscription operation binding the contract event 0xf930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f615.
//
// Solidity: event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID)
func (_EAS *EASFilterer) WatchRevoked(opts *bind.WatchOpts, sink chan<- *EASRevoked, recipient []common.Address, attester []common.Address, schemaUID [][32]byte) (event.Subscription, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}
	var attesterRule []interface{}
	for _, attesterItem := range attester {
		attesterRule = append(attesterRule, attesterItem)
	}

	var schemaUIDRule []interface{}
	for _, schemaUIDItem := range schemaUID {
		schemaUIDRule = append(schemaUIDRule, schemaUIDItem)
	}

	logs, sub, err := _EAS.contract.WatchLogs(opts, "Revoked", recipientRule, attesterRule, schemaUIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EASRevoked)
				if err := _EAS.contract.UnpackLog(event, "Revoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevoked is a log parse operation binding the contract event 0xf930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f615.
//
// Solidity: event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID)
func (_EAS *EASFilterer) ParseRevoked(log types.Log) (*EASRevoked, error) {
	event := new(EASRevoked)
	if err := _EAS.contract.UnpackLog(event, "Revoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EASRevokedOffchainIterator is returned from FilterRevokedOffchain and is used to iterate over the raw logs and unpacked data for RevokedOffchain events raised by the EAS contract.
type EASRevokedOffchainIterator struct {
	Event *EASRevokedOffchain // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EASRevokedOffchainIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EASRevokedOffchain)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EASRevokedOffchain)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EASRevokedOffchainIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EASRevokedOffchainIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EASRevokedOffchain represents a RevokedOffchain event raised by the EAS contract.
type EASRevokedOffchain struct {
	Revoker   common.Address
	Data      [32]byte
	Timestamp uint64
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRevokedOffchain is a free log retrieval operation binding the contract event 0x92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a2229.
//
// Solidity: event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp)
func (_EAS *EASFilterer) FilterRevokedOffchain(opts *bind.FilterOpts, revoker []common.Address, data [][32]byte, timestamp []uint64) (*EASRevokedOffchainIterator, error) {

	var revokerRule []interface{}
	for _, revokerItem := range revoker {
		revokerRule = append(revokerRule, revokerItem)
	}
	var dataRule []interface{}
	for _, dataItem := range data {
		dataRule = append(dataRule, dataItem)
	}
	var timestampRule []interface{}
	for _, timestampItem := range timestamp {
		timestampRule = append(timestampRule, timestampItem)
	}

	logs, sub, err := _EAS.contract.FilterLogs(opts, "RevokedOffchain", revokerRule, dataRule, timestampRule)
	if err != nil {
		return nil, err
	}
	return &EASRevokedOffchainIterator{contract: _EAS.contract, event: "RevokedOffchain", logs: logs, sub: sub}, nil
}

// WatchRevokedOffchain is a free log subscription operation binding the contract event 0x92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a2229.
//
// Solidity: event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp)
func (_EAS *EASFilterer) WatchRevokedOffchain(opts *bind.WatchOpts, sink chan<- *EASRevokedOffchain, revoker []common.Address, data [][32]byte, timestamp []uint64) (event.Subscription, error) {

	var revokerRule []interface{}
	for _, revokerItem := range revoker {
		revokerRule = append(revokerRule, revokerItem)
	}
	var dataRule []interface{}
	for _, dataItem := range data {
		dataRule = append(dataRule, dataItem)
	}
	var timestampRule []interface{}
	for _, timestampItem := range timestamp {
		timestampRule = append(timestampRule, timestampItem)
	}

	logs, sub, err := _EAS.contract.WatchLogs(opts, "RevokedOffchain", revokerRule, dataRule, timestampRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EASRevokedOffchain)
				if err := _EAS.contract.UnpackLog(event, "RevokedOffchain", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevokedOffchain is a log parse operation binding the contract event 0x92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a2229.
//
// Solidity: event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp)
func (_EAS *EASFilterer) ParseRevokedOffchain(log types.Log) (*EASRevokedOffchain, error) {
	event := new(EASRevokedOffchain)
	if err := _EAS.contract.UnpackLog(event, "RevokedOffchain", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EASTimestampedIterator is returned from FilterTimestamped and is used to iterate over the raw logs and unpacked data for Timestamped events raised by the EAS contract.
type EASTimestampedIterator struct {
	Event *EASTimestamped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EASTimestampedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EASTimestamped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EASTimestamped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EASTimestampedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EASTimestampedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EASTimestamped represents a Timestamped event raised by the EAS contract.
type EASTimestamped struct {
	Data      [32]byte
	Timestamp uint64
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTimestamped is a free log retrieval operation binding the contract event 0x5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f.
//
// Solidity: event Timestamped(bytes32 indexed data, uint64 indexed timestamp)
func (_EAS *EASFilterer) FilterTimestamped(opts *bind.FilterOpts, data [][32]byte, timestamp []uint64) (*EASTimestampedIterator, error) {

	var dataRule []interface{}
	for _, dataItem := range data {
		dataRule = append(dataRule, dataItem)
	}
	var timestampRule []interface{}
	for _, timestampItem := range timestamp {
		timestampRule = append(timestampRule, timestampItem)
	}

	logs, sub, err := _EAS.contract.FilterLogs(opts, "Timestamped", dataRule, timestampRule)
	if err != nil {
		return nil, err
	}
	return &EASTimestampedIterator{contract: _EAS.contract, event: "Timestamped", logs: logs, sub: sub}, nil
}

// WatchTimestamped is a free log subscription operation binding the contract event 0x5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f.
//
// Solidity: event Timestamped(bytes32 indexed data, uint64 indexed timestamp)
func (_EAS *EASFilterer) WatchTimestamped(opts *bind.WatchOpts, sink chan<- *EASTimestamped, data [][32]byte, timestamp []uint64) (event.Subscription, error) {

	var dataRule []interface{}
	for _, dataItem := range data {
		dataRule = append(dataRule, dataItem)
	}
	var timestampRule []interface{}
	for _, timestampItem := range timestamp {
		timestampRule = append(timestampRule, timestampItem)
	}

	logs, sub, err := _EAS.contract.WatchLogs(opts, "Timestamped", dataRule, timestampRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EASTimestamped)
				if err := _EAS.contract.UnpackLog(event, "Timestamped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTimestamped is a log parse operation binding the contract event 0x5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f.
//
// Solidity: event Timestamped(bytes32 indexed data, uint64 indexed timestamp)
func (_EAS *EASFilterer) ParseTimestamped(log types.Log) (*EASTimestamped, error) {
	event := new(EASTimestamped)
	if err := _EAS.contract.UnpackLog(event, "Timestamped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
