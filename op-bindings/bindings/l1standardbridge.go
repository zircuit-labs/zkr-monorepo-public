// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/zircuit-labs/l2-geth-public"
	"github.com/zircuit-labs/l2-geth-public/accounts/abi"
	"github.com/zircuit-labs/l2-geth-public/accounts/abi/bind"
	"github.com/zircuit-labs/l2-geth-public/common"
	"github.com/zircuit-labs/l2-geth-public/core/types"
	"github.com/zircuit-labs/l2-geth-public/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// L1StandardBridgeMetaData contains all meta data concerning the L1StandardBridge contract.
var L1StandardBridgeMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"MESSENGER\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractCrossDomainMessenger\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"OTHER_BRIDGE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractStandardBridge\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"accessController\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractAccessControlPausable\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"bridgeERC20\",\"inputs\":[{\"name\":\"_localToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_remoteToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_minGasLimit\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"_extraData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"bridgeERC20To\",\"inputs\":[{\"name\":\"_localToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_remoteToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_minGasLimit\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"_extraData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"bridgeETH\",\"inputs\":[{\"name\":\"_minGasLimit\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"_extraData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"bridgeETHTo\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_minGasLimit\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"_extraData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"deposits\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"erc20ThrottleDeposits\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"maxAmountPerPeriod\",\"type\":\"uint208\",\"internalType\":\"uint208\"},{\"name\":\"periodLength\",\"type\":\"uint48\",\"internalType\":\"uint48\"},{\"name\":\"maxAmountTotal\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"erc20ThrottleWithdrawals\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"maxAmountPerPeriod\",\"type\":\"uint208\",\"internalType\":\"uint208\"},{\"name\":\"periodLength\",\"type\":\"uint48\",\"internalType\":\"uint48\"},{\"name\":\"maxAmountTotal\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ethThrottleDeposits\",\"inputs\":[],\"outputs\":[{\"name\":\"maxAmountPerPeriod\",\"type\":\"uint208\",\"internalType\":\"uint208\"},{\"name\":\"periodLength\",\"type\":\"uint48\",\"internalType\":\"uint48\"},{\"name\":\"maxAmountTotal\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"finalizeBridgeERC20\",\"inputs\":[{\"name\":\"_localToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_remoteToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"finalizeBridgeETH\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"getERC20ThrottleDepositsCredits\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"user\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"availableCredits\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getERC20ThrottleWithdrawalsCredits\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"availableCredits\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getEthThrottleDepositsCredits\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"availableCredits\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_messenger\",\"type\":\"address\",\"internalType\":\"contractCrossDomainMessenger\"},{\"name\":\"_superchainConfig\",\"type\":\"address\",\"internalType\":\"contractSuperchainConfig\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"messenger\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractCrossDomainMessenger\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"otherBridge\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractStandardBridge\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setErc20ThrottleDepositsMaxAmount\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"maxAmountPerPeriod\",\"type\":\"uint208\",\"internalType\":\"uint208\"},{\"name\":\"maxAmountTotal\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setErc20ThrottleDepositsPeriodLength\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_periodLength\",\"type\":\"uint48\",\"internalType\":\"uint48\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setErc20ThrottleWithdrawalsMaxAmount\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"maxAmountPerPeriod\",\"type\":\"uint208\",\"internalType\":\"uint208\"},{\"name\":\"maxAmountTotal\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setErc20ThrottleWithdrawalsPeriodLength\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_periodLength\",\"type\":\"uint48\",\"internalType\":\"uint48\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setEthThrottleDepositsMaxAmount\",\"inputs\":[{\"name\":\"maxAmountPerPeriod\",\"type\":\"uint208\",\"internalType\":\"uint208\"},{\"name\":\"maxAmountTotal\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setEthThrottleDepositsPeriodLength\",\"inputs\":[{\"name\":\"_periodLength\",\"type\":\"uint48\",\"internalType\":\"uint48\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"superchainConfig\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractSuperchainConfig\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"ERC20BridgeFinalized\",\"inputs\":[{\"name\":\"localToken\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"remoteToken\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ERC20BridgeInitiated\",\"inputs\":[{\"name\":\"localToken\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"remoteToken\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ETHBridgeFinalized\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ETHBridgeInitiated\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AddressEmptyCode\",\"inputs\":[{\"name\":\"target\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"AddressInsufficientBalance\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"FailedInnerCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SafeERC20FailedOperation\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}]}]",
	Bin: "0x60806040523480156200001157600080fd5b506200001f60008062000025565b620001c4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff1615906001600160401b0316600081158015620000705750825b90506000826001600160401b031660011480156200008d5750303b155b9050811580156200009c575080155b15620000bb5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315620000ea57845460ff60401b1916680100000000000000001785555b600180546001600160a01b038981166001600160a01b03199283161790925560028054734200000000000000000000000000000000000010908316179055600380549289169290911691909117905583156200018757845460ff60401b191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906200017e90600190620001b4565b60405180910390a15b50505050505050565b60006001600160401b0382165b92915050565b620001ae8162000190565b82525050565b602081016200019d8284620001a3565b612aab80620001d46000396000f3fe6080604052600436106101bb5760003560e01c80635c975abb116100ec578063c89701a21161008a578063da69d9ff11610064578063da69d9ff14610595578063e11013dd146105b5578063f7e70da7146105c8578063f8e74c19146105e857600080fd5b8063c89701a214610535578063cddbd4b914610555578063d5d6ba331461057557600080fd5b806387087623116100c657806387087623146104a25780638f601f66146104c2578063927ede2d146104f7578063bc43cbaf1461051557600080fd5b80635c975abb146104425780636b296604146104645780637f46ddb21461048457600080fd5b80632b9cd45c116101595780633cb747bf116101335780633cb747bf146103a4578063485cc955146103c4578063540abf73146103e457806354fd4d501461040457600080fd5b80632b9cd45c14610327578063325bd0581461035d57806335e80ab31461037d57600080fd5b8063134bf4de11610195578063134bf4de146102765780631635f5fd146102965780631b486feb146102a95780631d4e6ded146102c957600080fd5b80630166a07a1461020d578063058984b51461022d57806309fc88431461026357600080fd5b3661020857333b156101e85760405162461bcd60e51b81526004016101df90611bc3565b60405180910390fd5b610206333362030d4060405180602001604052806000815250610637565b005b600080fd5b34801561021957600080fd5b50610206610228366004611c66565b61064a565b34801561023957600080fd5b5061024d610248366004611d11565b610875565b60405161025a9190611d3a565b60405180910390f35b610206610271366004611d5f565b610888565b34801561028257600080fd5b5061024d610291366004611dbb565b6108ef565b6102066102a4366004611df8565b610919565b3480156102b557600080fd5b506102066102c4366004611e95565b610aea565b3480156102d557600080fd5b506103186102e4366004611d11565b603d60205260009081526040902080546002909101546001600160d01b03821691600160d01b900465ffffffffffff169083565b60405161025a93929190611ee5565b34801561033357600080fd5b50603154603354610318916001600160d01b03811691600160d01b90910465ffffffffffff169083565b34801561036957600080fd5b50610206610378366004611f0d565b610b3b565b34801561038957600080fd5b506003546001600160a01b03165b60405161025a9190611f4d565b3480156103b057600080fd5b50600154610397906001600160a01b031681565b3480156103d057600080fd5b506102066103df366004611f6f565b610b49565b3480156103f057600080fd5b506102066103ff366004611fa2565b610c97565b34801561041057600080fd5b50610435604051806040016040528060058152602001640322e312e360dc1b81525081565b60405161025a9190612066565b34801561044e57600080fd5b50610457610cdc565b60405161025a919061207f565b34801561047057600080fd5b5061020661047f3660046120a7565b610d4f565b34801561049057600080fd5b506002546001600160a01b0316610397565b3480156104ae57600080fd5b506102066104bd3660046120da565b610d79565b3480156104ce57600080fd5b5061024d6104dd366004611dbb565b600060208181529281526040808220909352908152205481565b34801561050357600080fd5b506001546001600160a01b0316610397565b34801561052157600080fd5b50600354610397906001600160a01b031681565b34801561054157600080fd5b50600254610397906001600160a01b031681565b34801561056157600080fd5b50610206610570366004611e95565b610ddd565b34801561058157600080fd5b5061024d610590366004611d11565b610e2a565b3480156105a157600080fd5b506102066105b0366004612170565b610e4d565b6102066105c33660046121c0565b610eba565b3480156105d457600080fd5b506102066105e3366004612170565b610efd565b3480156105f457600080fd5b50610318610603366004611d11565b603e60205260009081526040902080546002909101546001600160d01b03821691600160d01b900465ffffffffffff169083565b6106448484348585610f4c565b50505050565b6001546001600160a01b0316331480156106df575060025460015460408051636e296e4560e01b815290516001600160a01b039384169390921691636e296e45916004808201926020929091908290030181865afa1580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190612239565b6001600160a01b0316145b6106fb5760405162461bcd60e51b81526004016101df906122c1565b610703610cdc565b156107205760405162461bcd60e51b81526004016101df906122d1565b61072b85888561103f565b610734876110ca565b156107c45761074387876110dd565b61075f5760405162461bcd60e51b81526004016101df90612372565b6040516340c10f1960e01b81526001600160a01b038816906340c10f199061078d908790879060040161238b565b600060405180830381600087803b1580156107a757600080fd5b505af11580156107bb573d6000803e3d6000fd5b50505050610828565b6001600160a01b03808816600090815260208181526040808320938a16835292905220546107f39084906123bc565b6001600160a01b03808916600081815260208181526040808320948c168352939052919091209190915561082890858561115d565b61086c878787878787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111b592505050565b50505050505050565b6000610882826031611216565b92915050565b333b156108a75760405162461bcd60e51b81526004016101df90611bc3565b6108ea3333348686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f4c92505050565b505050565b6001600160a01b0382166000908152603d60205260408120610912908390611216565b9392505050565b6001546001600160a01b0316331480156109ae575060025460015460408051636e296e4560e01b815290516001600160a01b039384169390921691636e296e45916004808201926020929091908290030181865afa15801561097f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a39190612239565b6001600160a01b0316145b6109ca5760405162461bcd60e51b81526004016101df906122c1565b6109d2610cdc565b156109ef5760405162461bcd60e51b81526004016101df906122d1565b823414610a0e5760405162461bcd60e51b81526004016101df90612429565b306001600160a01b03851603610a365760405162461bcd60e51b81526004016101df90612479565b6001546001600160a01b0390811690851603610a645760405162461bcd60e51b81526004016101df906124ce565b610aa685858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112c392505050565b6000610ac3855a8660405180602001604052806000815250611316565b905080610ae25760405162461bcd60e51b81526004016101df9061251e565b505050505050565b816001600160a01b03163b600003610b145760405162461bcd60e51b81526004016101df9061256c565b6001600160a01b0382166000908152603d60205260409020610b37908290611332565b5050565b610b46816031611332565b50565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610b8f5750825b905060008267ffffffffffffffff166001148015610bac5750303b155b905081158015610bba575080155b15610bd85760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610c0257845460ff60401b1916600160401b1785555b600180546001600160a01b038981166001600160a01b031992831617909255600280546010602160991b019083161790556003805492891692909116919091179055831561086c57845460ff60401b191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290610c8690600190612597565b60405180910390a150505050505050565b61086c87873388888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061138892505050565b60035460408051635c975abb60e01b815290516000926001600160a01b031691635c975abb9160048083019260209291908290030181865afa158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a91906125b8565b905090565b8015610d6d5760405162461bcd60e51b81526004016101df90612624565b610b3782826031611563565b333b15610d985760405162461bcd60e51b81526004016101df90611bc3565b610ae286863333888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061138892505050565b816001600160a01b03163b600003610e075760405162461bcd60e51b81526004016101df9061256c565b6001600160a01b0382166000908152603e60205260409020610b37908290611332565b6001600160a01b0381166000908152603e60205260408120610882908290611216565b826001600160a01b03163b600003610e775760405162461bcd60e51b81526004016101df9061256c565b8015610e955760405162461bcd60e51b81526004016101df90612624565b6001600160a01b0383166000908152603e602052604090206108ea9083908390611563565b6106443385348686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f4c92505050565b826001600160a01b03163b600003610f275760405162461bcd60e51b81526004016101df9061256c565b6001600160a01b0383166000908152603d602052604090206108ea9083908390611563565b823414610f6b5760405162461bcd60e51b81526004016101df9061268e565b610f75858461160a565b610f8185858584611620565b6001546002546040516001600160a01b0392831692633dbb202b928792911690631635f5fd60e01b90610fbe908b908b9086908a9060240161269e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b9092168252611006929188906004016126e4565b6000604051808303818588803b15801561101f57600080fd5b505af1158015611033573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b0382166000818152603e602052604080822090516370a0823160e01b815290926106449284929091906370a0823190611083903090600401612713565b602060405180830381865afa1580156110a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c4919061272c565b85611665565b60006108828263ec4fc8e360e01b611765565b6000826001600160a01b031663d6c0b2c46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561111d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111419190612239565b6001600160a01b0316826001600160a01b031614905092915050565b6108ea83846001600160a01b031663a9059cbb858560405160240161118392919061238b565b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611781565b836001600160a01b0316856001600160a01b0316876001600160a01b03167fd59c65b35445225835c83f50b6ede06a7be047d22e357073e250d9af537518cd8686866040516112069392919061274d565b60405180910390a4505050505050565b80546000906001600160d01b031680820361123657600019915050610882565b82546001600160a01b0385166000908152600185016020526040812080546001600160d01b038116955065ffffffffffff600160d01b94859004811694929392611282920416426123bc565b905065ffffffffffff83166112978286612783565b6112a191906127b8565b6112ab90866127cc565b9450838511156112b9578394505b5050505092915050565b826001600160a01b0316846001600160a01b03167f31b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83d84846040516113089291906127df565b60405180910390a350505050565b600080600080845160208601878a8af19150505b949350505050565b61133b336117db565b8165ffffffffffff166000036113635760405162461bcd60e51b81526004016101df90612847565b805465ffffffffffff909216600160d01b026001600160d01b03909216919091179055565b611393858885611868565b61139c876110ca565b1561142c576113ab87876110dd565b6113c75760405162461bcd60e51b81526004016101df90612372565b604051632770a7eb60e21b81526001600160a01b03881690639dc29fac906113f5908890879060040161238b565b600060405180830381600087803b15801561140f57600080fd5b505af1158015611423573d6000803e3d6000fd5b50505050611495565b6114416001600160a01b0388168630866118ac565b6001600160a01b03808816600090815260208181526040808320938a16835292905220546114709084906127cc565b6001600160a01b03808916600090815260208181526040808320938b16835292905220555b6114a38787878787866118d4565b6001546002546040516001600160a01b0392831692633dbb202b92169062b3503d60e11b906114e0908b908d908c908c908c908b90602401612857565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e085901b9092168252611528929187906004016126e4565b600060405180830381600087803b15801561154257600080fd5b505af1158015611556573d6000803e3d6000fd5b5050505050505050505050565b805460028201546001600160d01b0391821691851682108015906115875750808411155b1561159a5761159533611925565b6115a3565b6115a3336117db565b6001600160d01b038516158015906115c957508254600160d01b900465ffffffffffff16155b156115e25782546001600160d01b031660e160d41b1783555b505080546001600160d01b0319166001600160d01b0393909316929092178255600290910155565b610b3760318361161a84476123bc565b84611665565b826001600160a01b0316846001600160a01b03167f2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af584846040516113089291906127df565b835460028501546001600160d01b0390911690801580159061168f57508061168d84866127cc565b115b156116ac5760405162461bcd60e51b81526004016101df90612911565b816000036116bb575050610644565b6001600160a01b038516600090815260018701602052604090208654815465ffffffffffff600160d01b928390048116926001600160d01b0383169204164203828682028161170c5761170c6127a2565b04820191508582111561171d578591505b8187111561173d5760405162461bcd60e51b81526004016101df90612973565b50949094036001600160d01b0316600160d01b4265ffffffffffff1602179055505050505050565b6000611770836119b2565b8015610912575061091283836119e5565b60006117966001600160a01b03841683611a68565b905080516000141580156117bb5750808060200190518101906117b991906125b8565b155b156108ea5782604051635274afe760e01b81526004016101df9190612713565b60035460405163ee2a6b8760e01b81526001600160a01b039091169063ee2a6b879061180b908490600401612713565b602060405180830381865afa158015611828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184c91906125b8565b610b465760405162461bcd60e51b81526004016101df906129cc565b6001600160a01b0382166000818152603d60205260409081902090516370a0823160e01b8152909161064491839187916370a0823190611083903090600401612713565b61064484856001600160a01b03166323b872dd868686604051602401611183939291906129dc565b836001600160a01b0316856001600160a01b0316876001600160a01b03167f7ff126db8024424bbfd9826e8ab82ff59136289ea440b04b39a0df1b03b9cabf8686866040516112069392919061274d565b600354604051631239bc9960e11b81526001600160a01b0390911690632473793290611955908490600401612713565b602060405180830381865afa158015611972573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199691906125b8565b610b465760405162461bcd60e51b81526004016101df90612a42565b60006119c5826301ffc9a760e01b6119e5565b801561088257506119de826001600160e01b03196119e5565b1592915050565b600080826040516024016119f99190612a62565b60408051601f19818403018152919052602080820180516001600160e01b03166301ffc9a760e01b178152825192935060009283928392909183918a617530fa92503d91506000519050828015611a51575060208210155b8015611a5d5750600081115b979650505050505050565b60606109128383600084600080856001600160a01b03168486604051611a8e9190612a92565b60006040518083038185875af1925050503d8060008114611acb576040519150601f19603f3d011682016040523d82523d6000602084013e611ad0565b606091505b5091509150611ae0868383611aea565b9695505050505050565b606082611aff57611afa82611b3d565b610912565b8151158015611b1657506001600160a01b0384163b155b15611b365783604051639996b31560e01b81526004016101df9190612713565b5080610912565b805115611b4d5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b603781526000602082017f5374616e646172644272696467653a2066756e6374696f6e2063616e206f6e6c81527f792062652063616c6c65642066726f6d20616e20454f41000000000000000000602082015291505b5060400190565b6020808252810161088281611b66565b60006001600160a01b038216610882565b611bed81611bd3565b8114610b4657600080fd5b803561088281611be4565b80611bed565b803561088281611c03565b60008083601f840112611c2957611c29600080fd5b50813567ffffffffffffffff811115611c4457611c44600080fd5b602083019150836001820283011115611c5f57611c5f600080fd5b9250929050565b600080600080600080600060c0888a031215611c8457611c84600080fd5b6000611c908a8a611bf8565b9750506020611ca18a828b01611bf8565b9650506040611cb28a828b01611bf8565b9550506060611cc38a828b01611bf8565b9450506080611cd48a828b01611c09565b93505060a088013567ffffffffffffffff811115611cf457611cf4600080fd5b611d008a828b01611c14565b925092505092959891949750929550565b600060208284031215611d2657611d26600080fd5b600061132a8484611bf8565b805b82525050565b602081016108828284611d32565b63ffffffff8116611bed565b803561088281611d48565b600080600060408486031215611d7757611d77600080fd5b6000611d838686611d54565b935050602084013567ffffffffffffffff811115611da357611da3600080fd5b611daf86828701611c14565b92509250509250925092565b60008060408385031215611dd157611dd1600080fd5b6000611ddd8585611bf8565b9250506020611dee85828601611bf8565b9150509250929050565b600080600080600060808688031215611e1357611e13600080fd5b6000611e1f8888611bf8565b9550506020611e3088828901611bf8565b9450506040611e4188828901611c09565b935050606086013567ffffffffffffffff811115611e6157611e61600080fd5b611e6d88828901611c14565b92509250509295509295909350565b65ffffffffffff8116611bed565b803561088281611e7c565b60008060408385031215611eab57611eab600080fd5b6000611eb78585611bf8565b9250506020611dee85828601611e8a565b6001600160d01b038116611d34565b65ffffffffffff8116611d34565b60608101611ef38286611ec8565b611f006020830185611ed7565b61132a6040830184611d32565b600060208284031215611f2257611f22600080fd5b600061132a8484611e8a565b600061088282611bd3565b600061088282611f2e565b611d3481611f39565b602081016108828284611f44565b611bed81611f2e565b803561088281611f5b565b60008060408385031215611f8557611f85600080fd5b6000611f918585611f64565b9250506020611dee85828601611f64565b600080600080600080600060c0888a031215611fc057611fc0600080fd5b6000611fcc8a8a611bf8565b9750506020611fdd8a828b01611bf8565b9650506040611fee8a828b01611bf8565b9550506060611fff8a828b01611c09565b9450506080611cd48a828b01611d54565b60005b8381101561202b578181015183820152602001612013565b50506000910152565b600061203e825190565b808452602084019350612055818560208601612010565b601f01601f19169290920192915050565b602080825281016109128184612034565b801515611d34565b602081016108828284612077565b6001600160d01b038116611bed565b80356108828161208d565b600080604083850312156120bd576120bd600080fd5b60006120c9858561209c565b9250506020611dee85828601611c09565b60008060008060008060a087890312156120f6576120f6600080fd5b60006121028989611bf8565b965050602061211389828a01611bf8565b955050604061212489828a01611c09565b945050606061213589828a01611d54565b935050608087013567ffffffffffffffff81111561215557612155600080fd5b61216189828a01611c14565b92509250509295509295509295565b60008060006060848603121561218857612188600080fd5b60006121948686611bf8565b93505060206121a58682870161209c565b92505060406121b686828701611c09565b9150509250925092565b600080600080606085870312156121d9576121d9600080fd5b60006121e58787611bf8565b94505060206121f687828801611d54565b935050604085013567ffffffffffffffff81111561221657612216600080fd5b61222287828801611c14565b95989497509550505050565b805161088281611be4565b60006020828403121561224e5761224e600080fd5b600061132a848461222e565b604181526000602082017f5374616e646172644272696467653a2066756e6374696f6e2063616e206f6e6c81527f792062652063616c6c65642066726f6d20746865206f746865722062726964676020820152606560f81b604082015291505b5060600190565b602080825281016108828161225a565b6020808252810161088281601681527514dd185b99185c99109c9a5919d94e881c185d5cd95960521b602082015260400190565b604a81526000602082017f5374616e646172644272696467653a2077726f6e672072656d6f746520746f6b81527f656e20666f72204f7074696d69736d204d696e7461626c65204552433230206c60208201526937b1b0b6103a37b5b2b760b11b604082015291506122ba565b6020808252810161088281612305565b611d3481611bd3565b604081016123998285612382565b6109126020830184611d32565b634e487b7160e01b600052601160045260246000fd5b81810381811115610882576108826123a6565b603a81526000602082017f5374616e646172644272696467653a20616d6f756e742073656e7420646f657381527f206e6f74206d6174636820616d6f756e7420726571756972656400000000000060208201529150611bbc565b60208082528101610882816123cf565b602381526000602082017f5374616e646172644272696467653a2063616e6e6f742073656e6420746f207381526232b63360e91b60208201529150611bbc565b6020808252810161088281612439565b602881526000602082017f5374616e646172644272696467653a2063616e6e6f742073656e6420746f206d81526732b9b9b2b733b2b960c11b60208201529150611bbc565b6020808252810161088281612489565b602381526000602082017f5374616e646172644272696467653a20455448207472616e73666572206661698152621b195960ea1b60208201529150611bbc565b60208082528101610882816124de565b602181526000602082017f5374616e646172644272696467653a20746f6b656e20686173206e6f20636f648152606560f81b60208201529150611bbc565b602080825281016108828161252e565b600067ffffffffffffffff8216610882565b611d348161257c565b60208101610882828461258e565b801515611bed565b8051610882816125a5565b6000602082840312156125cd576125cd600080fd5b600061132a84846125ad565b602e81526000602082017f5374616e646172644272696467653a206d617820746f74616c20616d6f756e7481526d081b9bdd081cdd5c1c1bdc9d195960921b60208201529150611bbc565b60208082528101610882816125d9565b603e81526000602082017f5374616e646172644272696467653a206272696467696e6720455448206d757381527f7420696e636c7564652073756666696369656e74204554482076616c7565000060208201529150611bbc565b6020808252810161088281612634565b608081016126ac8287612382565b6126b96020830186612382565b6126c66040830185611d32565b8181036060830152611ae08184612034565b63ffffffff8116611d34565b606081016126f28286612382565b81810360208301526127048185612034565b905061132a60408301846126d8565b602081016108828284612382565b805161088281611c03565b60006020828403121561274157612741600080fd5b600061132a8484612721565b6060810161275b8286612382565b6127686020830185611d32565b818103604083015261277a8184612034565b95945050505050565b81810280821583820485141761279b5761279b6123a6565b5092915050565b634e487b7160e01b600052601260045260246000fd5b6000826127c7576127c76127a2565b500490565b80820180821115610882576108826123a6565b604081016127ed8285611d32565b818103602083015261132a8184612034565b602b81526000602082017f5472616e736665725468726f74746c653a20706572696f64206c656e6774682081526a063616e6e6f7420626520360ac1b60208201529150611bbc565b60208082528101610882816127ff565b60c081016128658289612382565b6128726020830188612382565b61287f6040830187612382565b61288c6060830186612382565b6128996080830185611d32565b81810360a08301526128ab8184612034565b98975050505050505050565b603781526000602082017f5472616e736665725468726f74746c653a206d6178696d756d20616c6c6f776581527f6420746f74616c20616d6f756e7420657863656564656400000000000000000060208201529150611bbc565b60208082528101610882816128b7565b603581526000602082017f5472616e736665725468726f74746c653a206d6178696d756d20616c6c6f776581527419081d1a1c9bdd59da1c1d5d08195e18d959591959605a1b60208201529150611bbc565b6020808252810161088281612921565b602c81526000602082017f5374616e646172644272696467653a2073656e646572206973206e6f7420746881526b3937ba3a36329030b236b4b760a11b60208201529150611bbc565b6020808252810161088281612983565b606081016129ea8286612382565b611f006020830185612382565b602e81526000602082017f5374616e646172644272696467653a2073656e646572206e6f7420616c6c6f7781526d656420746f207468726f74746c6560901b60208201529150611bbc565b60208082528101610882816129f7565b6001600160e01b03198116611d34565b602081016108828284612a52565b6000612a7a825190565b612a88818560208601612010565b9290920192915050565b60006109128284612a7056fea164736f6c6343000814000a",
}

// L1StandardBridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use L1StandardBridgeMetaData.ABI instead.
var L1StandardBridgeABI = L1StandardBridgeMetaData.ABI

// L1StandardBridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L1StandardBridgeMetaData.Bin instead.
var L1StandardBridgeBin = L1StandardBridgeMetaData.Bin

// DeployL1StandardBridge deploys a new Ethereum contract, binding an instance of L1StandardBridge to it.
func DeployL1StandardBridge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *L1StandardBridge, error) {
	parsed, err := L1StandardBridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L1StandardBridgeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L1StandardBridge{L1StandardBridgeCaller: L1StandardBridgeCaller{contract: contract}, L1StandardBridgeTransactor: L1StandardBridgeTransactor{contract: contract}, L1StandardBridgeFilterer: L1StandardBridgeFilterer{contract: contract}}, nil
}

// L1StandardBridge is an auto generated Go binding around an Ethereum contract.
type L1StandardBridge struct {
	L1StandardBridgeCaller     // Read-only binding to the contract
	L1StandardBridgeTransactor // Write-only binding to the contract
	L1StandardBridgeFilterer   // Log filterer for contract events
}

// L1StandardBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type L1StandardBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StandardBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L1StandardBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StandardBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L1StandardBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StandardBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L1StandardBridgeSession struct {
	Contract     *L1StandardBridge // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// L1StandardBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L1StandardBridgeCallerSession struct {
	Contract *L1StandardBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// L1StandardBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L1StandardBridgeTransactorSession struct {
	Contract     *L1StandardBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// L1StandardBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type L1StandardBridgeRaw struct {
	Contract *L1StandardBridge // Generic contract binding to access the raw methods on
}

// L1StandardBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L1StandardBridgeCallerRaw struct {
	Contract *L1StandardBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// L1StandardBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L1StandardBridgeTransactorRaw struct {
	Contract *L1StandardBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL1StandardBridge creates a new instance of L1StandardBridge, bound to a specific deployed contract.
func NewL1StandardBridge(address common.Address, backend bind.ContractBackend) (*L1StandardBridge, error) {
	contract, err := bindL1StandardBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L1StandardBridge{L1StandardBridgeCaller: L1StandardBridgeCaller{contract: contract}, L1StandardBridgeTransactor: L1StandardBridgeTransactor{contract: contract}, L1StandardBridgeFilterer: L1StandardBridgeFilterer{contract: contract}}, nil
}

// NewL1StandardBridgeCaller creates a new read-only instance of L1StandardBridge, bound to a specific deployed contract.
func NewL1StandardBridgeCaller(address common.Address, caller bind.ContractCaller) (*L1StandardBridgeCaller, error) {
	contract, err := bindL1StandardBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L1StandardBridgeCaller{contract: contract}, nil
}

// NewL1StandardBridgeTransactor creates a new write-only instance of L1StandardBridge, bound to a specific deployed contract.
func NewL1StandardBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*L1StandardBridgeTransactor, error) {
	contract, err := bindL1StandardBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L1StandardBridgeTransactor{contract: contract}, nil
}

// NewL1StandardBridgeFilterer creates a new log filterer instance of L1StandardBridge, bound to a specific deployed contract.
func NewL1StandardBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*L1StandardBridgeFilterer, error) {
	contract, err := bindL1StandardBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L1StandardBridgeFilterer{contract: contract}, nil
}

// bindL1StandardBridge binds a generic wrapper to an already deployed contract.
func bindL1StandardBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L1StandardBridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1StandardBridge *L1StandardBridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1StandardBridge.Contract.L1StandardBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1StandardBridge *L1StandardBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.L1StandardBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1StandardBridge *L1StandardBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.L1StandardBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1StandardBridge *L1StandardBridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1StandardBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1StandardBridge *L1StandardBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1StandardBridge *L1StandardBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.contract.Transact(opts, method, params...)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCaller) MESSENGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "MESSENGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1StandardBridge *L1StandardBridgeSession) MESSENGER() (common.Address, error) {
	return _L1StandardBridge.Contract.MESSENGER(&_L1StandardBridge.CallOpts)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCallerSession) MESSENGER() (common.Address, error) {
	return _L1StandardBridge.Contract.MESSENGER(&_L1StandardBridge.CallOpts)
}

// OTHERBRIDGE is a free data retrieval call binding the contract method 0x7f46ddb2.
//
// Solidity: function OTHER_BRIDGE() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCaller) OTHERBRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "OTHER_BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OTHERBRIDGE is a free data retrieval call binding the contract method 0x7f46ddb2.
//
// Solidity: function OTHER_BRIDGE() view returns(address)
func (_L1StandardBridge *L1StandardBridgeSession) OTHERBRIDGE() (common.Address, error) {
	return _L1StandardBridge.Contract.OTHERBRIDGE(&_L1StandardBridge.CallOpts)
}

// OTHERBRIDGE is a free data retrieval call binding the contract method 0x7f46ddb2.
//
// Solidity: function OTHER_BRIDGE() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCallerSession) OTHERBRIDGE() (common.Address, error) {
	return _L1StandardBridge.Contract.OTHERBRIDGE(&_L1StandardBridge.CallOpts)
}

// AccessController is a free data retrieval call binding the contract method 0xbc43cbaf.
//
// Solidity: function accessController() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCaller) AccessController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "accessController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccessController is a free data retrieval call binding the contract method 0xbc43cbaf.
//
// Solidity: function accessController() view returns(address)
func (_L1StandardBridge *L1StandardBridgeSession) AccessController() (common.Address, error) {
	return _L1StandardBridge.Contract.AccessController(&_L1StandardBridge.CallOpts)
}

// AccessController is a free data retrieval call binding the contract method 0xbc43cbaf.
//
// Solidity: function accessController() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCallerSession) AccessController() (common.Address, error) {
	return _L1StandardBridge.Contract.AccessController(&_L1StandardBridge.CallOpts)
}

// Deposits is a free data retrieval call binding the contract method 0x8f601f66.
//
// Solidity: function deposits(address , address ) view returns(uint256)
func (_L1StandardBridge *L1StandardBridgeCaller) Deposits(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "deposits", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Deposits is a free data retrieval call binding the contract method 0x8f601f66.
//
// Solidity: function deposits(address , address ) view returns(uint256)
func (_L1StandardBridge *L1StandardBridgeSession) Deposits(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _L1StandardBridge.Contract.Deposits(&_L1StandardBridge.CallOpts, arg0, arg1)
}

// Deposits is a free data retrieval call binding the contract method 0x8f601f66.
//
// Solidity: function deposits(address , address ) view returns(uint256)
func (_L1StandardBridge *L1StandardBridgeCallerSession) Deposits(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _L1StandardBridge.Contract.Deposits(&_L1StandardBridge.CallOpts, arg0, arg1)
}

// Erc20ThrottleDeposits is a free data retrieval call binding the contract method 0x1d4e6ded.
//
// Solidity: function erc20ThrottleDeposits(address ) view returns(uint208 maxAmountPerPeriod, uint48 periodLength, uint256 maxAmountTotal)
func (_L1StandardBridge *L1StandardBridgeCaller) Erc20ThrottleDeposits(opts *bind.CallOpts, arg0 common.Address) (struct {
	MaxAmountPerPeriod *big.Int
	PeriodLength       *big.Int
	MaxAmountTotal     *big.Int
}, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "erc20ThrottleDeposits", arg0)

	outstruct := new(struct {
		MaxAmountPerPeriod *big.Int
		PeriodLength       *big.Int
		MaxAmountTotal     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.MaxAmountPerPeriod = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PeriodLength = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MaxAmountTotal = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Erc20ThrottleDeposits is a free data retrieval call binding the contract method 0x1d4e6ded.
//
// Solidity: function erc20ThrottleDeposits(address ) view returns(uint208 maxAmountPerPeriod, uint48 periodLength, uint256 maxAmountTotal)
func (_L1StandardBridge *L1StandardBridgeSession) Erc20ThrottleDeposits(arg0 common.Address) (struct {
	MaxAmountPerPeriod *big.Int
	PeriodLength       *big.Int
	MaxAmountTotal     *big.Int
}, error) {
	return _L1StandardBridge.Contract.Erc20ThrottleDeposits(&_L1StandardBridge.CallOpts, arg0)
}

// Erc20ThrottleDeposits is a free data retrieval call binding the contract method 0x1d4e6ded.
//
// Solidity: function erc20ThrottleDeposits(address ) view returns(uint208 maxAmountPerPeriod, uint48 periodLength, uint256 maxAmountTotal)
func (_L1StandardBridge *L1StandardBridgeCallerSession) Erc20ThrottleDeposits(arg0 common.Address) (struct {
	MaxAmountPerPeriod *big.Int
	PeriodLength       *big.Int
	MaxAmountTotal     *big.Int
}, error) {
	return _L1StandardBridge.Contract.Erc20ThrottleDeposits(&_L1StandardBridge.CallOpts, arg0)
}

// Erc20ThrottleWithdrawals is a free data retrieval call binding the contract method 0xf8e74c19.
//
// Solidity: function erc20ThrottleWithdrawals(address ) view returns(uint208 maxAmountPerPeriod, uint48 periodLength, uint256 maxAmountTotal)
func (_L1StandardBridge *L1StandardBridgeCaller) Erc20ThrottleWithdrawals(opts *bind.CallOpts, arg0 common.Address) (struct {
	MaxAmountPerPeriod *big.Int
	PeriodLength       *big.Int
	MaxAmountTotal     *big.Int
}, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "erc20ThrottleWithdrawals", arg0)

	outstruct := new(struct {
		MaxAmountPerPeriod *big.Int
		PeriodLength       *big.Int
		MaxAmountTotal     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.MaxAmountPerPeriod = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PeriodLength = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MaxAmountTotal = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Erc20ThrottleWithdrawals is a free data retrieval call binding the contract method 0xf8e74c19.
//
// Solidity: function erc20ThrottleWithdrawals(address ) view returns(uint208 maxAmountPerPeriod, uint48 periodLength, uint256 maxAmountTotal)
func (_L1StandardBridge *L1StandardBridgeSession) Erc20ThrottleWithdrawals(arg0 common.Address) (struct {
	MaxAmountPerPeriod *big.Int
	PeriodLength       *big.Int
	MaxAmountTotal     *big.Int
}, error) {
	return _L1StandardBridge.Contract.Erc20ThrottleWithdrawals(&_L1StandardBridge.CallOpts, arg0)
}

// Erc20ThrottleWithdrawals is a free data retrieval call binding the contract method 0xf8e74c19.
//
// Solidity: function erc20ThrottleWithdrawals(address ) view returns(uint208 maxAmountPerPeriod, uint48 periodLength, uint256 maxAmountTotal)
func (_L1StandardBridge *L1StandardBridgeCallerSession) Erc20ThrottleWithdrawals(arg0 common.Address) (struct {
	MaxAmountPerPeriod *big.Int
	PeriodLength       *big.Int
	MaxAmountTotal     *big.Int
}, error) {
	return _L1StandardBridge.Contract.Erc20ThrottleWithdrawals(&_L1StandardBridge.CallOpts, arg0)
}

// EthThrottleDeposits is a free data retrieval call binding the contract method 0x2b9cd45c.
//
// Solidity: function ethThrottleDeposits() view returns(uint208 maxAmountPerPeriod, uint48 periodLength, uint256 maxAmountTotal)
func (_L1StandardBridge *L1StandardBridgeCaller) EthThrottleDeposits(opts *bind.CallOpts) (struct {
	MaxAmountPerPeriod *big.Int
	PeriodLength       *big.Int
	MaxAmountTotal     *big.Int
}, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "ethThrottleDeposits")

	outstruct := new(struct {
		MaxAmountPerPeriod *big.Int
		PeriodLength       *big.Int
		MaxAmountTotal     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.MaxAmountPerPeriod = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PeriodLength = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MaxAmountTotal = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// EthThrottleDeposits is a free data retrieval call binding the contract method 0x2b9cd45c.
//
// Solidity: function ethThrottleDeposits() view returns(uint208 maxAmountPerPeriod, uint48 periodLength, uint256 maxAmountTotal)
func (_L1StandardBridge *L1StandardBridgeSession) EthThrottleDeposits() (struct {
	MaxAmountPerPeriod *big.Int
	PeriodLength       *big.Int
	MaxAmountTotal     *big.Int
}, error) {
	return _L1StandardBridge.Contract.EthThrottleDeposits(&_L1StandardBridge.CallOpts)
}

// EthThrottleDeposits is a free data retrieval call binding the contract method 0x2b9cd45c.
//
// Solidity: function ethThrottleDeposits() view returns(uint208 maxAmountPerPeriod, uint48 periodLength, uint256 maxAmountTotal)
func (_L1StandardBridge *L1StandardBridgeCallerSession) EthThrottleDeposits() (struct {
	MaxAmountPerPeriod *big.Int
	PeriodLength       *big.Int
	MaxAmountTotal     *big.Int
}, error) {
	return _L1StandardBridge.Contract.EthThrottleDeposits(&_L1StandardBridge.CallOpts)
}

// GetERC20ThrottleDepositsCredits is a free data retrieval call binding the contract method 0x134bf4de.
//
// Solidity: function getERC20ThrottleDepositsCredits(address token, address user) view returns(uint256 availableCredits)
func (_L1StandardBridge *L1StandardBridgeCaller) GetERC20ThrottleDepositsCredits(opts *bind.CallOpts, token common.Address, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "getERC20ThrottleDepositsCredits", token, user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetERC20ThrottleDepositsCredits is a free data retrieval call binding the contract method 0x134bf4de.
//
// Solidity: function getERC20ThrottleDepositsCredits(address token, address user) view returns(uint256 availableCredits)
func (_L1StandardBridge *L1StandardBridgeSession) GetERC20ThrottleDepositsCredits(token common.Address, user common.Address) (*big.Int, error) {
	return _L1StandardBridge.Contract.GetERC20ThrottleDepositsCredits(&_L1StandardBridge.CallOpts, token, user)
}

// GetERC20ThrottleDepositsCredits is a free data retrieval call binding the contract method 0x134bf4de.
//
// Solidity: function getERC20ThrottleDepositsCredits(address token, address user) view returns(uint256 availableCredits)
func (_L1StandardBridge *L1StandardBridgeCallerSession) GetERC20ThrottleDepositsCredits(token common.Address, user common.Address) (*big.Int, error) {
	return _L1StandardBridge.Contract.GetERC20ThrottleDepositsCredits(&_L1StandardBridge.CallOpts, token, user)
}

// GetERC20ThrottleWithdrawalsCredits is a free data retrieval call binding the contract method 0xd5d6ba33.
//
// Solidity: function getERC20ThrottleWithdrawalsCredits(address token) view returns(uint256 availableCredits)
func (_L1StandardBridge *L1StandardBridgeCaller) GetERC20ThrottleWithdrawalsCredits(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "getERC20ThrottleWithdrawalsCredits", token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetERC20ThrottleWithdrawalsCredits is a free data retrieval call binding the contract method 0xd5d6ba33.
//
// Solidity: function getERC20ThrottleWithdrawalsCredits(address token) view returns(uint256 availableCredits)
func (_L1StandardBridge *L1StandardBridgeSession) GetERC20ThrottleWithdrawalsCredits(token common.Address) (*big.Int, error) {
	return _L1StandardBridge.Contract.GetERC20ThrottleWithdrawalsCredits(&_L1StandardBridge.CallOpts, token)
}

// GetERC20ThrottleWithdrawalsCredits is a free data retrieval call binding the contract method 0xd5d6ba33.
//
// Solidity: function getERC20ThrottleWithdrawalsCredits(address token) view returns(uint256 availableCredits)
func (_L1StandardBridge *L1StandardBridgeCallerSession) GetERC20ThrottleWithdrawalsCredits(token common.Address) (*big.Int, error) {
	return _L1StandardBridge.Contract.GetERC20ThrottleWithdrawalsCredits(&_L1StandardBridge.CallOpts, token)
}

// GetEthThrottleDepositsCredits is a free data retrieval call binding the contract method 0x058984b5.
//
// Solidity: function getEthThrottleDepositsCredits(address user) view returns(uint256 availableCredits)
func (_L1StandardBridge *L1StandardBridgeCaller) GetEthThrottleDepositsCredits(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "getEthThrottleDepositsCredits", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEthThrottleDepositsCredits is a free data retrieval call binding the contract method 0x058984b5.
//
// Solidity: function getEthThrottleDepositsCredits(address user) view returns(uint256 availableCredits)
func (_L1StandardBridge *L1StandardBridgeSession) GetEthThrottleDepositsCredits(user common.Address) (*big.Int, error) {
	return _L1StandardBridge.Contract.GetEthThrottleDepositsCredits(&_L1StandardBridge.CallOpts, user)
}

// GetEthThrottleDepositsCredits is a free data retrieval call binding the contract method 0x058984b5.
//
// Solidity: function getEthThrottleDepositsCredits(address user) view returns(uint256 availableCredits)
func (_L1StandardBridge *L1StandardBridgeCallerSession) GetEthThrottleDepositsCredits(user common.Address) (*big.Int, error) {
	return _L1StandardBridge.Contract.GetEthThrottleDepositsCredits(&_L1StandardBridge.CallOpts, user)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCaller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1StandardBridge *L1StandardBridgeSession) Messenger() (common.Address, error) {
	return _L1StandardBridge.Contract.Messenger(&_L1StandardBridge.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCallerSession) Messenger() (common.Address, error) {
	return _L1StandardBridge.Contract.Messenger(&_L1StandardBridge.CallOpts)
}

// OtherBridge is a free data retrieval call binding the contract method 0xc89701a2.
//
// Solidity: function otherBridge() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCaller) OtherBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "otherBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OtherBridge is a free data retrieval call binding the contract method 0xc89701a2.
//
// Solidity: function otherBridge() view returns(address)
func (_L1StandardBridge *L1StandardBridgeSession) OtherBridge() (common.Address, error) {
	return _L1StandardBridge.Contract.OtherBridge(&_L1StandardBridge.CallOpts)
}

// OtherBridge is a free data retrieval call binding the contract method 0xc89701a2.
//
// Solidity: function otherBridge() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCallerSession) OtherBridge() (common.Address, error) {
	return _L1StandardBridge.Contract.OtherBridge(&_L1StandardBridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_L1StandardBridge *L1StandardBridgeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_L1StandardBridge *L1StandardBridgeSession) Paused() (bool, error) {
	return _L1StandardBridge.Contract.Paused(&_L1StandardBridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_L1StandardBridge *L1StandardBridgeCallerSession) Paused() (bool, error) {
	return _L1StandardBridge.Contract.Paused(&_L1StandardBridge.CallOpts)
}

// SuperchainConfig is a free data retrieval call binding the contract method 0x35e80ab3.
//
// Solidity: function superchainConfig() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCaller) SuperchainConfig(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "superchainConfig")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SuperchainConfig is a free data retrieval call binding the contract method 0x35e80ab3.
//
// Solidity: function superchainConfig() view returns(address)
func (_L1StandardBridge *L1StandardBridgeSession) SuperchainConfig() (common.Address, error) {
	return _L1StandardBridge.Contract.SuperchainConfig(&_L1StandardBridge.CallOpts)
}

// SuperchainConfig is a free data retrieval call binding the contract method 0x35e80ab3.
//
// Solidity: function superchainConfig() view returns(address)
func (_L1StandardBridge *L1StandardBridgeCallerSession) SuperchainConfig() (common.Address, error) {
	return _L1StandardBridge.Contract.SuperchainConfig(&_L1StandardBridge.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_L1StandardBridge *L1StandardBridgeCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _L1StandardBridge.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_L1StandardBridge *L1StandardBridgeSession) Version() (string, error) {
	return _L1StandardBridge.Contract.Version(&_L1StandardBridge.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_L1StandardBridge *L1StandardBridgeCallerSession) Version() (string, error) {
	return _L1StandardBridge.Contract.Version(&_L1StandardBridge.CallOpts)
}

// BridgeERC20 is a paid mutator transaction binding the contract method 0x87087623.
//
// Solidity: function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData) returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) BridgeERC20(opts *bind.TransactOpts, _localToken common.Address, _remoteToken common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "bridgeERC20", _localToken, _remoteToken, _amount, _minGasLimit, _extraData)
}

// BridgeERC20 is a paid mutator transaction binding the contract method 0x87087623.
//
// Solidity: function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData) returns()
func (_L1StandardBridge *L1StandardBridgeSession) BridgeERC20(_localToken common.Address, _remoteToken common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.BridgeERC20(&_L1StandardBridge.TransactOpts, _localToken, _remoteToken, _amount, _minGasLimit, _extraData)
}

// BridgeERC20 is a paid mutator transaction binding the contract method 0x87087623.
//
// Solidity: function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData) returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) BridgeERC20(_localToken common.Address, _remoteToken common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.BridgeERC20(&_L1StandardBridge.TransactOpts, _localToken, _remoteToken, _amount, _minGasLimit, _extraData)
}

// BridgeERC20To is a paid mutator transaction binding the contract method 0x540abf73.
//
// Solidity: function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData) returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) BridgeERC20To(opts *bind.TransactOpts, _localToken common.Address, _remoteToken common.Address, _to common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "bridgeERC20To", _localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
}

// BridgeERC20To is a paid mutator transaction binding the contract method 0x540abf73.
//
// Solidity: function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData) returns()
func (_L1StandardBridge *L1StandardBridgeSession) BridgeERC20To(_localToken common.Address, _remoteToken common.Address, _to common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.BridgeERC20To(&_L1StandardBridge.TransactOpts, _localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
}

// BridgeERC20To is a paid mutator transaction binding the contract method 0x540abf73.
//
// Solidity: function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData) returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) BridgeERC20To(_localToken common.Address, _remoteToken common.Address, _to common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.BridgeERC20To(&_L1StandardBridge.TransactOpts, _localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
}

// BridgeETH is a paid mutator transaction binding the contract method 0x09fc8843.
//
// Solidity: function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) BridgeETH(opts *bind.TransactOpts, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "bridgeETH", _minGasLimit, _extraData)
}

// BridgeETH is a paid mutator transaction binding the contract method 0x09fc8843.
//
// Solidity: function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable returns()
func (_L1StandardBridge *L1StandardBridgeSession) BridgeETH(_minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.BridgeETH(&_L1StandardBridge.TransactOpts, _minGasLimit, _extraData)
}

// BridgeETH is a paid mutator transaction binding the contract method 0x09fc8843.
//
// Solidity: function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) BridgeETH(_minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.BridgeETH(&_L1StandardBridge.TransactOpts, _minGasLimit, _extraData)
}

// BridgeETHTo is a paid mutator transaction binding the contract method 0xe11013dd.
//
// Solidity: function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) BridgeETHTo(opts *bind.TransactOpts, _to common.Address, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "bridgeETHTo", _to, _minGasLimit, _extraData)
}

// BridgeETHTo is a paid mutator transaction binding the contract method 0xe11013dd.
//
// Solidity: function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable returns()
func (_L1StandardBridge *L1StandardBridgeSession) BridgeETHTo(_to common.Address, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.BridgeETHTo(&_L1StandardBridge.TransactOpts, _to, _minGasLimit, _extraData)
}

// BridgeETHTo is a paid mutator transaction binding the contract method 0xe11013dd.
//
// Solidity: function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) BridgeETHTo(_to common.Address, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.BridgeETHTo(&_L1StandardBridge.TransactOpts, _to, _minGasLimit, _extraData)
}

// FinalizeBridgeERC20 is a paid mutator transaction binding the contract method 0x0166a07a.
//
// Solidity: function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData) returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) FinalizeBridgeERC20(opts *bind.TransactOpts, _localToken common.Address, _remoteToken common.Address, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "finalizeBridgeERC20", _localToken, _remoteToken, _from, _to, _amount, _extraData)
}

// FinalizeBridgeERC20 is a paid mutator transaction binding the contract method 0x0166a07a.
//
// Solidity: function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData) returns()
func (_L1StandardBridge *L1StandardBridgeSession) FinalizeBridgeERC20(_localToken common.Address, _remoteToken common.Address, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.FinalizeBridgeERC20(&_L1StandardBridge.TransactOpts, _localToken, _remoteToken, _from, _to, _amount, _extraData)
}

// FinalizeBridgeERC20 is a paid mutator transaction binding the contract method 0x0166a07a.
//
// Solidity: function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData) returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) FinalizeBridgeERC20(_localToken common.Address, _remoteToken common.Address, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.FinalizeBridgeERC20(&_L1StandardBridge.TransactOpts, _localToken, _remoteToken, _from, _to, _amount, _extraData)
}

// FinalizeBridgeETH is a paid mutator transaction binding the contract method 0x1635f5fd.
//
// Solidity: function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) FinalizeBridgeETH(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "finalizeBridgeETH", _from, _to, _amount, _extraData)
}

// FinalizeBridgeETH is a paid mutator transaction binding the contract method 0x1635f5fd.
//
// Solidity: function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable returns()
func (_L1StandardBridge *L1StandardBridgeSession) FinalizeBridgeETH(_from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.FinalizeBridgeETH(&_L1StandardBridge.TransactOpts, _from, _to, _amount, _extraData)
}

// FinalizeBridgeETH is a paid mutator transaction binding the contract method 0x1635f5fd.
//
// Solidity: function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) FinalizeBridgeETH(_from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.FinalizeBridgeETH(&_L1StandardBridge.TransactOpts, _from, _to, _amount, _extraData)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _messenger, address _superchainConfig) returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) Initialize(opts *bind.TransactOpts, _messenger common.Address, _superchainConfig common.Address) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "initialize", _messenger, _superchainConfig)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _messenger, address _superchainConfig) returns()
func (_L1StandardBridge *L1StandardBridgeSession) Initialize(_messenger common.Address, _superchainConfig common.Address) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.Initialize(&_L1StandardBridge.TransactOpts, _messenger, _superchainConfig)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _messenger, address _superchainConfig) returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) Initialize(_messenger common.Address, _superchainConfig common.Address) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.Initialize(&_L1StandardBridge.TransactOpts, _messenger, _superchainConfig)
}

// SetErc20ThrottleDepositsMaxAmount is a paid mutator transaction binding the contract method 0xf7e70da7.
//
// Solidity: function setErc20ThrottleDepositsMaxAmount(address token, uint208 maxAmountPerPeriod, uint256 maxAmountTotal) returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) SetErc20ThrottleDepositsMaxAmount(opts *bind.TransactOpts, token common.Address, maxAmountPerPeriod *big.Int, maxAmountTotal *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "setErc20ThrottleDepositsMaxAmount", token, maxAmountPerPeriod, maxAmountTotal)
}

// SetErc20ThrottleDepositsMaxAmount is a paid mutator transaction binding the contract method 0xf7e70da7.
//
// Solidity: function setErc20ThrottleDepositsMaxAmount(address token, uint208 maxAmountPerPeriod, uint256 maxAmountTotal) returns()
func (_L1StandardBridge *L1StandardBridgeSession) SetErc20ThrottleDepositsMaxAmount(token common.Address, maxAmountPerPeriod *big.Int, maxAmountTotal *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetErc20ThrottleDepositsMaxAmount(&_L1StandardBridge.TransactOpts, token, maxAmountPerPeriod, maxAmountTotal)
}

// SetErc20ThrottleDepositsMaxAmount is a paid mutator transaction binding the contract method 0xf7e70da7.
//
// Solidity: function setErc20ThrottleDepositsMaxAmount(address token, uint208 maxAmountPerPeriod, uint256 maxAmountTotal) returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) SetErc20ThrottleDepositsMaxAmount(token common.Address, maxAmountPerPeriod *big.Int, maxAmountTotal *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetErc20ThrottleDepositsMaxAmount(&_L1StandardBridge.TransactOpts, token, maxAmountPerPeriod, maxAmountTotal)
}

// SetErc20ThrottleDepositsPeriodLength is a paid mutator transaction binding the contract method 0x1b486feb.
//
// Solidity: function setErc20ThrottleDepositsPeriodLength(address token, uint48 _periodLength) returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) SetErc20ThrottleDepositsPeriodLength(opts *bind.TransactOpts, token common.Address, _periodLength *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "setErc20ThrottleDepositsPeriodLength", token, _periodLength)
}

// SetErc20ThrottleDepositsPeriodLength is a paid mutator transaction binding the contract method 0x1b486feb.
//
// Solidity: function setErc20ThrottleDepositsPeriodLength(address token, uint48 _periodLength) returns()
func (_L1StandardBridge *L1StandardBridgeSession) SetErc20ThrottleDepositsPeriodLength(token common.Address, _periodLength *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetErc20ThrottleDepositsPeriodLength(&_L1StandardBridge.TransactOpts, token, _periodLength)
}

// SetErc20ThrottleDepositsPeriodLength is a paid mutator transaction binding the contract method 0x1b486feb.
//
// Solidity: function setErc20ThrottleDepositsPeriodLength(address token, uint48 _periodLength) returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) SetErc20ThrottleDepositsPeriodLength(token common.Address, _periodLength *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetErc20ThrottleDepositsPeriodLength(&_L1StandardBridge.TransactOpts, token, _periodLength)
}

// SetErc20ThrottleWithdrawalsMaxAmount is a paid mutator transaction binding the contract method 0xda69d9ff.
//
// Solidity: function setErc20ThrottleWithdrawalsMaxAmount(address token, uint208 maxAmountPerPeriod, uint256 maxAmountTotal) returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) SetErc20ThrottleWithdrawalsMaxAmount(opts *bind.TransactOpts, token common.Address, maxAmountPerPeriod *big.Int, maxAmountTotal *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "setErc20ThrottleWithdrawalsMaxAmount", token, maxAmountPerPeriod, maxAmountTotal)
}

// SetErc20ThrottleWithdrawalsMaxAmount is a paid mutator transaction binding the contract method 0xda69d9ff.
//
// Solidity: function setErc20ThrottleWithdrawalsMaxAmount(address token, uint208 maxAmountPerPeriod, uint256 maxAmountTotal) returns()
func (_L1StandardBridge *L1StandardBridgeSession) SetErc20ThrottleWithdrawalsMaxAmount(token common.Address, maxAmountPerPeriod *big.Int, maxAmountTotal *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetErc20ThrottleWithdrawalsMaxAmount(&_L1StandardBridge.TransactOpts, token, maxAmountPerPeriod, maxAmountTotal)
}

// SetErc20ThrottleWithdrawalsMaxAmount is a paid mutator transaction binding the contract method 0xda69d9ff.
//
// Solidity: function setErc20ThrottleWithdrawalsMaxAmount(address token, uint208 maxAmountPerPeriod, uint256 maxAmountTotal) returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) SetErc20ThrottleWithdrawalsMaxAmount(token common.Address, maxAmountPerPeriod *big.Int, maxAmountTotal *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetErc20ThrottleWithdrawalsMaxAmount(&_L1StandardBridge.TransactOpts, token, maxAmountPerPeriod, maxAmountTotal)
}

// SetErc20ThrottleWithdrawalsPeriodLength is a paid mutator transaction binding the contract method 0xcddbd4b9.
//
// Solidity: function setErc20ThrottleWithdrawalsPeriodLength(address token, uint48 _periodLength) returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) SetErc20ThrottleWithdrawalsPeriodLength(opts *bind.TransactOpts, token common.Address, _periodLength *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "setErc20ThrottleWithdrawalsPeriodLength", token, _periodLength)
}

// SetErc20ThrottleWithdrawalsPeriodLength is a paid mutator transaction binding the contract method 0xcddbd4b9.
//
// Solidity: function setErc20ThrottleWithdrawalsPeriodLength(address token, uint48 _periodLength) returns()
func (_L1StandardBridge *L1StandardBridgeSession) SetErc20ThrottleWithdrawalsPeriodLength(token common.Address, _periodLength *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetErc20ThrottleWithdrawalsPeriodLength(&_L1StandardBridge.TransactOpts, token, _periodLength)
}

// SetErc20ThrottleWithdrawalsPeriodLength is a paid mutator transaction binding the contract method 0xcddbd4b9.
//
// Solidity: function setErc20ThrottleWithdrawalsPeriodLength(address token, uint48 _periodLength) returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) SetErc20ThrottleWithdrawalsPeriodLength(token common.Address, _periodLength *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetErc20ThrottleWithdrawalsPeriodLength(&_L1StandardBridge.TransactOpts, token, _periodLength)
}

// SetEthThrottleDepositsMaxAmount is a paid mutator transaction binding the contract method 0x6b296604.
//
// Solidity: function setEthThrottleDepositsMaxAmount(uint208 maxAmountPerPeriod, uint256 maxAmountTotal) returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) SetEthThrottleDepositsMaxAmount(opts *bind.TransactOpts, maxAmountPerPeriod *big.Int, maxAmountTotal *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "setEthThrottleDepositsMaxAmount", maxAmountPerPeriod, maxAmountTotal)
}

// SetEthThrottleDepositsMaxAmount is a paid mutator transaction binding the contract method 0x6b296604.
//
// Solidity: function setEthThrottleDepositsMaxAmount(uint208 maxAmountPerPeriod, uint256 maxAmountTotal) returns()
func (_L1StandardBridge *L1StandardBridgeSession) SetEthThrottleDepositsMaxAmount(maxAmountPerPeriod *big.Int, maxAmountTotal *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetEthThrottleDepositsMaxAmount(&_L1StandardBridge.TransactOpts, maxAmountPerPeriod, maxAmountTotal)
}

// SetEthThrottleDepositsMaxAmount is a paid mutator transaction binding the contract method 0x6b296604.
//
// Solidity: function setEthThrottleDepositsMaxAmount(uint208 maxAmountPerPeriod, uint256 maxAmountTotal) returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) SetEthThrottleDepositsMaxAmount(maxAmountPerPeriod *big.Int, maxAmountTotal *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetEthThrottleDepositsMaxAmount(&_L1StandardBridge.TransactOpts, maxAmountPerPeriod, maxAmountTotal)
}

// SetEthThrottleDepositsPeriodLength is a paid mutator transaction binding the contract method 0x325bd058.
//
// Solidity: function setEthThrottleDepositsPeriodLength(uint48 _periodLength) returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) SetEthThrottleDepositsPeriodLength(opts *bind.TransactOpts, _periodLength *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.contract.Transact(opts, "setEthThrottleDepositsPeriodLength", _periodLength)
}

// SetEthThrottleDepositsPeriodLength is a paid mutator transaction binding the contract method 0x325bd058.
//
// Solidity: function setEthThrottleDepositsPeriodLength(uint48 _periodLength) returns()
func (_L1StandardBridge *L1StandardBridgeSession) SetEthThrottleDepositsPeriodLength(_periodLength *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetEthThrottleDepositsPeriodLength(&_L1StandardBridge.TransactOpts, _periodLength)
}

// SetEthThrottleDepositsPeriodLength is a paid mutator transaction binding the contract method 0x325bd058.
//
// Solidity: function setEthThrottleDepositsPeriodLength(uint48 _periodLength) returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) SetEthThrottleDepositsPeriodLength(_periodLength *big.Int) (*types.Transaction, error) {
	return _L1StandardBridge.Contract.SetEthThrottleDepositsPeriodLength(&_L1StandardBridge.TransactOpts, _periodLength)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_L1StandardBridge *L1StandardBridgeTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1StandardBridge.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_L1StandardBridge *L1StandardBridgeSession) Receive() (*types.Transaction, error) {
	return _L1StandardBridge.Contract.Receive(&_L1StandardBridge.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_L1StandardBridge *L1StandardBridgeTransactorSession) Receive() (*types.Transaction, error) {
	return _L1StandardBridge.Contract.Receive(&_L1StandardBridge.TransactOpts)
}

// L1StandardBridgeERC20BridgeFinalizedIterator is returned from FilterERC20BridgeFinalized and is used to iterate over the raw logs and unpacked data for ERC20BridgeFinalized events raised by the L1StandardBridge contract.
type L1StandardBridgeERC20BridgeFinalizedIterator struct {
	Event *L1StandardBridgeERC20BridgeFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StandardBridgeERC20BridgeFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StandardBridgeERC20BridgeFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StandardBridgeERC20BridgeFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StandardBridgeERC20BridgeFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StandardBridgeERC20BridgeFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StandardBridgeERC20BridgeFinalized represents a ERC20BridgeFinalized event raised by the L1StandardBridge contract.
type L1StandardBridgeERC20BridgeFinalized struct {
	LocalToken  common.Address
	RemoteToken common.Address
	From        common.Address
	To          common.Address
	Amount      *big.Int
	ExtraData   []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterERC20BridgeFinalized is a free log retrieval operation binding the contract event 0xd59c65b35445225835c83f50b6ede06a7be047d22e357073e250d9af537518cd.
//
// Solidity: event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) FilterERC20BridgeFinalized(opts *bind.FilterOpts, localToken []common.Address, remoteToken []common.Address, from []common.Address) (*L1StandardBridgeERC20BridgeFinalizedIterator, error) {

	var localTokenRule []interface{}
	for _, localTokenItem := range localToken {
		localTokenRule = append(localTokenRule, localTokenItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _L1StandardBridge.contract.FilterLogs(opts, "ERC20BridgeFinalized", localTokenRule, remoteTokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &L1StandardBridgeERC20BridgeFinalizedIterator{contract: _L1StandardBridge.contract, event: "ERC20BridgeFinalized", logs: logs, sub: sub}, nil
}

// WatchERC20BridgeFinalized is a free log subscription operation binding the contract event 0xd59c65b35445225835c83f50b6ede06a7be047d22e357073e250d9af537518cd.
//
// Solidity: event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) WatchERC20BridgeFinalized(opts *bind.WatchOpts, sink chan<- *L1StandardBridgeERC20BridgeFinalized, localToken []common.Address, remoteToken []common.Address, from []common.Address) (event.Subscription, error) {

	var localTokenRule []interface{}
	for _, localTokenItem := range localToken {
		localTokenRule = append(localTokenRule, localTokenItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _L1StandardBridge.contract.WatchLogs(opts, "ERC20BridgeFinalized", localTokenRule, remoteTokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StandardBridgeERC20BridgeFinalized)
				if err := _L1StandardBridge.contract.UnpackLog(event, "ERC20BridgeFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20BridgeFinalized is a log parse operation binding the contract event 0xd59c65b35445225835c83f50b6ede06a7be047d22e357073e250d9af537518cd.
//
// Solidity: event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) ParseERC20BridgeFinalized(log types.Log) (*L1StandardBridgeERC20BridgeFinalized, error) {
	event := new(L1StandardBridgeERC20BridgeFinalized)
	if err := _L1StandardBridge.contract.UnpackLog(event, "ERC20BridgeFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StandardBridgeERC20BridgeInitiatedIterator is returned from FilterERC20BridgeInitiated and is used to iterate over the raw logs and unpacked data for ERC20BridgeInitiated events raised by the L1StandardBridge contract.
type L1StandardBridgeERC20BridgeInitiatedIterator struct {
	Event *L1StandardBridgeERC20BridgeInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StandardBridgeERC20BridgeInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StandardBridgeERC20BridgeInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StandardBridgeERC20BridgeInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StandardBridgeERC20BridgeInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StandardBridgeERC20BridgeInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StandardBridgeERC20BridgeInitiated represents a ERC20BridgeInitiated event raised by the L1StandardBridge contract.
type L1StandardBridgeERC20BridgeInitiated struct {
	LocalToken  common.Address
	RemoteToken common.Address
	From        common.Address
	To          common.Address
	Amount      *big.Int
	ExtraData   []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterERC20BridgeInitiated is a free log retrieval operation binding the contract event 0x7ff126db8024424bbfd9826e8ab82ff59136289ea440b04b39a0df1b03b9cabf.
//
// Solidity: event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) FilterERC20BridgeInitiated(opts *bind.FilterOpts, localToken []common.Address, remoteToken []common.Address, from []common.Address) (*L1StandardBridgeERC20BridgeInitiatedIterator, error) {

	var localTokenRule []interface{}
	for _, localTokenItem := range localToken {
		localTokenRule = append(localTokenRule, localTokenItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _L1StandardBridge.contract.FilterLogs(opts, "ERC20BridgeInitiated", localTokenRule, remoteTokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &L1StandardBridgeERC20BridgeInitiatedIterator{contract: _L1StandardBridge.contract, event: "ERC20BridgeInitiated", logs: logs, sub: sub}, nil
}

// WatchERC20BridgeInitiated is a free log subscription operation binding the contract event 0x7ff126db8024424bbfd9826e8ab82ff59136289ea440b04b39a0df1b03b9cabf.
//
// Solidity: event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) WatchERC20BridgeInitiated(opts *bind.WatchOpts, sink chan<- *L1StandardBridgeERC20BridgeInitiated, localToken []common.Address, remoteToken []common.Address, from []common.Address) (event.Subscription, error) {

	var localTokenRule []interface{}
	for _, localTokenItem := range localToken {
		localTokenRule = append(localTokenRule, localTokenItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _L1StandardBridge.contract.WatchLogs(opts, "ERC20BridgeInitiated", localTokenRule, remoteTokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StandardBridgeERC20BridgeInitiated)
				if err := _L1StandardBridge.contract.UnpackLog(event, "ERC20BridgeInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20BridgeInitiated is a log parse operation binding the contract event 0x7ff126db8024424bbfd9826e8ab82ff59136289ea440b04b39a0df1b03b9cabf.
//
// Solidity: event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) ParseERC20BridgeInitiated(log types.Log) (*L1StandardBridgeERC20BridgeInitiated, error) {
	event := new(L1StandardBridgeERC20BridgeInitiated)
	if err := _L1StandardBridge.contract.UnpackLog(event, "ERC20BridgeInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StandardBridgeETHBridgeFinalizedIterator is returned from FilterETHBridgeFinalized and is used to iterate over the raw logs and unpacked data for ETHBridgeFinalized events raised by the L1StandardBridge contract.
type L1StandardBridgeETHBridgeFinalizedIterator struct {
	Event *L1StandardBridgeETHBridgeFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StandardBridgeETHBridgeFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StandardBridgeETHBridgeFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StandardBridgeETHBridgeFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StandardBridgeETHBridgeFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StandardBridgeETHBridgeFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StandardBridgeETHBridgeFinalized represents a ETHBridgeFinalized event raised by the L1StandardBridge contract.
type L1StandardBridgeETHBridgeFinalized struct {
	From      common.Address
	To        common.Address
	Amount    *big.Int
	ExtraData []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterETHBridgeFinalized is a free log retrieval operation binding the contract event 0x31b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83d.
//
// Solidity: event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) FilterETHBridgeFinalized(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*L1StandardBridgeETHBridgeFinalizedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _L1StandardBridge.contract.FilterLogs(opts, "ETHBridgeFinalized", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &L1StandardBridgeETHBridgeFinalizedIterator{contract: _L1StandardBridge.contract, event: "ETHBridgeFinalized", logs: logs, sub: sub}, nil
}

// WatchETHBridgeFinalized is a free log subscription operation binding the contract event 0x31b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83d.
//
// Solidity: event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) WatchETHBridgeFinalized(opts *bind.WatchOpts, sink chan<- *L1StandardBridgeETHBridgeFinalized, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _L1StandardBridge.contract.WatchLogs(opts, "ETHBridgeFinalized", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StandardBridgeETHBridgeFinalized)
				if err := _L1StandardBridge.contract.UnpackLog(event, "ETHBridgeFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseETHBridgeFinalized is a log parse operation binding the contract event 0x31b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83d.
//
// Solidity: event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) ParseETHBridgeFinalized(log types.Log) (*L1StandardBridgeETHBridgeFinalized, error) {
	event := new(L1StandardBridgeETHBridgeFinalized)
	if err := _L1StandardBridge.contract.UnpackLog(event, "ETHBridgeFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StandardBridgeETHBridgeInitiatedIterator is returned from FilterETHBridgeInitiated and is used to iterate over the raw logs and unpacked data for ETHBridgeInitiated events raised by the L1StandardBridge contract.
type L1StandardBridgeETHBridgeInitiatedIterator struct {
	Event *L1StandardBridgeETHBridgeInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StandardBridgeETHBridgeInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StandardBridgeETHBridgeInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StandardBridgeETHBridgeInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StandardBridgeETHBridgeInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StandardBridgeETHBridgeInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StandardBridgeETHBridgeInitiated represents a ETHBridgeInitiated event raised by the L1StandardBridge contract.
type L1StandardBridgeETHBridgeInitiated struct {
	From      common.Address
	To        common.Address
	Amount    *big.Int
	ExtraData []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterETHBridgeInitiated is a free log retrieval operation binding the contract event 0x2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af5.
//
// Solidity: event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) FilterETHBridgeInitiated(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*L1StandardBridgeETHBridgeInitiatedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _L1StandardBridge.contract.FilterLogs(opts, "ETHBridgeInitiated", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &L1StandardBridgeETHBridgeInitiatedIterator{contract: _L1StandardBridge.contract, event: "ETHBridgeInitiated", logs: logs, sub: sub}, nil
}

// WatchETHBridgeInitiated is a free log subscription operation binding the contract event 0x2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af5.
//
// Solidity: event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) WatchETHBridgeInitiated(opts *bind.WatchOpts, sink chan<- *L1StandardBridgeETHBridgeInitiated, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _L1StandardBridge.contract.WatchLogs(opts, "ETHBridgeInitiated", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StandardBridgeETHBridgeInitiated)
				if err := _L1StandardBridge.contract.UnpackLog(event, "ETHBridgeInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseETHBridgeInitiated is a log parse operation binding the contract event 0x2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af5.
//
// Solidity: event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)
func (_L1StandardBridge *L1StandardBridgeFilterer) ParseETHBridgeInitiated(log types.Log) (*L1StandardBridgeETHBridgeInitiated, error) {
	event := new(L1StandardBridgeETHBridgeInitiated)
	if err := _L1StandardBridge.contract.UnpackLog(event, "ETHBridgeInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StandardBridgeInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the L1StandardBridge contract.
type L1StandardBridgeInitializedIterator struct {
	Event *L1StandardBridgeInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StandardBridgeInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StandardBridgeInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StandardBridgeInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StandardBridgeInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StandardBridgeInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StandardBridgeInitialized represents a Initialized event raised by the L1StandardBridge contract.
type L1StandardBridgeInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_L1StandardBridge *L1StandardBridgeFilterer) FilterInitialized(opts *bind.FilterOpts) (*L1StandardBridgeInitializedIterator, error) {

	logs, sub, err := _L1StandardBridge.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &L1StandardBridgeInitializedIterator{contract: _L1StandardBridge.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_L1StandardBridge *L1StandardBridgeFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *L1StandardBridgeInitialized) (event.Subscription, error) {

	logs, sub, err := _L1StandardBridge.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StandardBridgeInitialized)
				if err := _L1StandardBridge.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_L1StandardBridge *L1StandardBridgeFilterer) ParseInitialized(log types.Log) (*L1StandardBridgeInitialized, error) {
	event := new(L1StandardBridgeInitialized)
	if err := _L1StandardBridge.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
