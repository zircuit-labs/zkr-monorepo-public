// Code generated by MockGen. DO NOT EDIT.
// Source: l1_datareader.go

// Package mock_l1 is a generated GoMock package.
package testutils

import (
	context "context"
	big "math/big"
	reflect "reflect"

	ethereum "github.com/ethereum/go-ethereum"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	common0 "github.com/zircuit-labs/l2-geth-public/common"
	eth "github.com/zircuit-labs/zkr-monorepo-public/op-service/eth"
)

// MockL1Reader is a mock of L1Reader interface.
type MockL1Reader struct {
	ctrl     *gomock.Controller
	recorder *MockL1ReaderMockRecorder
}

// MockL1ReaderMockRecorder is the mock recorder for MockL1Reader.
type MockL1ReaderMockRecorder struct {
	mock *MockL1Reader
}

// NewMockL1Reader creates a new mock instance.
func NewMockL1Reader(ctrl *gomock.Controller) *MockL1Reader {
	mock := &MockL1Reader{ctrl: ctrl}
	mock.recorder = &MockL1ReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockL1Reader) EXPECT() *MockL1ReaderMockRecorder {
	return m.recorder
}

// ChainID mocks base method.
func (m *MockL1Reader) ChainID(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainID indicates an expected call of ChainID.
func (mr *MockL1ReaderMockRecorder) ChainID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockL1Reader)(nil).ChainID), ctx)
}

// Close mocks base method.
func (m *MockL1Reader) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockL1ReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockL1Reader)(nil).Close))
}

// FetchReceipts mocks base method.
func (m *MockL1Reader) FetchReceipts(ctx context.Context, blockHash common0.Hash) (eth.BlockInfo, types.Receipts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchReceipts", ctx, blockHash)
	ret0, _ := ret[0].(eth.BlockInfo)
	ret1, _ := ret[1].(types.Receipts)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchReceipts indicates an expected call of FetchReceipts.
func (mr *MockL1ReaderMockRecorder) FetchReceipts(ctx, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchReceipts", reflect.TypeOf((*MockL1Reader)(nil).FetchReceipts), ctx, blockHash)
}

// InfoAndTxsByHash mocks base method.
func (m *MockL1Reader) InfoAndTxsByHash(ctx context.Context, hash common0.Hash) (eth.BlockInfo, types.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoAndTxsByHash", ctx, hash)
	ret0, _ := ret[0].(eth.BlockInfo)
	ret1, _ := ret[1].(types.Transactions)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InfoAndTxsByHash indicates an expected call of InfoAndTxsByHash.
func (mr *MockL1ReaderMockRecorder) InfoAndTxsByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoAndTxsByHash", reflect.TypeOf((*MockL1Reader)(nil).InfoAndTxsByHash), ctx, hash)
}

// InfoByHash mocks base method.
func (m *MockL1Reader) InfoByHash(ctx context.Context, hash common0.Hash) (eth.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoByHash", ctx, hash)
	ret0, _ := ret[0].(eth.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfoByHash indicates an expected call of InfoByHash.
func (mr *MockL1ReaderMockRecorder) InfoByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoByHash", reflect.TypeOf((*MockL1Reader)(nil).InfoByHash), ctx, hash)
}

// InfoByNumber mocks base method.
func (m *MockL1Reader) InfoByNumber(ctx context.Context, num uint64) (eth.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoByNumber", ctx, num)
	ret0, _ := ret[0].(eth.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfoByNumber indicates an expected call of InfoByNumber.
func (mr *MockL1ReaderMockRecorder) InfoByNumber(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoByNumber", reflect.TypeOf((*MockL1Reader)(nil).InfoByNumber), ctx, num)
}

// L1BlockRefByHash mocks base method.
func (m *MockL1Reader) L1BlockRefByHash(arg0 context.Context, arg1 common0.Hash) (eth.L1BlockRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "L1BlockRefByHash", arg0, arg1)
	ret0, _ := ret[0].(eth.L1BlockRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L1BlockRefByHash indicates an expected call of L1BlockRefByHash.
func (mr *MockL1ReaderMockRecorder) L1BlockRefByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L1BlockRefByHash", reflect.TypeOf((*MockL1Reader)(nil).L1BlockRefByHash), arg0, arg1)
}

// L1BlockRefByLabel mocks base method.
func (m *MockL1Reader) L1BlockRefByLabel(ctx context.Context, label eth.BlockLabel) (eth.L1BlockRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "L1BlockRefByLabel", ctx, label)
	ret0, _ := ret[0].(eth.L1BlockRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L1BlockRefByLabel indicates an expected call of L1BlockRefByLabel.
func (mr *MockL1ReaderMockRecorder) L1BlockRefByLabel(ctx, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L1BlockRefByLabel", reflect.TypeOf((*MockL1Reader)(nil).L1BlockRefByLabel), ctx, label)
}

// L1BlockRefByNumber mocks base method.
func (m *MockL1Reader) L1BlockRefByNumber(ctx context.Context, num uint64) (eth.L1BlockRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "L1BlockRefByNumber", ctx, num)
	ret0, _ := ret[0].(eth.L1BlockRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L1BlockRefByNumber indicates an expected call of L1BlockRefByNumber.
func (mr *MockL1ReaderMockRecorder) L1BlockRefByNumber(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L1BlockRefByNumber", reflect.TypeOf((*MockL1Reader)(nil).L1BlockRefByNumber), ctx, num)
}

// ReadStorageAt mocks base method.
func (m *MockL1Reader) ReadStorageAt(ctx context.Context, address common.Address, storageSlot, blockHash common.Hash) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStorageAt", ctx, address, storageSlot, blockHash)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStorageAt indicates an expected call of ReadStorageAt.
func (mr *MockL1ReaderMockRecorder) ReadStorageAt(ctx, address, storageSlot, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStorageAt", reflect.TypeOf((*MockL1Reader)(nil).ReadStorageAt), ctx, address, storageSlot, blockHash)
}

// SubscribeNewHead mocks base method.
func (m *MockL1Reader) SubscribeNewHead(ctx context.Context, ch chan<- *types.Header) (ethereum.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewHead", ctx, ch)
	ret0, _ := ret[0].(ethereum.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeNewHead indicates an expected call of SubscribeNewHead.
func (mr *MockL1ReaderMockRecorder) SubscribeNewHead(ctx, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewHead", reflect.TypeOf((*MockL1Reader)(nil).SubscribeNewHead), ctx, ch)
}
