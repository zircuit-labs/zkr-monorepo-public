ignoreGeneratedHeader = true
severity = "error"
confidence = 0.8
errorCode = 0
warningCode = 0

[rule.atomic]
[rule.blank-imports]
[rule.bool-literal-in-expr]
[rule.call-to-gc]
[rule.constant-logical-expr]
[rule.context-as-argument]
[rule.context-keys-type]
[rule.datarace]
[rule.defer]
[rule.dot-imports]
[rule.duplicated-imports]
[rule.early-return]
[rule.error-naming]
[rule.error-return]
[rule.error-strings]
[rule.errorf]
[rule.get-return]
[rule.identical-branches]
[rule.indent-error-flow]
[rule.imports-blacklist]
[rule.modifies-parameter]
[rule.modifies-value-receiver]
[rule.optimize-operands-order]
[rule.range]
[rule.range-val-in-closure]
[rule.range-val-address]
[rule.receiver-naming]
[rule.redefines-builtin-id]
[rule.string-of-int]
[rule.string-format]
[rule.struct-tag]
[rule.superfluous-else]
[rule.time-equal]
[rule.time-naming]
[rule.var-declaration]
[rule.unconditional-recursion]
[rule.unexported-naming]
[rule.unexported-return]
[rule.unnecessary-stmt]
[rule.unreachable-code]
[rule.useless-break]
[rule.waitgroup-by-value]

[rule.unhandled-error]
# I wish this could be enabled, but it is too difficult
# to set all the exceptions and/or always mark lines to ignore
# eg: fmt.Print() returns an error and no one ever checks that
disabled = true

[rule.confusing-results]
# checked by other linters
disabled = true

[rule.deep-exit]
# too many false positives
disabled = true
