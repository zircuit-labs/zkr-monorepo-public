# This Compose file is expected to be used with the devnet-up.sh script.
# The volumes below mount the configs generated by the script into each
# service.

volumes:
  l1_data_execution: #remember to always run create-beacon-chain-genesis to populate it
  l1_data_consensus:
  l2_data:
  l2_replica_data:
  op_log:
  op_log_replica:
  minio-data:
  op_node_nats_data:


services:
  minio:
    image: minio/minio:RELEASE.2023-10-25T06-33-25Z
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9090"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 5s
      retries: 10

  minio-setup:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: /bin/sh -c " /usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin && /usr/bin/mc mb minio/proof-orchestrator-test-bucket "

  db:
    hostname: db
    build:
      context: ../databases
      dockerfile: ./Dockerfile
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=poadmin
      - POSTGRES_PASSWORD=local
      - POSTGRES_DB=proof_orchestrator
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U poadmin -d proof_orchestrator -t 1" ]
      interval: 5s
      timeout: 5s
      retries: 10

  nats:
    build:
      context: .
      dockerfile: Dockerfile.nats
    hostname: nats
    command: "-js -m 8222 -c /var/nats.conf"
    ports:
      - "4222:4222"
      - "6222:6222"
      - "8222:8222"
    healthcheck:
      test: curl localhost:8222/jsz | jq -e '.streams > 0'
      interval: 2s
      timeout: 10s
      retries: 30

  terraform:
    depends_on:
      nats:
        condition: service_started
    build:
      context: .
      dockerfile: Dockerfile.terraform
    volumes:
      - ./infra:/infra
    working_dir: /infra
    environment:
      TF_VAR_NATS_ADDRESS: nats://nats:4222 #${NATS_ADDRESS}
    command: sh -c "terraform init && terraform apply -auto-approve"

  create-beacon-chain-genesis:
    image: ${BEACON_CHAIN_GENESIS_IMAGE}
    command:
      - testnet
      - generate-genesis
      - --fork=${FORK}
      - --num-validators=64
      - --output-ssz=/consensus/genesis.ssz
      - --genesis-time=${L1_GENESIS_TIME}
      - --chain-config-file=/config.yml
      - --geth-genesis-json-in=/genesis.json
      - --geth-genesis-json-out=/execution/genesis.json
    volumes:
      - "l1_data_execution:/execution"
      - "${PWD}/../.devnet/genesis-l1.json:/genesis.json"
      - "l1_data_consensus:/consensus"
      - "${PWD}/config.yml:/config.yml"

  geth-genesis:
    image: ${GETH_IMAGE}
    command: --datadir=/execution --state.scheme=hash init /execution/genesis.json
    volumes:
      - "l1_data_execution:/execution"
    depends_on:
      create-beacon-chain-genesis:
        condition: service_completed_successfully

  l1:
    image: ${GETH_IMAGE}
    command:
      - --http
      - --http.api=web3,debug,eth,txpool,net,engine
      - --http.addr=0.0.0.0
      - --authrpc.vhosts=*
      - --authrpc.addr=0.0.0.0
      - --authrpc.jwtsecret=/jwtsecret
      - --datadir=/execution
      - --allow-insecure-unlock
      - --nodiscover
      - --syncmode=full
      - --verbosity=3
      - --http.corsdomain=*
      - --http.vhosts=*
      - --http.port=8545
      - --ws
      - --ws.addr=0.0.0.0
      - --ws.port=8546
      - --ws.origins=*
      - --ws.api=debug,eth,txpool,net,engine
      - --maxpeers=1
      - --networkid=900
      - --rpc.allow-unprotected-txs
      - --authrpc.port=8551
      - --gcmode=archive
      - --state.scheme=hash
      - --metrics
      - --metrics.addr=0.0.0.0
      - --metrics.port=6060
    ports:
      - 8551:8551
      - 8545:8545
      - 8546:8546
      - 7060:6060
    volumes:
      - "l1_data_execution:/execution"
      - "${PWD}/test-jwt-secret.txt:/jwtsecret"
    healthcheck:
      test: [ "CMD", "wget", "--tries=1", "--no-verbose", "--output-document=/dev/null", "http://localhost:8545" ]
      interval: 5s
      timeout: 5s
      retries: 10

  beacon-chain:
    image: ${PRYSM_IMAGE}
    command:
      - --datadir=/consensus/beacondata
      # No peers to sync with in this testnet, so setting to 0
      - --min-sync-peers=0
      - --genesis-state=/consensus/genesis.ssz
      - --bootstrap-node=
      # The chain configuration file used for setting up Prysm
      - --chain-config-file=/config.yml
      # We specify the chain id used by our execution client
      - --chain-id=${CHAIN_ID:-900}
      - --rpc-host=0.0.0.0
      - --contract-deployment-block=0
      - --grpc-gateway-host=0.0.0.0
      - --execution-endpoint=http://l1:8551
      - --accept-terms-of-use
      - --jwt-secret=/test-jwt-secret.txt
      - --suggested-fee-recipient=0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266
    ports:
      - 4000:4000
      - 3500:3500
      - 8080:8080
    volumes:
      - "l1_data_consensus:/consensus"
      - "${PWD}/config.yml:/config.yml"
      - "${PWD}/test-jwt-secret.txt:/test-jwt-secret.txt"

  validator:
    image: ${PRYSM_VALIDATOR_IMAGE}
    command:
      - --beacon-rpc-provider=beacon-chain:4000
      - --datadir=/consensus/validatordata
      - --accept-terms-of-use
      - --interop-num-validators=64
      - --interop-start-index=0
      - --chain-config-file=/config.yml
    depends_on:
      beacon-chain:
        condition: service_started
    volumes:
      - "l1_data_consensus:/consensus"
      - "${PWD}/config.yml:/config.yml"

  l2:
    build:
      context: .
      dockerfile: Dockerfile.l2
    ports:
      - "9545:8545"
      - "9546:8546"
      - "8060:6060"
    volumes:
      - "l2_data:/db"
      - "${PWD}/../.devnet/genesis-l2.json:/genesis.json"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
      - "${PWD}/gethconfig.toml:/config/gethconfig.toml"
    entrypoint:
      # pass the L2 specific flags by overriding the entry-point and adding extra arguments
      - "/bin/sh"
      - "/entrypoint.sh"
      - "--authrpc.jwtsecret=${OP_NODE_L2_ENGINE_AUTH}"
      - "--rollup.disabletxpoolgossip=true"
    environment:
      FORK_TRIGGER: ${FORK_TRIGGER}
      GETH_MINER_RECOMMIT: 2s
    healthcheck:
      test: [ "CMD", "wget", "--tries=1", "--no-verbose", "--output-document=/dev/null", "http://localhost:8545" ]
      interval: 5s
      timeout: 5s
      retries: 10

  op-node:
    depends_on:
      - l1
      - l2
    image: op-node:latest
    ports:
      - "7545:8545"
      - "9003:9003"
      - "7300:7300"
      - "6060:6060"
    volumes:
      - "${PWD}/p2p-sequencer-key.txt:/config/p2p-sequencer-key.txt"
      - "${PWD}/p2p-node-key.txt:/config/p2p-node-key.txt"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
      - "${PWD}/../.devnet/rollup.json:/rollup.json"
      - op_log:/op_log
      - op_node_nats_data:/nats
    healthcheck:
      test: [ "CMD", "wget", "--tries=1", "--no-verbose", "--output-document=/dev/null", "http://localhost:8545/healthz" ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      OP_NODE_L1_ETH_RPC: ${L1_URL_WS}
      OP_NODE_L1_BEACON: ${L1_URL_BEACON}
      OP_NODE_L2_ENGINE_RPC: ${OP_NODE_L2_ENGINE_RPC}
      OP_NODE_ROLLUP_CONFIG: ${OP_NODE_ROLLUP_CONFIG}
      OP_NODE_RPC_ADDR: "0.0.0.0"
      OP_NODE_RPC_PORT: 8545
      OP_NODE_RPC_ENABLE_ADMIN: ${OP_NODE_RPC_ENABLE_ADMIN}
      OP_NODE_L1_TRUST_RPC: ${OP_NODE_L1_TRUST_RPC}
      OP_NODE_L1_RPC_KIND: ${OP_NODE_L1_RPC_KIND}
      OP_NODE_L1_RPC_RATE_LIMIT: ${OP_NODE_L1_RPC_RATE_LIMIT}
      OP_NODE_L1_RPC_MAX_BATCH_SIZE: ${OP_NODE_L1_RPC_MAX_BATCH_SIZE}
      OP_NODE_L1_HTTP_POLL_INTERVAL: ${OP_NODE_L1_HTTP_POLL_INTERVAL}
      OP_NODE_L2_ENGINE_AUTH: ${OP_NODE_L2_ENGINE_AUTH}
      OP_NODE_VERIFIER_L1_CONFS: ${OP_NODE_VERIFIER_L1_CONFS}
      OP_NODE_SEQUENCER_ENABLED: ${OP_NODE_SEQUENCER_ENABLED}
      OP_NODE_SEQUENCER_STOPPED: ${OP_NODE_SEQUENCER_STOPPED}
      OP_NODE_SEQUENCER_MAX_SAFE_LAG: ${OP_NODE_SEQUENCER_MAX_SAFE_LAG}
      OP_NODE_SEQUENCER_L1_CONFS: ${OP_NODE_SEQUENCER_L1_CONFS}
      OP_NODE_L1_EPOCH_POLL_INTERVAL: ${OP_NODE_L1_EPOCH_POLL_INTERVAL}
      OP_NODE_SNAPSHOT_LOG: ${OP_NODE_SNAPSHOT_LOG}
      OP_NODE_HEARTBEAT_ENABLED: ${OP_NODE_HEARTBEAT_ENABLED}
      OP_NODE_HEARTBEAT_MONIKER: ${OP_NODE_HEARTBEAT_MONIKER}
      OP_NODE_HEARTBEAT_URL: ${OP_NODE_HEARTBEAT_URL}
      OP_NODE_L2_BACKUP_UNSAFE_SYNC_RPC: ${OP_NODE_L2_BACKUP_UNSAFE_SYNC_RPC}
      OP_NODE_L2_BACKUP_UNSAFE_SYNC_RPC_TRUST_RPC: ${OP_NODE_L2_BACKUP_UNSAFE_SYNC_RPC_TRUST_RPC}
      OP_NODE_SYNCMODE: ${OP_NODE_SYNCMODE}

      OP_NODE_P2P_SEQUENCER_KEY: ${OP_NODE_P2P_SEQUENCER_KEY}
      OP_NODE_P2P_LISTEN_IP: "0.0.0.0"
      OP_NODE_P2P_LISTEN_TCP_PORT: 9003
      OP_NODE_P2P_LISTEN_UDP_PORT: 9003
      OP_NODE_P2P_PEER_SCORING: ${OP_NODE_P2P_PEER_SCORING}
      OP_NODE_P2P_PEER_BANNING: ${OP_NODE_P2P_PEER_BANNING}
      OP_NODE_P2P_PRIV_PATH: ${OP_NODE_P2P_PRIV_PATH}

      OP_NODE_METRICS_ENABLED: ${METRICS_ENABLED}
      OP_NODE_PPROF_ENABLED: ${PPROF_ENABLED}
      OP_NODE_LOG_LEVEL: ${LOG_LEVEL}

      OP_NODE_NATS_ENABLED: false
      OP_NODE_NATS_STOREDIR: "/nats"

      OP_NODE_LOG_COLOR: true
      OP_NODE_LOG_FORMAT: "terminal"

  # to run with replicas enabled, execute:
  # `export COMPOSE_PROFILES=replica; make devnet-up`
  l2-replica:
    build:
      context: .
      dockerfile: Dockerfile.l2
    ports:
      - "19545:8545"
      - "19546:8546"
      - "18060:6060"
    volumes:
      - "l2_replica_data:/db"
      - "${PWD}/../.devnet/genesis-l2.json:/genesis.json"
      - "${PWD}/test-jwt-secret-replica.txt:/config/test-jwt-secret-replica.txt"
    entrypoint:
      # pass the L2 specific flags by overriding the entry-point and adding extra arguments
      - "/bin/sh"
      - "/entrypoint.sh"
      - "--authrpc.jwtsecret=${OP_NODE_REPLICA_L2_ENGINE_AUTH}"
      - "--rollup.sequencerhttp=${L2_URL_HTTP}"
      - "--rollup.disabletxpoolgossip=true"
    environment:
      FORK_TRIGGER: ${FORK_TRIGGER}
      GETH_MINER_RECOMMIT: 2s
    healthcheck:
      test: [ "CMD", "wget", "--tries=1", "--no-verbose", "--output-document=/dev/null", "http://localhost:8545" ]
      interval: 5s
      timeout: 5s
      retries: 10
    profiles:
      - replica

  op-node-replica:
    depends_on:
      l2-replica:
        condition: service_healthy
    image: op-node:latest
    ports:
      - "17545:8545"
      - "19003:9003"
      - "17300:7300"
      - "16060:6060"
    volumes:
      - "${PWD}/test-jwt-secret-replica.txt:/config/test-jwt-secret-replica.txt"
      - "${PWD}/p2p-node-key-replica.txt:/config/p2p-node-key.txt"
      - "${PWD}/../.devnet/rollup.json:/rollup.json"
      - op_log_replica:/op_log

    healthcheck:
      test: [ "CMD", "wget", "--tries=1", "--no-verbose", "--output-document=/dev/null", "http://localhost:8545/healthz" ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      OP_NODE_L1_ETH_RPC: ${L1_URL_WS}
      OP_NODE_L1_BEACON: ${L1_URL_BEACON}
      OP_NODE_L2_ENGINE_RPC: ${OP_NODE_REPLICA_L2_ENGINE_RPC}
      OP_NODE_ROLLUP_CONFIG: ${OP_NODE_ROLLUP_CONFIG}
      OP_NODE_RPC_ADDR: "0.0.0.0"
      OP_NODE_RPC_PORT: 8545
      OP_NODE_RPC_ENABLE_ADMIN: ${OP_NODE_RPC_ENABLE_ADMIN}
      OP_NODE_L1_TRUST_RPC: ${OP_NODE_L1_TRUST_RPC}
      OP_NODE_L1_RPC_KIND: ${OP_NODE_L1_RPC_KIND}
      OP_NODE_L1_RPC_RATE_LIMIT: ${OP_NODE_L1_RPC_RATE_LIMIT}
      OP_NODE_L1_RPC_MAX_BATCH_SIZE: ${OP_NODE_L1_RPC_MAX_BATCH_SIZE}
      OP_NODE_L1_HTTP_POLL_INTERVAL: ${OP_NODE_L1_HTTP_POLL_INTERVAL}
      OP_NODE_L2_ENGINE_AUTH: ${OP_NODE_REPLICA_L2_ENGINE_AUTH}
      OP_NODE_VERIFIER_L1_CONFS: ${OP_NODE_VERIFIER_L1_CONFS}
      OP_NODE_SEQUENCER_ENABLED: false
      OP_NODE_SEQUENCER_STOPPED: ${OP_NODE_SEQUENCER_STOPPED}
      OP_NODE_SEQUENCER_MAX_SAFE_LAG: ${OP_NODE_SEQUENCER_MAX_SAFE_LAG}
      OP_NODE_SEQUENCER_L1_CONFS: ${OP_NODE_SEQUENCER_L1_CONFS}
      OP_NODE_L1_EPOCH_POLL_INTERVAL: ${OP_NODE_L1_EPOCH_POLL_INTERVAL}
      OP_NODE_SNAPSHOT_LOG: ${OP_NODE_SNAPSHOT_LOG}
      OP_NODE_HEARTBEAT_ENABLED: ${OP_NODE_HEARTBEAT_ENABLED}
      OP_NODE_HEARTBEAT_MONIKER: ${OP_NODE_HEARTBEAT_MONIKER}
      OP_NODE_HEARTBEAT_URL: ${OP_NODE_HEARTBEAT_URL}
      OP_NODE_L2_BACKUP_UNSAFE_SYNC_RPC: ${OP_NODE_L2_BACKUP_UNSAFE_SYNC_RPC}
      OP_NODE_L2_BACKUP_UNSAFE_SYNC_RPC_TRUST_RPC: ${OP_NODE_L2_BACKUP_UNSAFE_SYNC_RPC_TRUST_RPC}
      OP_NODE_SYNCMODE: ${OP_NODE_SYNCMODE}

      OP_NODE_P2P_LISTEN_IP: "0.0.0.0"
      OP_NODE_P2P_LISTEN_TCP_PORT: 9003
      OP_NODE_P2P_LISTEN_UDP_PORT: 9003
      OP_NODE_P2P_PEER_SCORING: ${OP_NODE_P2P_PEER_SCORING}
      OP_NODE_P2P_PEER_BANNING: ${OP_NODE_P2P_PEER_BANNING}
      OP_NODE_P2P_STATIC: /dns4/${SEQUENCER_ROLLUP_HOSTNAME}/tcp/${SEQUENCER_ROLLUP_DISCOVERY_PORT}/p2p/16Uiu2HAmHqrXGts25TtKMBRHtvhWZLNypsobKoggpZye1XQtJpbZ
      OP_NODE_P2P_PRIV_PATH: ${OP_NODE_P2P_PRIV_PATH}

      OP_NODE_METRICS_ENABLED: ${METRICS_ENABLED}
      OP_NODE_PPROF_ENABLED: ${PPROF_ENABLED}
      OP_NODE_LOG_LEVEL: ${LOG_LEVEL}
      OP_NODE_LOG_COLOR: true
      OP_NODE_LOG_FORMAT: "terminal"
    profiles:
      - replica

  healthcheck:
    image: ethereumoptimism/replica-healthcheck:${IMAGE_TAG__HEALTHCHECK:-latest}
    restart: unless-stopped
    environment:
      - HEALTHCHECK__TARGET_RPC_PROVIDER=http://l2-replica:8545
      - HEALTHCHECK__REFERENCE_RPC_PROVIDER=${L2_URL_HTTP}
    ports:
      - ${PORT__HEALTHCHECK_METRICS:-27301}:7300
    profiles:
      - replica

  op-batcher:
    depends_on:
      # - op_stack_go_builder
      - l1
      - l2
      - op-node
    image: op-batcher:latest
    ports:
      - "6061:6060"
      - "7301:7300"
      - "6545:8545"
    environment:
      OP_BATCHER_SEQUENCER_HD_PATH: "m/44'/60'/0'/0/2"
      OP_BATCHER_L1_ETH_RPC: ${L1_URL_HTTP}
      OP_BATCHER_L2_ETH_RPC: ${L2_URL_HTTP}
      OP_BATCHER_ROLLUP_RPC: ${ROLLUP_RPC}
      OP_BATCHER_SUB_SAFETY_MARGIN: ${OP_BATCHER_SUB_SAFETY_MARGIN}
      OP_BATCHER_POLL_INTERVAL: ${OP_BATCHER_POLL_INTERVAL}
      OP_BATCHER_MAX_CHANNEL_DURATION: ${OP_BATCHER_MAX_CHANNEL_DURATION}
      OP_BATCHER_MNEMONIC: ${MNEMONIC}
      OP_BATCHER_NUM_CONFIRMATIONS: ${OP_BATCHER_NUM_CONFIRMATIONS}
      OP_BATCHER_RPC_ENABLE_ADMIN: ${OP_BATCHER_RPC_ENABLE_ADMIN}
      OP_BATCHER_BATCH_TYPE: ${OP_BATCHER_BATCH_TYPE}
      OP_BATCHER_DATA_AVAILABILITY_TYPE: ${OP_BATCHER_DATA_AVAILABILITY_TYPE}
      OP_BATCHER_TARGET_NUM_FRAMES: ${OP_BATCHER_TARGET_NUM_FRAMES}
      OP_BATCHER_METRICS_ENABLED: ${METRICS_ENABLED}
      OP_BATCHER_PPROF_ENABLED: ${PPROF_ENABLED}
      OP_BATCHER_SIGNER_TYPE: "mnemonic"
      OP_BATCHER_S3KEYSTORE_FILE: "keystore-file2.json"
      OP_BATCHER_S3KEYSTORE_PASSPHRASE: "password1"
      OP_BATCHER_S3KEYSTORE_ENDPOINT: "http://minio:9000"
      OP_BATCHER_S3KEYSTORE_ACCESSKEYID: "minioadmin"
      OP_BATCHER_S3KEYSTORE_SECRETACCESSKEY: "minioadmin"
      OP_BATCHER_S3KEYSTORE_BUCKET: "proof-orchestrator-test-bucket"
      OP_BATCHER_S3KEYSTORE_REGION: "us-east-1"
      OP_BATCHER_S3KEYSTORE_S3FORCEPATHSTYLE: true
      OP_BATCHER_S3KEYSTORE_DISABLESSL: true
